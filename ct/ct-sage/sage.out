2016-08-07 20:38:14,428 - INFO --- --------------------------------
2016-08-07 20:38:14,429 - INFO --- BEGIN: Create the graph to color
2016-08-07 20:38:14,429 - INFO --- --------------------------------
2016-08-07 20:38:14,449 - INFO --- ------------------------------
2016-08-07 20:38:14,449 - INFO --- END: Create the graph to color
2016-08-07 20:38:14,450 - INFO --- ------------------------------
2016-08-07 20:38:14,450 - INFO --- 
2016-08-07 20:38:14,450 - INFO --- ------------------------
2016-08-07 20:38:14,450 - INFO --- BEGIN: Graph information
2016-08-07 20:38:14,450 - INFO --- ------------------------
2016-08-07 20:38:14,451 - INFO --- OK. The graph is 3-regular
2016-08-07 20:38:14,451 - INFO --- OK. The graph does not have loops. Consider that this program will avoid their creation during the reduction process
2016-08-07 20:38:14,453 - INFO --- OK. The graph does not have multiple edges. Consider that this program will also handle multiple edges during the reduction and reconstruction process
2016-08-07 20:38:14,462 - INFO --- OK. The graph is planar
2016-08-07 20:38:14,463 - INFO --- The graph has 396 vertices and 594 edges
2016-08-07 20:38:14,463 - INFO --- BEGIN: Embed the graph into the plane (is_planar(set_embedding = True)
2016-08-07 20:38:20,926 - INFO --- END: Embed the graph into the plane (is_planar(set_embedding = True)
2016-08-07 20:38:21,229 - DEBUG --- Face: [(49, 58), (58, 48), (48, 49)]
2016-08-07 20:38:21,230 - DEBUG --- Face: [(108, 105), (105, 106), (106, 108)]
2016-08-07 20:38:21,230 - DEBUG --- Face: [(100, 94), (94, 95), (95, 100)]
2016-08-07 20:38:21,231 - DEBUG --- Face: [(330, 273), (273, 1), (1, 330)]
2016-08-07 20:38:21,231 - DEBUG --- Face: [(371, 372), (372, 324), (324, 371)]
2016-08-07 20:38:21,231 - DEBUG --- Face: [(175, 178), (178, 207), (207, 175)]
2016-08-07 20:38:21,231 - DEBUG --- Face: [(192, 186), (186, 187), (187, 192)]
2016-08-07 20:38:21,232 - DEBUG --- Face: [(271, 385), (385, 2), (2, 271)]
2016-08-07 20:38:21,232 - DEBUG --- Face: [(96, 104), (104, 93), (93, 96)]
2016-08-07 20:38:21,232 - DEBUG --- Face: [(328, 313), (313, 314), (314, 328)]
2016-08-07 20:38:21,232 - DEBUG --- Face: [(264, 262), (262, 263), (263, 264)]
2016-08-07 20:38:21,233 - DEBUG --- Face: [(390, 386), (386, 388), (388, 390)]
2016-08-07 20:38:21,233 - DEBUG --- Face: [(338, 339), (339, 347), (347, 338)]
2016-08-07 20:38:21,233 - DEBUG --- Face: [(130, 133), (133, 183), (183, 130)]
2016-08-07 20:38:21,233 - DEBUG --- Face: [(265, 14), (14, 15), (15, 265)]
2016-08-07 20:38:21,233 - DEBUG --- Face: [(179, 201), (201, 301), (301, 179)]
2016-08-07 20:38:21,234 - DEBUG --- Face: [(246, 334), (334, 235), (235, 246)]
2016-08-07 20:38:21,234 - DEBUG --- Face: [(359, 343), (343, 342), (342, 359)]
2016-08-07 20:38:21,235 - DEBUG --- Face: [(285, 276), (276, 277), (277, 285)]
2016-08-07 20:38:21,235 - DEBUG --- Face: [(45, 41), (41, 42), (42, 45)]
2016-08-07 20:38:21,235 - DEBUG --- Face: [(376, 329), (329, 373), (373, 376)]
2016-08-07 20:38:21,235 - DEBUG --- Face: [(350, 90), (90, 124), (124, 350)]
2016-08-07 20:38:21,236 - DEBUG --- Face: [(204, 205), (205, 208), (208, 204)]
2016-08-07 20:38:21,236 - DEBUG --- Face: [(297, 299), (299, 302), (302, 297)]
2016-08-07 20:38:21,236 - DEBUG --- Face: [(315, 318), (318, 319), (319, 315)]
2016-08-07 20:38:21,236 - DEBUG --- Face: [(36, 39), (39, 38), (38, 36)]
2016-08-07 20:38:21,236 - DEBUG --- Face: [(251, 245), (245, 248), (248, 251)]
2016-08-07 20:38:21,237 - DEBUG --- Face: [(218, 220), (220, 216), (216, 218)]
2016-08-07 20:38:21,237 - DEBUG --- Face: [(300, 304), (304, 298), (298, 300)]
2016-08-07 20:38:21,237 - DEBUG --- Face: [(369, 378), (378, 366), (366, 369)]
2016-08-07 20:38:21,237 - DEBUG --- Face: [(303, 24), (24, 35), (35, 303)]
2016-08-07 20:38:21,238 - DEBUG --- Face: [(325, 357), (357, 358), (358, 325)]
2016-08-07 20:38:21,238 - DEBUG --- Face: [(279, 346), (346, 257), (257, 279)]
2016-08-07 20:38:21,238 - DEBUG --- Face: [(22, 26), (26, 21), (21, 22)]
2016-08-07 20:38:21,238 - DEBUG --- Face: [(227, 221), (221, 222), (222, 227)]
2016-08-07 20:38:21,238 - DEBUG --- Face: [(109, 111), (111, 143), (143, 109)]
2016-08-07 20:38:21,239 - DEBUG --- Face: [(149, 151), (151, 153), (153, 149)]
2016-08-07 20:38:21,239 - DEBUG --- Face: [(202, 206), (206, 200), (200, 202)]
2016-08-07 20:38:21,239 - DEBUG --- Face: [(85, 67), (67, 69), (69, 85)]
2016-08-07 20:38:21,239 - DEBUG --- Face: [(288, 287), (287, 284), (284, 283), (283, 288)]
2016-08-07 20:38:21,239 - DEBUG --- Face: [(385, 271), (271, 270), (270, 374), (374, 385)]
2016-08-07 20:38:21,240 - DEBUG --- Face: [(375, 327), (327, 329), (329, 376), (376, 375)]
2016-08-07 20:38:21,240 - DEBUG --- Face: [(214, 158), (158, 150), (150, 152), (152, 214)]
2016-08-07 20:38:21,240 - DEBUG --- Face: [(76, 121), (121, 122), (122, 78), (78, 76)]
2016-08-07 20:38:21,240 - DEBUG --- Face: [(250, 241), (241, 234), (234, 238), (238, 250)]
2016-08-07 20:38:21,240 - DEBUG --- Face: [(203, 207), (207, 178), (178, 177), (177, 203)]
2016-08-07 20:38:21,241 - DEBUG --- Face: [(314, 272), (272, 274), (274, 328), (328, 314)]
2016-08-07 20:38:21,241 - DEBUG --- Face: [(25, 393), (393, 394), (394, 12), (12, 25)]
2016-08-07 20:38:21,241 - DEBUG --- Face: [(101, 347), (347, 339), (339, 79), (79, 101)]
2016-08-07 20:38:21,241 - DEBUG --- Face: [(88, 91), (91, 89), (89, 87), (87, 88)]
2016-08-07 20:38:21,241 - DEBUG --- Face: [(111, 110), (110, 140), (140, 143), (143, 111)]
2016-08-07 20:38:21,242 - DEBUG --- Face: [(240, 167), (167, 166), (166, 239), (239, 240)]
2016-08-07 20:38:21,242 - DEBUG --- Face: [(211, 210), (210, 242), (242, 252), (252, 211)]
2016-08-07 20:38:21,242 - DEBUG --- Face: [(265, 15), (15, 3), (3, 6), (6, 265)]
2016-08-07 20:38:21,242 - DEBUG --- Face: [(333, 332), (332, 344), (344, 345), (345, 333)]
2016-08-07 20:38:21,243 - DEBUG --- Face: [(115, 120), (120, 75), (75, 74), (74, 115)]
2016-08-07 20:38:21,243 - DEBUG --- Face: [(142, 145), (145, 144), (144, 139), (139, 142)]
2016-08-07 20:38:21,243 - DEBUG --- Face: [(260, 261), (261, 255), (255, 254), (254, 260)]
2016-08-07 20:38:21,243 - DEBUG --- Face: [(34, 382), (382, 381), (381, 29), (29, 34)]
2016-08-07 20:38:21,243 - DEBUG --- Face: [(195, 171), (171, 170), (170, 189), (189, 195)]
2016-08-07 20:38:21,244 - DEBUG --- Face: [(25, 12), (12, 11), (11, 23), (23, 25)]
2016-08-07 20:38:21,244 - DEBUG --- Face: [(219, 227), (227, 222), (222, 217), (217, 219)]
2016-08-07 20:38:21,244 - DEBUG --- Face: [(41, 45), (45, 44), (44, 43), (43, 41)]
2016-08-07 20:38:21,244 - DEBUG --- Face: [(390, 388), (388, 387), (387, 389), (389, 390)]
2016-08-07 20:38:21,244 - DEBUG --- Face: [(154, 127), (127, 123), (123, 125), (125, 154)]
2016-08-07 20:38:21,245 - DEBUG --- Face: [(322, 321), (321, 353), (353, 355), (355, 322)]
2016-08-07 20:38:21,245 - DEBUG --- Face: [(121, 76), (76, 75), (75, 120), (120, 121)]
2016-08-07 20:38:21,245 - DEBUG --- Face: [(232, 226), (226, 225), (225, 229), (229, 232)]
2016-08-07 20:38:21,245 - DEBUG --- Face: [(88, 81), (81, 83), (83, 91), (91, 88)]
2016-08-07 20:38:21,245 - DEBUG --- Face: [(188, 194), (194, 195), (195, 189), (189, 188)]
2016-08-07 20:38:21,245 - DEBUG --- Face: [(89, 91), (91, 83), (83, 84), (84, 89)]
2016-08-07 20:38:21,246 - DEBUG --- Face: [(167, 240), (240, 209), (209, 162), (162, 167)]
2016-08-07 20:38:21,246 - DEBUG --- Face: [(53, 48), (48, 58), (58, 56), (56, 53)]
2016-08-07 20:38:21,246 - DEBUG --- Face: [(148, 118), (118, 117), (117, 147), (147, 148)]
2016-08-07 20:38:21,246 - DEBUG --- Face: [(322, 355), (355, 354), (354, 309), (309, 322)]
2016-08-07 20:38:21,246 - DEBUG --- Face: [(295, 289), (289, 287), (287, 288), (288, 295)]
2016-08-07 20:38:21,247 - DEBUG --- Face: [(10, 21), (21, 26), (26, 9), (9, 10)]
2016-08-07 20:38:21,247 - DEBUG --- Face: [(346, 279), (279, 268), (268, 337), (337, 346)]
2016-08-07 20:38:21,247 - DEBUG --- Face: [(172, 180), (180, 198), (198, 185), (185, 172)]
2016-08-07 20:38:21,247 - DEBUG --- Face: [(335, 344), (344, 332), (332, 331), (331, 335)]
2016-08-07 20:38:21,247 - DEBUG --- Face: [(144, 145), (145, 147), (147, 117), (117, 116), (116, 144)]
2016-08-07 20:38:21,248 - DEBUG --- Face: [(333, 345), (345, 224), (224, 235), (235, 334), (334, 333)]
2016-08-07 20:38:21,248 - DEBUG --- Face: [(118, 148), (148, 149), (149, 153), (153, 119), (119, 118)]
2016-08-07 20:38:21,248 - DEBUG --- Face: [(8, 7), (7, 18), (18, 17), (17, 16), (16, 8)]
2016-08-07 20:38:21,248 - DEBUG --- Face: [(82, 86), (86, 87), (87, 89), (89, 84), (84, 82)]
2016-08-07 20:38:21,249 - DEBUG --- Face: [(192, 191), (191, 194), (194, 188), (188, 186), (186, 192)]
2016-08-07 20:38:21,249 - DEBUG --- Face: [(372, 349), (349, 357), (357, 325), (325, 324), (324, 372)]
2016-08-07 20:38:21,249 - DEBUG --- Face: [(112, 330), (330, 1), (1, 0), (0, 223), (223, 112)]
2016-08-07 20:38:21,249 - DEBUG --- Face: [(264, 33), (33, 27), (27, 28), (28, 262), (262, 264)]
2016-08-07 20:38:21,249 - DEBUG --- Face: [(387, 362), (362, 364), (364, 383), (383, 389), (389, 387)]
2016-08-07 20:38:21,250 - DEBUG --- Face: [(179, 301), (301, 312), (312, 168), (168, 146), (146, 179)]
2016-08-07 20:38:21,250 - DEBUG --- Face: [(243, 244), (244, 261), (261, 260), (260, 249), (249, 243)]
2016-08-07 20:38:21,250 - DEBUG --- Face: [(132, 193), (193, 182), (182, 183), (183, 133), (133, 132)]
2016-08-07 20:38:21,250 - DEBUG --- Face: [(254, 253), (253, 247), (247, 249), (249, 260), (260, 254)]
2016-08-07 20:38:21,250 - DEBUG --- Face: [(152, 141), (141, 102), (102, 103), (103, 214), (214, 152)]
2016-08-07 20:38:21,250 - DEBUG --- Face: [(208, 199), (199, 200), (200, 206), (206, 204), (204, 208)]
2016-08-07 20:38:21,251 - DEBUG --- Face: [(251, 250), (250, 238), (238, 237), (237, 245), (245, 251)]
2016-08-07 20:38:21,251 - DEBUG --- Face: [(216, 220), (220, 164), (164, 163), (163, 215), (215, 216)]
2016-08-07 20:38:21,251 - DEBUG --- Face: [(190, 323), (323, 312), (312, 301), (301, 201), (201, 190)]
2016-08-07 20:38:21,251 - DEBUG --- Face: [(104, 96), (96, 94), (94, 100), (100, 99), (99, 104)]
2016-08-07 20:38:21,251 - DEBUG --- Face: [(262, 28), (28, 17), (17, 18), (18, 263), (263, 262)]
2016-08-07 20:38:21,252 - DEBUG --- Face: [(129, 134), (134, 184), (184, 196), (196, 174), (174, 129)]
2016-08-07 20:38:21,252 - DEBUG --- Face: [(82, 80), (80, 72), (72, 66), (66, 86), (86, 82)]
2016-08-07 20:38:21,252 - DEBUG --- Face: [(230, 244), (244, 243), (243, 236), (236, 228), (228, 230)]
2016-08-07 20:38:21,252 - DEBUG --- Face: [(258, 62), (62, 63), (63, 71), (71, 259), (259, 258)]
2016-08-07 20:38:21,252 - DEBUG --- Face: [(290, 257), (257, 346), (346, 337), (337, 336), (336, 290)]
2016-08-07 20:38:21,253 - DEBUG --- Face: [(383, 384), (384, 386), (386, 390), (390, 389), (389, 383)]
2016-08-07 20:38:21,253 - DEBUG --- Face: [(291, 292), (292, 296), (296, 280), (280, 278), (278, 291)]
2016-08-07 20:38:21,253 - DEBUG --- Face: [(77, 78), (78, 122), (122, 126), (126, 138), (138, 77)]
2016-08-07 20:38:21,253 - DEBUG --- Face: [(159, 128), (128, 127), (127, 154), (154, 155), (155, 159)]
2016-08-07 20:38:21,253 - DEBUG --- Face: [(335, 212), (212, 224), (224, 345), (345, 344), (344, 335)]
2016-08-07 20:38:21,254 - DEBUG --- Face: [(322, 309), (309, 308), (308, 320), (320, 321), (321, 322)]
2016-08-07 20:38:21,254 - DEBUG --- Face: [(197, 196), (196, 184), (184, 185), (185, 198), (198, 197)]
2016-08-07 20:38:21,254 - DEBUG --- Face: [(361, 367), (367, 377), (377, 384), (384, 383), (383, 364), (364, 361)]
2016-08-07 20:38:21,254 - DEBUG --- Face: [(255, 261), (261, 244), (244, 230), (230, 231), (231, 256), (256, 255)]
2016-08-07 20:38:21,254 - DEBUG --- Face: [(283, 284), (284, 285), (285, 277), (277, 275), (275, 286), (286, 283)]
2016-08-07 20:38:21,254 - DEBUG --- Face: [(317, 316), (316, 318), (318, 315), (315, 311), (311, 310), (310, 317)]
2016-08-07 20:38:21,255 - DEBUG --- Face: [(4, 5), (5, 6), (6, 3), (3, 392), (392, 391), (391, 4)]
2016-08-07 20:38:21,255 - DEBUG --- Face: [(181, 182), (182, 193), (193, 191), (191, 192), (192, 187), (187, 181)]
2016-08-07 20:38:21,255 - DEBUG --- Face: [(176, 199), (199, 208), (208, 205), (205, 203), (203, 177), (177, 176)]
2016-08-07 20:38:21,255 - DEBUG --- Face: [(304, 300), (300, 296), (296, 292), (292, 293), (293, 305), (305, 304)]
2016-08-07 20:38:21,255 - DEBUG --- Face: [(4, 54), (54, 40), (40, 31), (31, 32), (32, 5), (5, 4)]
2016-08-07 20:38:21,256 - DEBUG --- Face: [(226, 232), (232, 233), (233, 239), (239, 166), (166, 165), (165, 226)]
2016-08-07 20:38:21,256 - DEBUG --- Face: [(294, 306), (306, 267), (267, 266), (266, 305), (305, 293), (293, 294)]
2016-08-07 20:38:21,256 - DEBUG --- Face: [(55, 54), (54, 4), (4, 391), (391, 368), (368, 370), (370, 55)]
2016-08-07 20:38:21,257 - DEBUG --- Face: [(38, 37), (37, 34), (34, 29), (29, 30), (30, 36), (36, 38)]
2016-08-07 20:38:21,257 - DEBUG --- Face: [(20, 19), (19, 395), (395, 393), (393, 25), (25, 23), (23, 20)]
2016-08-07 20:38:21,257 - DEBUG --- Face: [(308, 307), (307, 311), (311, 315), (315, 319), (319, 320), (320, 308)]
2016-08-07 20:38:21,257 - DEBUG --- Face: [(9, 26), (26, 22), (22, 20), (20, 23), (23, 11), (11, 9)]
2016-08-07 20:38:21,258 - DEBUG --- Face: [(294, 293), (293, 292), (292, 291), (291, 289), (289, 295), (295, 294)]
2016-08-07 20:38:21,258 - DEBUG --- Face: [(295, 288), (288, 283), (283, 286), (286, 306), (306, 294), (294, 295)]
2016-08-07 20:38:21,258 - DEBUG --- Face: [(13, 281), (281, 297), (297, 302), (302, 303), (303, 35), (35, 13)]
2016-08-07 20:38:21,258 - DEBUG --- Face: [(113, 57), (57, 135), (135, 146), (146, 168), (168, 157), (157, 113)]
2016-08-07 20:38:21,258 - DEBUG --- Face: [(144, 116), (116, 107), (107, 109), (109, 143), (143, 140), (140, 139), (139, 144)]
2016-08-07 20:38:21,258 - DEBUG --- Face: [(195, 194), (194, 191), (191, 193), (193, 132), (132, 131), (131, 171), (171, 195)]
2016-08-07 20:38:21,259 - DEBUG --- Face: [(363, 266), (266, 267), (267, 351), (351, 350), (350, 124), (124, 341), (341, 363)]
2016-08-07 20:38:21,259 - DEBUG --- Face: [(373, 329), (329, 327), (327, 326), (326, 112), (112, 223), (223, 46), (46, 373)]
2016-08-07 20:38:21,259 - DEBUG --- Face: [(388, 386), (386, 384), (384, 377), (377, 360), (360, 362), (362, 387), (387, 388)]
2016-08-07 20:38:21,259 - DEBUG --- Face: [(55, 370), (370, 157), (157, 168), (168, 312), (312, 323), (323, 51), (51, 55)]
2016-08-07 20:38:21,259 - DEBUG --- Face: [(249, 247), (247, 248), (248, 245), (245, 237), (237, 236), (236, 243), (243, 249)]
2016-08-07 20:38:21,260 - DEBUG --- Face: [(56, 62), (62, 258), (258, 256), (256, 231), (231, 52), (52, 53), (53, 56)]
2016-08-07 20:38:21,260 - DEBUG --- Face: [(131, 128), (128, 159), (159, 160), (160, 169), (169, 170), (170, 171), (171, 131)]
2016-08-07 20:38:21,260 - DEBUG --- Face: [(85, 81), (81, 88), (88, 87), (87, 86), (86, 66), (66, 67), (67, 85)]
2016-08-07 20:38:21,260 - DEBUG --- Face: [(10, 8), (8, 16), (16, 19), (19, 20), (20, 22), (22, 21), (21, 10)]
2016-08-07 20:38:21,260 - DEBUG --- Face: [(174, 196), (196, 197), (197, 202), (202, 200), (200, 199), (199, 176), (176, 174)]
2016-08-07 20:38:21,261 - DEBUG --- Face: [(103, 102), (102, 98), (98, 99), (99, 100), (100, 95), (95, 92), (92, 103)]
2016-08-07 20:38:21,261 - DEBUG --- Face: [(291, 278), (278, 276), (276, 285), (285, 284), (284, 287), (287, 289), (289, 291)]
2016-08-07 20:38:21,261 - DEBUG --- Face: [(320, 319), (319, 318), (318, 316), (316, 356), (356, 353), (353, 321), (321, 320)]
2016-08-07 20:38:21,261 - DEBUG --- Face: [(299, 297), (297, 281), (281, 280), (280, 296), (296, 300), (300, 298), (298, 299)]
2016-08-07 20:38:21,261 - DEBUG --- Face: [(232, 229), (229, 228), (228, 236), (236, 237), (237, 238), (238, 234), (234, 233), (233, 232)]
2016-08-07 20:38:21,262 - DEBUG --- Face: [(332, 333), (333, 334), (334, 246), (246, 135), (135, 57), (57, 68), (68, 331), (331, 332)]
2016-08-07 20:38:21,262 - DEBUG --- Face: [(61, 60), (60, 93), (93, 104), (104, 99), (99, 98), (98, 106), (106, 105), (105, 61)]
2016-08-07 20:38:21,262 - DEBUG --- Face: [(241, 250), (250, 251), (251, 248), (248, 247), (247, 253), (253, 252), (252, 242), (242, 241)]
2016-08-07 20:38:21,262 - DEBUG --- Face: [(28, 27), (27, 380), (380, 379), (379, 395), (395, 19), (19, 16), (16, 17), (17, 28)]
2016-08-07 20:38:21,262 - DEBUG --- Face: [(213, 137), (137, 136), (136, 161), (161, 162), (162, 209), (209, 210), (210, 211), (211, 213)]
2016-08-07 20:38:21,263 - DEBUG --- Face: [(40, 42), (42, 41), (41, 43), (43, 39), (39, 36), (36, 30), (30, 31), (31, 40)]
2016-08-07 20:38:21,263 - DEBUG --- Face: [(313, 310), (310, 311), (311, 307), (307, 282), (282, 269), (269, 272), (272, 314), (314, 313)]
2016-08-07 20:38:21,263 - DEBUG --- Face: [(76, 78), (78, 77), (77, 73), (73, 65), (65, 64), (64, 74), (74, 75), (75, 76)]
2016-08-07 20:38:21,263 - DEBUG --- Face: [(103, 92), (92, 97), (97, 215), (215, 163), (163, 156), (156, 158), (158, 214), (214, 103)]
2016-08-07 20:38:21,263 - DEBUG --- Face: [(32, 31), (31, 30), (30, 29), (29, 381), (381, 380), (380, 27), (27, 33), (33, 32)]
2016-08-07 20:38:21,264 - DEBUG --- Face: [(242, 210), (210, 209), (209, 240), (240, 239), (239, 233), (233, 234), (234, 241), (241, 242)]
2016-08-07 20:38:21,264 - DEBUG --- Face: [(114, 125), (125, 123), (123, 126), (126, 122), (122, 121), (121, 120), (120, 115), (115, 114)]
2016-08-07 20:38:21,264 - DEBUG --- Face: [(173, 181), (181, 187), (187, 186), (186, 188), (188, 189), (189, 170), (170, 169), (169, 173)]
2016-08-07 20:38:21,264 - DEBUG --- Face: [(98, 102), (102, 141), (141, 142), (142, 139), (139, 140), (140, 110), (110, 108), (108, 106), (106, 98)]
2016-08-07 20:38:21,264 - DEBUG --- Face: [(299, 298), (298, 304), (304, 305), (305, 266), (266, 363), (363, 24), (24, 303), (303, 302), (302, 299)]
2016-08-07 20:38:21,265 - DEBUG --- Face: [(164, 220), (220, 218), (218, 217), (217, 222), (222, 221), (221, 225), (225, 226), (226, 165), (165, 164)]
2016-08-07 20:38:21,265 - DEBUG --- Face: [(148, 147), (147, 145), (145, 142), (142, 141), (141, 152), (152, 150), (150, 151), (151, 149), (149, 148)]
2016-08-07 20:38:21,265 - DEBUG --- Face: [(181, 173), (173, 172), (172, 185), (185, 184), (184, 134), (134, 130), (130, 183), (183, 182), (182, 181)]
2016-08-07 20:38:21,265 - DEBUG --- Face: [(113, 352), (352, 341), (341, 124), (124, 90), (90, 101), (101, 79), (79, 68), (68, 57), (57, 113)]
2016-08-07 20:38:21,265 - DEBUG --- Face: [(56, 58), (58, 49), (49, 47), (47, 60), (60, 61), (61, 59), (59, 63), (63, 62), (62, 56)]
2016-08-07 20:38:21,266 - DEBUG --- Face: [(270, 271), (271, 2), (2, 0), (0, 1), (1, 273), (273, 274), (274, 272), (272, 269), (269, 270)]
2016-08-07 20:38:21,266 - DEBUG --- Face: [(59, 61), (61, 105), (105, 108), (108, 110), (110, 111), (111, 109), (109, 107), (107, 70), (70, 59)]
2016-08-07 20:38:21,266 - DEBUG --- Face: [(394, 393), (393, 395), (395, 379), (379, 378), (378, 369), (369, 368), (368, 391), (391, 392), (392, 394)]
2016-08-07 20:38:21,266 - DEBUG --- Face: [(364, 362), (362, 360), (360, 365), (365, 359), (359, 342), (342, 340), (340, 348), (348, 361), (361, 364)]
2016-08-07 20:38:21,266 - DEBUG --- Face: [(72, 80), (80, 73), (73, 77), (77, 138), (138, 137), (137, 213), (213, 259), (259, 71), (71, 72)]
2016-08-07 20:38:21,267 - DEBUG --- Face: [(93, 60), (60, 47), (47, 50), (50, 97), (97, 92), (92, 95), (95, 94), (94, 96), (96, 93)]
2016-08-07 20:38:21,267 - DEBUG --- Face: [(258, 259), (259, 213), (213, 211), (211, 252), (252, 253), (253, 254), (254, 255), (255, 256), (256, 258)]
2016-08-07 20:38:21,267 - DEBUG --- Face: [(273, 330), (330, 112), (112, 326), (326, 317), (317, 310), (310, 313), (313, 328), (328, 274), (274, 273)]
2016-08-07 20:38:21,267 - DEBUG --- Face: [(84, 83), (83, 81), (81, 85), (85, 69), (69, 65), (65, 73), (73, 80), (80, 82), (82, 84)]
2016-08-07 20:38:21,267 - DEBUG --- Face: [(365, 360), (360, 377), (377, 367), (367, 366), (366, 378), (378, 379), (379, 380), (380, 381), (381, 382), (382, 365)]
2016-08-07 20:38:21,268 - DEBUG --- Face: [(18, 7), (7, 14), (14, 265), (265, 6), (6, 5), (5, 32), (32, 33), (33, 264), (264, 263), (263, 18)]
2016-08-07 20:38:21,268 - DEBUG --- Face: [(180, 175), (175, 207), (207, 203), (203, 205), (205, 204), (204, 206), (206, 202), (202, 197), (197, 198), (198, 180)]
2016-08-07 20:38:21,268 - DEBUG --- Face: [(70, 107), (107, 116), (116, 117), (117, 118), (118, 119), (119, 114), (114, 115), (115, 74), (74, 64), (64, 70)]
2016-08-07 20:38:21,268 - DEBUG --- Face: [(307, 308), (308, 309), (309, 354), (354, 351), (351, 267), (267, 306), (306, 286), (286, 275), (275, 282), (282, 307)]
2016-08-07 20:38:21,268 - DEBUG --- Face: [(66, 72), (72, 71), (71, 63), (63, 59), (59, 70), (70, 64), (64, 65), (65, 69), (69, 67), (67, 66)]
2016-08-07 20:38:21,269 - DEBUG --- Face: [(153, 151), (151, 150), (150, 158), (158, 156), (156, 155), (155, 154), (154, 125), (125, 114), (114, 119), (119, 153)]
2016-08-07 20:38:21,269 - DEBUG --- Face: [(371, 324), (324, 325), (325, 358), (358, 356), (356, 316), (316, 317), (317, 326), (326, 327), (327, 375), (375, 371)]
2016-08-07 20:38:21,269 - DEBUG --- Face: [(281, 13), (13, 374), (374, 270), (270, 269), (269, 282), (282, 275), (275, 277), (277, 276), (276, 278), (278, 280), (280, 281)]
2016-08-07 20:38:21,269 - DEBUG --- Face: [(10, 9), (9, 11), (11, 12), (12, 394), (394, 392), (392, 3), (3, 15), (15, 14), (14, 7), (7, 8), (8, 10)]
2016-08-07 20:38:21,269 - DEBUG --- Face: [(164, 165), (165, 166), (166, 167), (167, 162), (162, 161), (161, 160), (160, 159), (159, 155), (155, 156), (156, 163), (163, 164)]
2016-08-07 20:38:21,270 - DEBUG --- Face: [(363, 341), (341, 352), (352, 46), (46, 223), (223, 0), (0, 2), (2, 385), (385, 374), (374, 13), (13, 35), (35, 24), (24, 363)]
2016-08-07 20:38:21,270 - DEBUG --- Face: [(257, 290), (290, 190), (190, 201), (201, 179), (179, 146), (146, 135), (135, 246), (246, 235), (235, 224), (224, 212), (212, 268), (268, 279), (279, 257)]
2016-08-07 20:38:21,270 - DEBUG --- Face: [(336, 337), (337, 268), (268, 212), (212, 335), (335, 331), (331, 68), (68, 79), (79, 339), (339, 338), (338, 340), (340, 342), (342, 343), (343, 336)]
2016-08-07 20:38:21,270 - DEBUG --- Face: [(174, 176), (176, 177), (177, 178), (178, 175), (175, 180), (180, 172), (172, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 174)]
2016-08-07 20:38:21,270 - DEBUG --- Face: [(47, 49), (49, 48), (48, 53), (53, 52), (52, 44), (44, 45), (45, 42), (42, 40), (40, 54), (54, 55), (55, 51), (51, 50), (50, 47)]
2016-08-07 20:38:21,271 - DEBUG --- Face: [(123, 127), (127, 128), (128, 131), (131, 132), (132, 133), (133, 130), (130, 134), (134, 129), (129, 136), (136, 137), (137, 138), (138, 126), (126, 123)]
2016-08-07 20:38:21,271 - DEBUG --- Face: [(43, 44), (44, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 221), (221, 227), (227, 219), (219, 37), (37, 38), (38, 39), (39, 43)]
2016-08-07 20:38:21,271 - DEBUG --- Face: [(338, 347), (347, 101), (101, 90), (90, 350), (350, 351), (351, 354), (354, 355), (355, 353), (353, 356), (356, 358), (358, 357), (357, 349), (349, 348), (348, 340), (340, 338)]
2016-08-07 20:38:21,271 - DEBUG --- Face: [(375, 376), (376, 373), (373, 46), (46, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 369), (369, 366), (366, 367), (367, 361), (361, 348), (348, 349), (349, 372), (372, 371), (371, 375)]
2016-08-07 20:38:21,271 - DEBUG --- Face: [(190, 290), (290, 336), (336, 343), (343, 359), (359, 365), (365, 382), (382, 34), (34, 37), (37, 219), (219, 217), (217, 218), (218, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 323), (323, 190)]
2016-08-07 20:38:21,272 - INFO --- ----------------------
2016-08-07 20:38:21,272 - INFO --- END: Graph information
2016-08-07 20:38:21,272 - INFO --- ----------------------
2016-08-07 20:38:21,272 - INFO --- 
2016-08-07 20:38:21,272 - INFO --- ----------------------
2016-08-07 20:38:21,273 - INFO --- BEGIN: Reduction phase
2016-08-07 20:38:21,273 - INFO --- ----------------------
2016-08-07 20:38:21,273 - INFO --- BEGIN 0: Main loop
2016-08-07 20:38:21,273 - INFO --- BEGIN 0: Search the right edge to remove
2016-08-07 20:38:21,273 - DEBUG --- BEGIN 0: test the 0 edge
2016-08-07 20:38:21,273 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:21,274 - DEBUG --- edge_to_remove: (49, 58)
2016-08-07 20:38:21,274 - DEBUG --- rotated_edge_to_remove: (58, 49)
2016-08-07 20:38:21,274 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:21,274 - DEBUG --- f1: [(49, 58), (58, 48), (48, 49)]
2016-08-07 20:38:21,275 - DEBUG --- f2: [(56, 58), (58, 49), (49, 47), (47, 60), (60, 61), (61, 59), (59, 63), (63, 62), (62, 56)]
2016-08-07 20:38:21,275 - DEBUG --- edge_to_remove_on_f1: (49, 58)
2016-08-07 20:38:21,275 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:21,275 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:21,275 - DEBUG --- Temporary f1_plus_f2: [(49, 47), (47, 60), (60, 61), (61, 59), (59, 63), (63, 62), (62, 56), (56, 58), (58, 48), (48, 49)]
2016-08-07 20:38:21,276 - DEBUG --- f1_plus_f2: [(48, 47), (47, 60), (60, 61), (61, 59), (59, 63), (63, 62), (62, 56), (56, 48)]
2016-08-07 20:38:21,276 - DEBUG --- END: join_faces
2016-08-07 20:38:21,276 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:21,276 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:21,276 - DEBUG --- Edge to remove found :-) (49, 58)
2016-08-07 20:38:21,276 - DEBUG --- f1: [(49, 58), (58, 48), (48, 49)]
2016-08-07 20:38:21,277 - DEBUG --- f2: [(56, 58), (58, 49), (49, 47), (47, 60), (60, 61), (61, 59), (59, 63), (63, 62), (62, 56)]
2016-08-07 20:38:21,277 - DEBUG --- f1_plus_f2_temp: [(48, 47), (47, 60), (60, 61), (61, 59), (59, 63), (63, 62), (62, 56), (56, 48)]
2016-08-07 20:38:21,277 - DEBUG --- END 0: test the 0 edge
2016-08-07 20:38:21,277 - INFO --- END 0: Search the right edge to remove. Found: (49, 58)
2016-08-07 20:38:21,278 - INFO --- BEGIN 0: Remove an F3, F4 or F5
2016-08-07 20:38:21,278 - DEBUG --- vertex_to_join_near_v1_on_the_face: 48
2016-08-07 20:38:21,278 - DEBUG --- vertex_to_join_near_v2_on_the_face: 48
2016-08-07 20:38:21,278 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 47
2016-08-07 20:38:21,278 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 56
2016-08-07 20:38:21,279 - DEBUG --- third_face_to_update: [(47, 49), (49, 48), (48, 53), (53, 52), (52, 44), (44, 45), (45, 42), (42, 40), (40, 54), (54, 55), (55, 51), (51, 50), (50, 47)]
2016-08-07 20:38:21,279 - DEBUG --- fourth_face_to_update: [(53, 48), (48, 58), (58, 56), (56, 53)]
2016-08-07 20:38:21,279 - INFO --- ariadne_step: [3, 49, 58, 48, 48, 47, 56]
2016-08-07 20:38:21,279 - INFO --- END 0: Remove an F3, F4 or F5
2016-08-07 20:38:21,280 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:21,355 - DEBUG --- END: check_regularity
2016-08-07 20:38:21,355 - INFO --- END 0: Main loop
2016-08-07 20:38:21,355 - INFO --- 
2016-08-07 20:38:21,356 - INFO --- BEGIN 1: Main loop
2016-08-07 20:38:21,356 - INFO --- BEGIN 1: Search the right edge to remove
2016-08-07 20:38:21,356 - DEBUG --- BEGIN 1: test the 0 edge
2016-08-07 20:38:21,356 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:21,356 - DEBUG --- edge_to_remove: (108, 105)
2016-08-07 20:38:21,357 - DEBUG --- rotated_edge_to_remove: (105, 108)
2016-08-07 20:38:21,357 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:21,357 - DEBUG --- f1: [(108, 105), (105, 106), (106, 108)]
2016-08-07 20:38:21,357 - DEBUG --- f2: [(59, 61), (61, 105), (105, 108), (108, 110), (110, 111), (111, 109), (109, 107), (107, 70), (70, 59)]
2016-08-07 20:38:21,358 - DEBUG --- edge_to_remove_on_f1: (108, 105)
2016-08-07 20:38:21,358 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:21,358 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:21,358 - DEBUG --- Temporary f1_plus_f2: [(108, 110), (110, 111), (111, 109), (109, 107), (107, 70), (70, 59), (59, 61), (61, 105), (105, 106), (106, 108)]
2016-08-07 20:38:21,358 - DEBUG --- f1_plus_f2: [(106, 110), (110, 111), (111, 109), (109, 107), (107, 70), (70, 59), (59, 61), (61, 106)]
2016-08-07 20:38:21,359 - DEBUG --- END: join_faces
2016-08-07 20:38:21,359 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:21,359 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:21,359 - DEBUG --- Edge to remove found :-) (108, 105)
2016-08-07 20:38:21,359 - DEBUG --- f1: [(108, 105), (105, 106), (106, 108)]
2016-08-07 20:38:21,360 - DEBUG --- f2: [(59, 61), (61, 105), (105, 108), (108, 110), (110, 111), (111, 109), (109, 107), (107, 70), (70, 59)]
2016-08-07 20:38:21,360 - DEBUG --- f1_plus_f2_temp: [(106, 110), (110, 111), (111, 109), (109, 107), (107, 70), (70, 59), (59, 61), (61, 106)]
2016-08-07 20:38:21,360 - DEBUG --- END 1: test the 0 edge
2016-08-07 20:38:21,360 - INFO --- END 1: Search the right edge to remove. Found: (108, 105)
2016-08-07 20:38:21,360 - INFO --- BEGIN 1: Remove an F3, F4 or F5
2016-08-07 20:38:21,361 - DEBUG --- vertex_to_join_near_v1_on_the_face: 106
2016-08-07 20:38:21,361 - DEBUG --- vertex_to_join_near_v2_on_the_face: 106
2016-08-07 20:38:21,361 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 110
2016-08-07 20:38:21,361 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 61
2016-08-07 20:38:21,362 - DEBUG --- third_face_to_update: [(98, 102), (102, 141), (141, 142), (142, 139), (139, 140), (140, 110), (110, 108), (108, 106), (106, 98)]
2016-08-07 20:38:21,362 - DEBUG --- fourth_face_to_update: [(61, 60), (60, 93), (93, 104), (104, 99), (99, 98), (98, 106), (106, 105), (105, 61)]
2016-08-07 20:38:21,362 - INFO --- ariadne_step: [3, 108, 105, 106, 106, 110, 61]
2016-08-07 20:38:21,362 - INFO --- END 1: Remove an F3, F4 or F5
2016-08-07 20:38:21,363 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:21,437 - DEBUG --- END: check_regularity
2016-08-07 20:38:21,437 - INFO --- END 1: Main loop
2016-08-07 20:38:21,438 - INFO --- 
2016-08-07 20:38:21,438 - INFO --- BEGIN 2: Main loop
2016-08-07 20:38:21,438 - INFO --- BEGIN 2: Search the right edge to remove
2016-08-07 20:38:21,438 - DEBUG --- BEGIN 2: test the 0 edge
2016-08-07 20:38:21,438 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:21,439 - DEBUG --- edge_to_remove: (100, 94)
2016-08-07 20:38:21,439 - DEBUG --- rotated_edge_to_remove: (94, 100)
2016-08-07 20:38:21,439 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:21,439 - DEBUG --- f1: [(100, 94), (94, 95), (95, 100)]
2016-08-07 20:38:21,439 - DEBUG --- f2: [(104, 96), (96, 94), (94, 100), (100, 99), (99, 104)]
2016-08-07 20:38:21,440 - DEBUG --- edge_to_remove_on_f1: (100, 94)
2016-08-07 20:38:21,440 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:21,440 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:21,440 - DEBUG --- Temporary f1_plus_f2: [(100, 99), (99, 104), (104, 96), (96, 94), (94, 95), (95, 100)]
2016-08-07 20:38:21,440 - DEBUG --- f1_plus_f2: [(95, 99), (99, 104), (104, 96), (96, 95)]
2016-08-07 20:38:21,441 - DEBUG --- END: join_faces
2016-08-07 20:38:21,441 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:21,441 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:21,441 - DEBUG --- Edge to remove found :-) (100, 94)
2016-08-07 20:38:21,442 - DEBUG --- f1: [(100, 94), (94, 95), (95, 100)]
2016-08-07 20:38:21,442 - DEBUG --- f2: [(104, 96), (96, 94), (94, 100), (100, 99), (99, 104)]
2016-08-07 20:38:21,442 - DEBUG --- f1_plus_f2_temp: [(95, 99), (99, 104), (104, 96), (96, 95)]
2016-08-07 20:38:21,442 - DEBUG --- END 2: test the 0 edge
2016-08-07 20:38:21,442 - INFO --- END 2: Search the right edge to remove. Found: (100, 94)
2016-08-07 20:38:21,443 - INFO --- BEGIN 2: Remove an F3, F4 or F5
2016-08-07 20:38:21,443 - DEBUG --- vertex_to_join_near_v1_on_the_face: 95
2016-08-07 20:38:21,443 - DEBUG --- vertex_to_join_near_v2_on_the_face: 95
2016-08-07 20:38:21,443 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 99
2016-08-07 20:38:21,443 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 96
2016-08-07 20:38:21,444 - DEBUG --- third_face_to_update: [(103, 102), (102, 98), (98, 99), (99, 100), (100, 95), (95, 92), (92, 103)]
2016-08-07 20:38:21,444 - DEBUG --- fourth_face_to_update: [(93, 60), (60, 47), (47, 50), (50, 97), (97, 92), (92, 95), (95, 94), (94, 96), (96, 93)]
2016-08-07 20:38:21,445 - INFO --- ariadne_step: [3, 100, 94, 95, 95, 99, 96]
2016-08-07 20:38:21,445 - INFO --- END 2: Remove an F3, F4 or F5
2016-08-07 20:38:21,445 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:21,517 - DEBUG --- END: check_regularity
2016-08-07 20:38:21,518 - INFO --- END 2: Main loop
2016-08-07 20:38:21,518 - INFO --- 
2016-08-07 20:38:21,518 - INFO --- BEGIN 3: Main loop
2016-08-07 20:38:21,519 - INFO --- BEGIN 3: Search the right edge to remove
2016-08-07 20:38:21,519 - DEBUG --- BEGIN 3: test the 0 edge
2016-08-07 20:38:21,519 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:21,519 - DEBUG --- edge_to_remove: (330, 273)
2016-08-07 20:38:21,520 - DEBUG --- rotated_edge_to_remove: (273, 330)
2016-08-07 20:38:21,520 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:21,520 - DEBUG --- f1: [(330, 273), (273, 1), (1, 330)]
2016-08-07 20:38:21,520 - DEBUG --- f2: [(273, 330), (330, 112), (112, 326), (326, 317), (317, 310), (310, 313), (313, 328), (328, 274), (274, 273)]
2016-08-07 20:38:21,521 - DEBUG --- edge_to_remove_on_f1: (330, 273)
2016-08-07 20:38:21,521 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:21,521 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:21,521 - DEBUG --- Temporary f1_plus_f2: [(330, 112), (112, 326), (326, 317), (317, 310), (310, 313), (313, 328), (328, 274), (274, 273), (273, 1), (1, 330)]
2016-08-07 20:38:21,521 - DEBUG --- f1_plus_f2: [(1, 112), (112, 326), (326, 317), (317, 310), (310, 313), (313, 328), (328, 274), (274, 1)]
2016-08-07 20:38:21,522 - DEBUG --- END: join_faces
2016-08-07 20:38:21,522 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:21,522 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:21,522 - DEBUG --- Edge to remove found :-) (330, 273)
2016-08-07 20:38:21,522 - DEBUG --- f1: [(330, 273), (273, 1), (1, 330)]
2016-08-07 20:38:21,523 - DEBUG --- f2: [(273, 330), (330, 112), (112, 326), (326, 317), (317, 310), (310, 313), (313, 328), (328, 274), (274, 273)]
2016-08-07 20:38:21,523 - DEBUG --- f1_plus_f2_temp: [(1, 112), (112, 326), (326, 317), (317, 310), (310, 313), (313, 328), (328, 274), (274, 1)]
2016-08-07 20:38:21,523 - DEBUG --- END 3: test the 0 edge
2016-08-07 20:38:21,523 - INFO --- END 3: Search the right edge to remove. Found: (330, 273)
2016-08-07 20:38:21,523 - INFO --- BEGIN 3: Remove an F3, F4 or F5
2016-08-07 20:38:21,524 - DEBUG --- vertex_to_join_near_v1_on_the_face: 1
2016-08-07 20:38:21,524 - DEBUG --- vertex_to_join_near_v2_on_the_face: 1
2016-08-07 20:38:21,524 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 112
2016-08-07 20:38:21,524 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 274
2016-08-07 20:38:21,525 - DEBUG --- third_face_to_update: [(112, 330), (330, 1), (1, 0), (0, 223), (223, 112)]
2016-08-07 20:38:21,525 - DEBUG --- fourth_face_to_update: [(270, 271), (271, 2), (2, 0), (0, 1), (1, 273), (273, 274), (274, 272), (272, 269), (269, 270)]
2016-08-07 20:38:21,525 - INFO --- ariadne_step: [3, 330, 273, 1, 1, 112, 274]
2016-08-07 20:38:21,525 - INFO --- END 3: Remove an F3, F4 or F5
2016-08-07 20:38:21,526 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:21,597 - DEBUG --- END: check_regularity
2016-08-07 20:38:21,598 - INFO --- END 3: Main loop
2016-08-07 20:38:21,598 - INFO --- 
2016-08-07 20:38:21,598 - INFO --- BEGIN 4: Main loop
2016-08-07 20:38:21,599 - INFO --- BEGIN 4: Search the right edge to remove
2016-08-07 20:38:21,599 - DEBUG --- BEGIN 4: test the 0 edge
2016-08-07 20:38:21,599 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:21,599 - DEBUG --- edge_to_remove: (371, 372)
2016-08-07 20:38:21,600 - DEBUG --- rotated_edge_to_remove: (372, 371)
2016-08-07 20:38:21,600 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:21,600 - DEBUG --- f1: [(371, 372), (372, 324), (324, 371)]
2016-08-07 20:38:21,600 - DEBUG --- f2: [(375, 376), (376, 373), (373, 46), (46, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 369), (369, 366), (366, 367), (367, 361), (361, 348), (348, 349), (349, 372), (372, 371), (371, 375)]
2016-08-07 20:38:21,600 - DEBUG --- edge_to_remove_on_f1: (371, 372)
2016-08-07 20:38:21,601 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:21,601 - DEBUG --- index_of_edge_to_remove_on_f2: 15
2016-08-07 20:38:21,601 - DEBUG --- Temporary f1_plus_f2: [(371, 375), (375, 376), (376, 373), (373, 46), (46, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 369), (369, 366), (366, 367), (367, 361), (361, 348), (348, 349), (349, 372), (372, 324), (324, 371)]
2016-08-07 20:38:21,601 - DEBUG --- f1_plus_f2: [(324, 375), (375, 376), (376, 373), (373, 46), (46, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 369), (369, 366), (366, 367), (367, 361), (361, 348), (348, 349), (349, 324)]
2016-08-07 20:38:21,601 - DEBUG --- END: join_faces
2016-08-07 20:38:21,602 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:21,602 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:21,602 - DEBUG --- Edge to remove found :-) (371, 372)
2016-08-07 20:38:21,602 - DEBUG --- f1: [(371, 372), (372, 324), (324, 371)]
2016-08-07 20:38:21,602 - DEBUG --- f2: [(375, 376), (376, 373), (373, 46), (46, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 369), (369, 366), (366, 367), (367, 361), (361, 348), (348, 349), (349, 372), (372, 371), (371, 375)]
2016-08-07 20:38:21,603 - DEBUG --- f1_plus_f2_temp: [(324, 375), (375, 376), (376, 373), (373, 46), (46, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 369), (369, 366), (366, 367), (367, 361), (361, 348), (348, 349), (349, 324)]
2016-08-07 20:38:21,603 - DEBUG --- END 4: test the 0 edge
2016-08-07 20:38:21,603 - INFO --- END 4: Search the right edge to remove. Found: (371, 372)
2016-08-07 20:38:21,603 - INFO --- BEGIN 4: Remove an F3, F4 or F5
2016-08-07 20:38:21,604 - DEBUG --- vertex_to_join_near_v1_on_the_face: 324
2016-08-07 20:38:21,604 - DEBUG --- vertex_to_join_near_v2_on_the_face: 324
2016-08-07 20:38:21,604 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 375
2016-08-07 20:38:21,604 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 349
2016-08-07 20:38:21,605 - DEBUG --- third_face_to_update: [(371, 324), (324, 325), (325, 358), (358, 356), (356, 316), (316, 317), (317, 326), (326, 327), (327, 375), (375, 371)]
2016-08-07 20:38:21,605 - DEBUG --- fourth_face_to_update: [(372, 349), (349, 357), (357, 325), (325, 324), (324, 372)]
2016-08-07 20:38:21,605 - INFO --- ariadne_step: [3, 371, 372, 324, 324, 375, 349]
2016-08-07 20:38:21,605 - INFO --- END 4: Remove an F3, F4 or F5
2016-08-07 20:38:21,605 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:21,676 - DEBUG --- END: check_regularity
2016-08-07 20:38:21,676 - INFO --- END 4: Main loop
2016-08-07 20:38:21,677 - INFO --- 
2016-08-07 20:38:21,677 - INFO --- BEGIN 5: Main loop
2016-08-07 20:38:21,677 - INFO --- BEGIN 5: Search the right edge to remove
2016-08-07 20:38:21,677 - DEBUG --- BEGIN 5: test the 0 edge
2016-08-07 20:38:21,677 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:21,678 - DEBUG --- edge_to_remove: (175, 178)
2016-08-07 20:38:21,678 - DEBUG --- rotated_edge_to_remove: (178, 175)
2016-08-07 20:38:21,678 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:21,678 - DEBUG --- f1: [(175, 178), (178, 207), (207, 175)]
2016-08-07 20:38:21,679 - DEBUG --- f2: [(174, 176), (176, 177), (177, 178), (178, 175), (175, 180), (180, 172), (172, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 174)]
2016-08-07 20:38:21,679 - DEBUG --- edge_to_remove_on_f1: (175, 178)
2016-08-07 20:38:21,679 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:21,679 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:21,680 - DEBUG --- Temporary f1_plus_f2: [(175, 180), (180, 172), (172, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 174), (174, 176), (176, 177), (177, 178), (178, 207), (207, 175)]
2016-08-07 20:38:21,680 - DEBUG --- f1_plus_f2: [(207, 180), (180, 172), (172, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 174), (174, 176), (176, 177), (177, 207)]
2016-08-07 20:38:21,680 - DEBUG --- END: join_faces
2016-08-07 20:38:21,680 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:21,680 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:21,681 - DEBUG --- Edge to remove found :-) (175, 178)
2016-08-07 20:38:21,681 - DEBUG --- f1: [(175, 178), (178, 207), (207, 175)]
2016-08-07 20:38:21,681 - DEBUG --- f2: [(174, 176), (176, 177), (177, 178), (178, 175), (175, 180), (180, 172), (172, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 174)]
2016-08-07 20:38:21,681 - DEBUG --- f1_plus_f2_temp: [(207, 180), (180, 172), (172, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 174), (174, 176), (176, 177), (177, 207)]
2016-08-07 20:38:21,682 - DEBUG --- END 5: test the 0 edge
2016-08-07 20:38:21,682 - INFO --- END 5: Search the right edge to remove. Found: (175, 178)
2016-08-07 20:38:21,682 - INFO --- BEGIN 5: Remove an F3, F4 or F5
2016-08-07 20:38:21,682 - DEBUG --- vertex_to_join_near_v1_on_the_face: 207
2016-08-07 20:38:21,683 - DEBUG --- vertex_to_join_near_v2_on_the_face: 207
2016-08-07 20:38:21,683 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 180
2016-08-07 20:38:21,683 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 177
2016-08-07 20:38:21,684 - DEBUG --- third_face_to_update: [(180, 175), (175, 207), (207, 203), (203, 205), (205, 204), (204, 206), (206, 202), (202, 197), (197, 198), (198, 180)]
2016-08-07 20:38:21,684 - DEBUG --- fourth_face_to_update: [(203, 207), (207, 178), (178, 177), (177, 203)]
2016-08-07 20:38:21,684 - INFO --- ariadne_step: [3, 175, 178, 207, 207, 180, 177]
2016-08-07 20:38:21,684 - INFO --- END 5: Remove an F3, F4 or F5
2016-08-07 20:38:21,685 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:21,754 - DEBUG --- END: check_regularity
2016-08-07 20:38:21,755 - INFO --- END 5: Main loop
2016-08-07 20:38:21,755 - INFO --- 
2016-08-07 20:38:21,755 - INFO --- BEGIN 6: Main loop
2016-08-07 20:38:21,755 - INFO --- BEGIN 6: Search the right edge to remove
2016-08-07 20:38:21,756 - DEBUG --- BEGIN 6: test the 0 edge
2016-08-07 20:38:21,756 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:21,756 - DEBUG --- edge_to_remove: (192, 186)
2016-08-07 20:38:21,756 - DEBUG --- rotated_edge_to_remove: (186, 192)
2016-08-07 20:38:21,756 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:21,757 - DEBUG --- f1: [(192, 186), (186, 187), (187, 192)]
2016-08-07 20:38:21,757 - DEBUG --- f2: [(192, 191), (191, 194), (194, 188), (188, 186), (186, 192)]
2016-08-07 20:38:21,757 - DEBUG --- edge_to_remove_on_f1: (192, 186)
2016-08-07 20:38:21,757 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:21,757 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:21,758 - DEBUG --- Temporary f1_plus_f2: [(192, 191), (191, 194), (194, 188), (188, 186), (186, 187), (187, 192)]
2016-08-07 20:38:21,758 - DEBUG --- f1_plus_f2: [(187, 191), (191, 194), (194, 188), (188, 187)]
2016-08-07 20:38:21,758 - DEBUG --- END: join_faces
2016-08-07 20:38:21,758 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:21,759 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:21,759 - DEBUG --- Edge to remove found :-) (192, 186)
2016-08-07 20:38:21,759 - DEBUG --- f1: [(192, 186), (186, 187), (187, 192)]
2016-08-07 20:38:21,759 - DEBUG --- f2: [(192, 191), (191, 194), (194, 188), (188, 186), (186, 192)]
2016-08-07 20:38:21,759 - DEBUG --- f1_plus_f2_temp: [(187, 191), (191, 194), (194, 188), (188, 187)]
2016-08-07 20:38:21,760 - DEBUG --- END 6: test the 0 edge
2016-08-07 20:38:21,760 - INFO --- END 6: Search the right edge to remove. Found: (192, 186)
2016-08-07 20:38:21,760 - INFO --- BEGIN 6: Remove an F3, F4 or F5
2016-08-07 20:38:21,760 - DEBUG --- vertex_to_join_near_v1_on_the_face: 187
2016-08-07 20:38:21,760 - DEBUG --- vertex_to_join_near_v2_on_the_face: 187
2016-08-07 20:38:21,761 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 191
2016-08-07 20:38:21,761 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 188
2016-08-07 20:38:21,761 - DEBUG --- third_face_to_update: [(181, 182), (182, 193), (193, 191), (191, 192), (192, 187), (187, 181)]
2016-08-07 20:38:21,761 - DEBUG --- fourth_face_to_update: [(173, 181), (181, 187), (187, 186), (186, 188), (188, 189), (189, 170), (170, 169), (169, 173)]
2016-08-07 20:38:21,762 - INFO --- ariadne_step: [3, 192, 186, 187, 187, 191, 188]
2016-08-07 20:38:21,762 - INFO --- END 6: Remove an F3, F4 or F5
2016-08-07 20:38:21,762 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:21,831 - DEBUG --- END: check_regularity
2016-08-07 20:38:21,832 - INFO --- END 6: Main loop
2016-08-07 20:38:21,832 - INFO --- 
2016-08-07 20:38:21,833 - INFO --- BEGIN 7: Main loop
2016-08-07 20:38:21,833 - INFO --- BEGIN 7: Search the right edge to remove
2016-08-07 20:38:21,833 - DEBUG --- BEGIN 7: test the 0 edge
2016-08-07 20:38:21,833 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:21,834 - DEBUG --- edge_to_remove: (271, 385)
2016-08-07 20:38:21,834 - DEBUG --- rotated_edge_to_remove: (385, 271)
2016-08-07 20:38:21,834 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:21,834 - DEBUG --- f1: [(271, 385), (385, 2), (2, 271)]
2016-08-07 20:38:21,834 - DEBUG --- f2: [(385, 271), (271, 270), (270, 374), (374, 385)]
2016-08-07 20:38:21,835 - DEBUG --- edge_to_remove_on_f1: (271, 385)
2016-08-07 20:38:21,835 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:21,835 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:21,835 - DEBUG --- Temporary f1_plus_f2: [(271, 270), (270, 374), (374, 385), (385, 2), (2, 271)]
2016-08-07 20:38:21,836 - DEBUG --- f1_plus_f2: [(2, 270), (270, 374), (374, 2)]
2016-08-07 20:38:21,836 - DEBUG --- END: join_faces
2016-08-07 20:38:21,836 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:21,836 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:21,837 - DEBUG --- Edge to remove found :-) (271, 385)
2016-08-07 20:38:21,837 - DEBUG --- f1: [(271, 385), (385, 2), (2, 271)]
2016-08-07 20:38:21,837 - DEBUG --- f2: [(385, 271), (271, 270), (270, 374), (374, 385)]
2016-08-07 20:38:21,837 - DEBUG --- f1_plus_f2_temp: [(2, 270), (270, 374), (374, 2)]
2016-08-07 20:38:21,837 - DEBUG --- END 7: test the 0 edge
2016-08-07 20:38:21,838 - INFO --- END 7: Search the right edge to remove. Found: (271, 385)
2016-08-07 20:38:21,838 - INFO --- BEGIN 7: Remove an F3, F4 or F5
2016-08-07 20:38:21,838 - DEBUG --- vertex_to_join_near_v1_on_the_face: 2
2016-08-07 20:38:21,838 - DEBUG --- vertex_to_join_near_v2_on_the_face: 2
2016-08-07 20:38:21,838 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 270
2016-08-07 20:38:21,839 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 374
2016-08-07 20:38:21,839 - DEBUG --- third_face_to_update: [(270, 271), (271, 2), (2, 0), (0, 1), (1, 274), (274, 272), (272, 269), (269, 270)]
2016-08-07 20:38:21,839 - DEBUG --- fourth_face_to_update: [(363, 341), (341, 352), (352, 46), (46, 223), (223, 0), (0, 2), (2, 385), (385, 374), (374, 13), (13, 35), (35, 24), (24, 363)]
2016-08-07 20:38:21,840 - INFO --- ariadne_step: [3, 271, 385, 2, 2, 270, 374]
2016-08-07 20:38:21,840 - INFO --- END 7: Remove an F3, F4 or F5
2016-08-07 20:38:21,840 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:21,909 - DEBUG --- END: check_regularity
2016-08-07 20:38:21,909 - INFO --- END 7: Main loop
2016-08-07 20:38:21,910 - INFO --- 
2016-08-07 20:38:21,910 - INFO --- BEGIN 8: Main loop
2016-08-07 20:38:21,910 - INFO --- BEGIN 8: Search the right edge to remove
2016-08-07 20:38:21,910 - DEBUG --- BEGIN 8: test the 0 edge
2016-08-07 20:38:21,910 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:21,911 - DEBUG --- edge_to_remove: (96, 104)
2016-08-07 20:38:21,911 - DEBUG --- rotated_edge_to_remove: (104, 96)
2016-08-07 20:38:21,911 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:21,911 - DEBUG --- f1: [(96, 104), (104, 93), (93, 96)]
2016-08-07 20:38:21,912 - DEBUG --- f2: [(95, 99), (99, 104), (104, 96), (96, 95)]
2016-08-07 20:38:21,912 - DEBUG --- edge_to_remove_on_f1: (96, 104)
2016-08-07 20:38:21,912 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:21,912 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:21,912 - DEBUG --- Temporary f1_plus_f2: [(96, 95), (95, 99), (99, 104), (104, 93), (93, 96)]
2016-08-07 20:38:21,913 - DEBUG --- f1_plus_f2: [(93, 95), (95, 99), (99, 93)]
2016-08-07 20:38:21,913 - DEBUG --- END: join_faces
2016-08-07 20:38:21,913 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:21,913 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:21,913 - DEBUG --- Edge to remove found :-) (96, 104)
2016-08-07 20:38:21,914 - DEBUG --- f1: [(96, 104), (104, 93), (93, 96)]
2016-08-07 20:38:21,914 - DEBUG --- f2: [(95, 99), (99, 104), (104, 96), (96, 95)]
2016-08-07 20:38:21,914 - DEBUG --- f1_plus_f2_temp: [(93, 95), (95, 99), (99, 93)]
2016-08-07 20:38:21,914 - DEBUG --- END 8: test the 0 edge
2016-08-07 20:38:21,915 - INFO --- END 8: Search the right edge to remove. Found: (96, 104)
2016-08-07 20:38:21,915 - INFO --- BEGIN 8: Remove an F3, F4 or F5
2016-08-07 20:38:21,915 - DEBUG --- vertex_to_join_near_v1_on_the_face: 93
2016-08-07 20:38:21,915 - DEBUG --- vertex_to_join_near_v2_on_the_face: 93
2016-08-07 20:38:21,915 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 95
2016-08-07 20:38:21,916 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 99
2016-08-07 20:38:21,916 - DEBUG --- third_face_to_update: [(93, 60), (60, 47), (47, 50), (50, 97), (97, 92), (92, 95), (95, 96), (96, 93)]
2016-08-07 20:38:21,916 - DEBUG --- fourth_face_to_update: [(61, 60), (60, 93), (93, 104), (104, 99), (99, 98), (98, 106), (106, 61)]
2016-08-07 20:38:21,916 - INFO --- ariadne_step: [3, 96, 104, 93, 93, 95, 99]
2016-08-07 20:38:21,917 - INFO --- END 8: Remove an F3, F4 or F5
2016-08-07 20:38:21,917 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:21,986 - DEBUG --- END: check_regularity
2016-08-07 20:38:21,986 - INFO --- END 8: Main loop
2016-08-07 20:38:21,986 - INFO --- 
2016-08-07 20:38:21,987 - INFO --- BEGIN 9: Main loop
2016-08-07 20:38:21,987 - INFO --- BEGIN 9: Search the right edge to remove
2016-08-07 20:38:21,987 - DEBUG --- BEGIN 9: test the 0 edge
2016-08-07 20:38:21,987 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:21,988 - DEBUG --- edge_to_remove: (328, 313)
2016-08-07 20:38:21,988 - DEBUG --- rotated_edge_to_remove: (313, 328)
2016-08-07 20:38:21,988 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:21,988 - DEBUG --- f1: [(328, 313), (313, 314), (314, 328)]
2016-08-07 20:38:21,988 - DEBUG --- f2: [(1, 112), (112, 326), (326, 317), (317, 310), (310, 313), (313, 328), (328, 274), (274, 1)]
2016-08-07 20:38:21,989 - DEBUG --- edge_to_remove_on_f1: (328, 313)
2016-08-07 20:38:21,989 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:21,989 - DEBUG --- index_of_edge_to_remove_on_f2: 5
2016-08-07 20:38:21,989 - DEBUG --- Temporary f1_plus_f2: [(328, 274), (274, 1), (1, 112), (112, 326), (326, 317), (317, 310), (310, 313), (313, 314), (314, 328)]
2016-08-07 20:38:21,989 - DEBUG --- f1_plus_f2: [(314, 274), (274, 1), (1, 112), (112, 326), (326, 317), (317, 310), (310, 314)]
2016-08-07 20:38:21,990 - DEBUG --- END: join_faces
2016-08-07 20:38:21,990 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:21,990 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:21,990 - DEBUG --- Edge to remove found :-) (328, 313)
2016-08-07 20:38:21,991 - DEBUG --- f1: [(328, 313), (313, 314), (314, 328)]
2016-08-07 20:38:21,991 - DEBUG --- f2: [(1, 112), (112, 326), (326, 317), (317, 310), (310, 313), (313, 328), (328, 274), (274, 1)]
2016-08-07 20:38:21,991 - DEBUG --- f1_plus_f2_temp: [(314, 274), (274, 1), (1, 112), (112, 326), (326, 317), (317, 310), (310, 314)]
2016-08-07 20:38:21,991 - DEBUG --- END 9: test the 0 edge
2016-08-07 20:38:21,991 - INFO --- END 9: Search the right edge to remove. Found: (328, 313)
2016-08-07 20:38:21,992 - INFO --- BEGIN 9: Remove an F3, F4 or F5
2016-08-07 20:38:21,992 - DEBUG --- vertex_to_join_near_v1_on_the_face: 314
2016-08-07 20:38:21,992 - DEBUG --- vertex_to_join_near_v2_on_the_face: 314
2016-08-07 20:38:21,992 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 274
2016-08-07 20:38:21,993 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 310
2016-08-07 20:38:21,993 - DEBUG --- third_face_to_update: [(314, 272), (272, 274), (274, 328), (328, 314)]
2016-08-07 20:38:21,993 - DEBUG --- fourth_face_to_update: [(313, 310), (310, 311), (311, 307), (307, 282), (282, 269), (269, 272), (272, 314), (314, 313)]
2016-08-07 20:38:21,993 - INFO --- ariadne_step: [3, 328, 313, 314, 314, 274, 310]
2016-08-07 20:38:21,994 - INFO --- END 9: Remove an F3, F4 or F5
2016-08-07 20:38:21,994 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:22,065 - DEBUG --- END: check_regularity
2016-08-07 20:38:22,065 - INFO --- END 9: Main loop
2016-08-07 20:38:22,066 - INFO --- 
2016-08-07 20:38:22,066 - INFO --- BEGIN 10: Main loop
2016-08-07 20:38:22,066 - INFO --- BEGIN 10: Search the right edge to remove
2016-08-07 20:38:22,066 - DEBUG --- BEGIN 10: test the 0 edge
2016-08-07 20:38:22,067 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:22,067 - DEBUG --- edge_to_remove: (264, 262)
2016-08-07 20:38:22,067 - DEBUG --- rotated_edge_to_remove: (262, 264)
2016-08-07 20:38:22,067 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:22,067 - DEBUG --- f1: [(264, 262), (262, 263), (263, 264)]
2016-08-07 20:38:22,068 - DEBUG --- f2: [(264, 33), (33, 27), (27, 28), (28, 262), (262, 264)]
2016-08-07 20:38:22,068 - DEBUG --- edge_to_remove_on_f1: (264, 262)
2016-08-07 20:38:22,068 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:22,068 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:22,068 - DEBUG --- Temporary f1_plus_f2: [(264, 33), (33, 27), (27, 28), (28, 262), (262, 263), (263, 264)]
2016-08-07 20:38:22,069 - DEBUG --- f1_plus_f2: [(263, 33), (33, 27), (27, 28), (28, 263)]
2016-08-07 20:38:22,069 - DEBUG --- END: join_faces
2016-08-07 20:38:22,069 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:22,069 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:22,069 - DEBUG --- Edge to remove found :-) (264, 262)
2016-08-07 20:38:22,070 - DEBUG --- f1: [(264, 262), (262, 263), (263, 264)]
2016-08-07 20:38:22,070 - DEBUG --- f2: [(264, 33), (33, 27), (27, 28), (28, 262), (262, 264)]
2016-08-07 20:38:22,070 - DEBUG --- f1_plus_f2_temp: [(263, 33), (33, 27), (27, 28), (28, 263)]
2016-08-07 20:38:22,070 - DEBUG --- END 10: test the 0 edge
2016-08-07 20:38:22,070 - INFO --- END 10: Search the right edge to remove. Found: (264, 262)
2016-08-07 20:38:22,071 - INFO --- BEGIN 10: Remove an F3, F4 or F5
2016-08-07 20:38:22,071 - DEBUG --- vertex_to_join_near_v1_on_the_face: 263
2016-08-07 20:38:22,071 - DEBUG --- vertex_to_join_near_v2_on_the_face: 263
2016-08-07 20:38:22,071 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 33
2016-08-07 20:38:22,071 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 28
2016-08-07 20:38:22,072 - DEBUG --- third_face_to_update: [(18, 7), (7, 14), (14, 265), (265, 6), (6, 5), (5, 32), (32, 33), (33, 264), (264, 263), (263, 18)]
2016-08-07 20:38:22,072 - DEBUG --- fourth_face_to_update: [(262, 28), (28, 17), (17, 18), (18, 263), (263, 262)]
2016-08-07 20:38:22,072 - INFO --- ariadne_step: [3, 264, 262, 263, 263, 33, 28]
2016-08-07 20:38:22,072 - INFO --- END 10: Remove an F3, F4 or F5
2016-08-07 20:38:22,073 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:22,140 - DEBUG --- END: check_regularity
2016-08-07 20:38:22,141 - INFO --- END 10: Main loop
2016-08-07 20:38:22,141 - INFO --- 
2016-08-07 20:38:22,141 - INFO --- BEGIN 11: Main loop
2016-08-07 20:38:22,141 - INFO --- BEGIN 11: Search the right edge to remove
2016-08-07 20:38:22,142 - DEBUG --- BEGIN 11: test the 0 edge
2016-08-07 20:38:22,142 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:22,142 - DEBUG --- edge_to_remove: (390, 386)
2016-08-07 20:38:22,142 - DEBUG --- rotated_edge_to_remove: (386, 390)
2016-08-07 20:38:22,142 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:22,143 - DEBUG --- f1: [(390, 386), (386, 388), (388, 390)]
2016-08-07 20:38:22,143 - DEBUG --- f2: [(383, 384), (384, 386), (386, 390), (390, 389), (389, 383)]
2016-08-07 20:38:22,143 - DEBUG --- edge_to_remove_on_f1: (390, 386)
2016-08-07 20:38:22,143 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:22,144 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:22,144 - DEBUG --- Temporary f1_plus_f2: [(390, 389), (389, 383), (383, 384), (384, 386), (386, 388), (388, 390)]
2016-08-07 20:38:22,144 - DEBUG --- f1_plus_f2: [(388, 389), (389, 383), (383, 384), (384, 388)]
2016-08-07 20:38:22,144 - DEBUG --- END: join_faces
2016-08-07 20:38:22,144 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:22,145 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:22,145 - DEBUG --- Edge to remove found :-) (390, 386)
2016-08-07 20:38:22,145 - DEBUG --- f1: [(390, 386), (386, 388), (388, 390)]
2016-08-07 20:38:22,145 - DEBUG --- f2: [(383, 384), (384, 386), (386, 390), (390, 389), (389, 383)]
2016-08-07 20:38:22,145 - DEBUG --- f1_plus_f2_temp: [(388, 389), (389, 383), (383, 384), (384, 388)]
2016-08-07 20:38:22,146 - DEBUG --- END 11: test the 0 edge
2016-08-07 20:38:22,146 - INFO --- END 11: Search the right edge to remove. Found: (390, 386)
2016-08-07 20:38:22,146 - INFO --- BEGIN 11: Remove an F3, F4 or F5
2016-08-07 20:38:22,146 - DEBUG --- vertex_to_join_near_v1_on_the_face: 388
2016-08-07 20:38:22,147 - DEBUG --- vertex_to_join_near_v2_on_the_face: 388
2016-08-07 20:38:22,147 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 389
2016-08-07 20:38:22,147 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 384
2016-08-07 20:38:22,147 - DEBUG --- third_face_to_update: [(390, 388), (388, 387), (387, 389), (389, 390)]
2016-08-07 20:38:22,147 - DEBUG --- fourth_face_to_update: [(388, 386), (386, 384), (384, 377), (377, 360), (360, 362), (362, 387), (387, 388)]
2016-08-07 20:38:22,148 - INFO --- ariadne_step: [3, 390, 386, 388, 388, 389, 384]
2016-08-07 20:38:22,148 - INFO --- END 11: Remove an F3, F4 or F5
2016-08-07 20:38:22,148 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:22,215 - DEBUG --- END: check_regularity
2016-08-07 20:38:22,215 - INFO --- END 11: Main loop
2016-08-07 20:38:22,216 - INFO --- 
2016-08-07 20:38:22,216 - INFO --- BEGIN 12: Main loop
2016-08-07 20:38:22,216 - INFO --- BEGIN 12: Search the right edge to remove
2016-08-07 20:38:22,216 - DEBUG --- BEGIN 12: test the 0 edge
2016-08-07 20:38:22,217 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:22,217 - DEBUG --- edge_to_remove: (338, 339)
2016-08-07 20:38:22,217 - DEBUG --- rotated_edge_to_remove: (339, 338)
2016-08-07 20:38:22,217 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:22,218 - DEBUG --- f1: [(338, 339), (339, 347), (347, 338)]
2016-08-07 20:38:22,218 - DEBUG --- f2: [(336, 337), (337, 268), (268, 212), (212, 335), (335, 331), (331, 68), (68, 79), (79, 339), (339, 338), (338, 340), (340, 342), (342, 343), (343, 336)]
2016-08-07 20:38:22,218 - DEBUG --- edge_to_remove_on_f1: (338, 339)
2016-08-07 20:38:22,218 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:22,218 - DEBUG --- index_of_edge_to_remove_on_f2: 8
2016-08-07 20:38:22,219 - DEBUG --- Temporary f1_plus_f2: [(338, 340), (340, 342), (342, 343), (343, 336), (336, 337), (337, 268), (268, 212), (212, 335), (335, 331), (331, 68), (68, 79), (79, 339), (339, 347), (347, 338)]
2016-08-07 20:38:22,219 - DEBUG --- f1_plus_f2: [(347, 340), (340, 342), (342, 343), (343, 336), (336, 337), (337, 268), (268, 212), (212, 335), (335, 331), (331, 68), (68, 79), (79, 347)]
2016-08-07 20:38:22,219 - DEBUG --- END: join_faces
2016-08-07 20:38:22,219 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:22,220 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:22,220 - DEBUG --- Edge to remove found :-) (338, 339)
2016-08-07 20:38:22,220 - DEBUG --- f1: [(338, 339), (339, 347), (347, 338)]
2016-08-07 20:38:22,220 - DEBUG --- f2: [(336, 337), (337, 268), (268, 212), (212, 335), (335, 331), (331, 68), (68, 79), (79, 339), (339, 338), (338, 340), (340, 342), (342, 343), (343, 336)]
2016-08-07 20:38:22,220 - DEBUG --- f1_plus_f2_temp: [(347, 340), (340, 342), (342, 343), (343, 336), (336, 337), (337, 268), (268, 212), (212, 335), (335, 331), (331, 68), (68, 79), (79, 347)]
2016-08-07 20:38:22,221 - DEBUG --- END 12: test the 0 edge
2016-08-07 20:38:22,221 - INFO --- END 12: Search the right edge to remove. Found: (338, 339)
2016-08-07 20:38:22,221 - INFO --- BEGIN 12: Remove an F3, F4 or F5
2016-08-07 20:38:22,221 - DEBUG --- vertex_to_join_near_v1_on_the_face: 347
2016-08-07 20:38:22,221 - DEBUG --- vertex_to_join_near_v2_on_the_face: 347
2016-08-07 20:38:22,222 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 340
2016-08-07 20:38:22,222 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 79
2016-08-07 20:38:22,222 - DEBUG --- third_face_to_update: [(338, 347), (347, 101), (101, 90), (90, 350), (350, 351), (351, 354), (354, 355), (355, 353), (353, 356), (356, 358), (358, 357), (357, 349), (349, 348), (348, 340), (340, 338)]
2016-08-07 20:38:22,222 - DEBUG --- fourth_face_to_update: [(101, 347), (347, 339), (339, 79), (79, 101)]
2016-08-07 20:38:22,223 - INFO --- ariadne_step: [3, 338, 339, 347, 347, 340, 79]
2016-08-07 20:38:22,223 - INFO --- END 12: Remove an F3, F4 or F5
2016-08-07 20:38:22,223 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:22,287 - DEBUG --- END: check_regularity
2016-08-07 20:38:22,288 - INFO --- END 12: Main loop
2016-08-07 20:38:22,288 - INFO --- 
2016-08-07 20:38:22,289 - INFO --- BEGIN 13: Main loop
2016-08-07 20:38:22,289 - INFO --- BEGIN 13: Search the right edge to remove
2016-08-07 20:38:22,289 - DEBUG --- BEGIN 13: test the 0 edge
2016-08-07 20:38:22,289 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:22,289 - DEBUG --- edge_to_remove: (130, 133)
2016-08-07 20:38:22,290 - DEBUG --- rotated_edge_to_remove: (133, 130)
2016-08-07 20:38:22,290 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:22,290 - DEBUG --- f1: [(130, 133), (133, 183), (183, 130)]
2016-08-07 20:38:22,290 - DEBUG --- f2: [(123, 127), (127, 128), (128, 131), (131, 132), (132, 133), (133, 130), (130, 134), (134, 129), (129, 136), (136, 137), (137, 138), (138, 126), (126, 123)]
2016-08-07 20:38:22,291 - DEBUG --- edge_to_remove_on_f1: (130, 133)
2016-08-07 20:38:22,291 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:22,291 - DEBUG --- index_of_edge_to_remove_on_f2: 5
2016-08-07 20:38:22,291 - DEBUG --- Temporary f1_plus_f2: [(130, 134), (134, 129), (129, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 127), (127, 128), (128, 131), (131, 132), (132, 133), (133, 183), (183, 130)]
2016-08-07 20:38:22,291 - DEBUG --- f1_plus_f2: [(183, 134), (134, 129), (129, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 127), (127, 128), (128, 131), (131, 132), (132, 183)]
2016-08-07 20:38:22,292 - DEBUG --- END: join_faces
2016-08-07 20:38:22,292 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:22,292 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:22,292 - DEBUG --- Edge to remove found :-) (130, 133)
2016-08-07 20:38:22,293 - DEBUG --- f1: [(130, 133), (133, 183), (183, 130)]
2016-08-07 20:38:22,293 - DEBUG --- f2: [(123, 127), (127, 128), (128, 131), (131, 132), (132, 133), (133, 130), (130, 134), (134, 129), (129, 136), (136, 137), (137, 138), (138, 126), (126, 123)]
2016-08-07 20:38:22,293 - DEBUG --- f1_plus_f2_temp: [(183, 134), (134, 129), (129, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 127), (127, 128), (128, 131), (131, 132), (132, 183)]
2016-08-07 20:38:22,293 - DEBUG --- END 13: test the 0 edge
2016-08-07 20:38:22,293 - INFO --- END 13: Search the right edge to remove. Found: (130, 133)
2016-08-07 20:38:22,294 - INFO --- BEGIN 13: Remove an F3, F4 or F5
2016-08-07 20:38:22,294 - DEBUG --- vertex_to_join_near_v1_on_the_face: 183
2016-08-07 20:38:22,294 - DEBUG --- vertex_to_join_near_v2_on_the_face: 183
2016-08-07 20:38:22,294 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 134
2016-08-07 20:38:22,294 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 132
2016-08-07 20:38:22,295 - DEBUG --- third_face_to_update: [(181, 173), (173, 172), (172, 185), (185, 184), (184, 134), (134, 130), (130, 183), (183, 182), (182, 181)]
2016-08-07 20:38:22,295 - DEBUG --- fourth_face_to_update: [(132, 193), (193, 182), (182, 183), (183, 133), (133, 132)]
2016-08-07 20:38:22,295 - INFO --- ariadne_step: [3, 130, 133, 183, 183, 134, 132]
2016-08-07 20:38:22,295 - INFO --- END 13: Remove an F3, F4 or F5
2016-08-07 20:38:22,296 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:22,360 - DEBUG --- END: check_regularity
2016-08-07 20:38:22,360 - INFO --- END 13: Main loop
2016-08-07 20:38:22,360 - INFO --- 
2016-08-07 20:38:22,361 - INFO --- BEGIN 14: Main loop
2016-08-07 20:38:22,361 - INFO --- BEGIN 14: Search the right edge to remove
2016-08-07 20:38:22,361 - DEBUG --- BEGIN 14: test the 0 edge
2016-08-07 20:38:22,361 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:22,361 - DEBUG --- edge_to_remove: (265, 14)
2016-08-07 20:38:22,362 - DEBUG --- rotated_edge_to_remove: (14, 265)
2016-08-07 20:38:22,362 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:22,362 - DEBUG --- f1: [(265, 14), (14, 15), (15, 265)]
2016-08-07 20:38:22,362 - DEBUG --- f2: [(18, 7), (7, 14), (14, 265), (265, 6), (6, 5), (5, 32), (32, 33), (33, 263), (263, 18)]
2016-08-07 20:38:22,363 - DEBUG --- edge_to_remove_on_f1: (265, 14)
2016-08-07 20:38:22,363 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:22,363 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:22,363 - DEBUG --- Temporary f1_plus_f2: [(265, 6), (6, 5), (5, 32), (32, 33), (33, 263), (263, 18), (18, 7), (7, 14), (14, 15), (15, 265)]
2016-08-07 20:38:22,363 - DEBUG --- f1_plus_f2: [(15, 6), (6, 5), (5, 32), (32, 33), (33, 263), (263, 18), (18, 7), (7, 15)]
2016-08-07 20:38:22,364 - DEBUG --- END: join_faces
2016-08-07 20:38:22,364 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:22,364 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:22,364 - DEBUG --- Edge to remove found :-) (265, 14)
2016-08-07 20:38:22,364 - DEBUG --- f1: [(265, 14), (14, 15), (15, 265)]
2016-08-07 20:38:22,365 - DEBUG --- f2: [(18, 7), (7, 14), (14, 265), (265, 6), (6, 5), (5, 32), (32, 33), (33, 263), (263, 18)]
2016-08-07 20:38:22,365 - DEBUG --- f1_plus_f2_temp: [(15, 6), (6, 5), (5, 32), (32, 33), (33, 263), (263, 18), (18, 7), (7, 15)]
2016-08-07 20:38:22,365 - DEBUG --- END 14: test the 0 edge
2016-08-07 20:38:22,365 - INFO --- END 14: Search the right edge to remove. Found: (265, 14)
2016-08-07 20:38:22,366 - INFO --- BEGIN 14: Remove an F3, F4 or F5
2016-08-07 20:38:22,366 - DEBUG --- vertex_to_join_near_v1_on_the_face: 15
2016-08-07 20:38:22,366 - DEBUG --- vertex_to_join_near_v2_on_the_face: 15
2016-08-07 20:38:22,366 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 6
2016-08-07 20:38:22,367 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 7
2016-08-07 20:38:22,367 - DEBUG --- third_face_to_update: [(265, 15), (15, 3), (3, 6), (6, 265)]
2016-08-07 20:38:22,367 - DEBUG --- fourth_face_to_update: [(10, 9), (9, 11), (11, 12), (12, 394), (394, 392), (392, 3), (3, 15), (15, 14), (14, 7), (7, 8), (8, 10)]
2016-08-07 20:38:22,367 - INFO --- ariadne_step: [3, 265, 14, 15, 15, 6, 7]
2016-08-07 20:38:22,368 - INFO --- END 14: Remove an F3, F4 or F5
2016-08-07 20:38:22,368 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:22,431 - DEBUG --- END: check_regularity
2016-08-07 20:38:22,431 - INFO --- END 14: Main loop
2016-08-07 20:38:22,432 - INFO --- 
2016-08-07 20:38:22,432 - INFO --- BEGIN 15: Main loop
2016-08-07 20:38:22,432 - INFO --- BEGIN 15: Search the right edge to remove
2016-08-07 20:38:22,433 - DEBUG --- BEGIN 15: test the 0 edge
2016-08-07 20:38:22,433 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:22,433 - DEBUG --- edge_to_remove: (179, 201)
2016-08-07 20:38:22,433 - DEBUG --- rotated_edge_to_remove: (201, 179)
2016-08-07 20:38:22,434 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:22,434 - DEBUG --- f1: [(179, 201), (201, 301), (301, 179)]
2016-08-07 20:38:22,434 - DEBUG --- f2: [(257, 290), (290, 190), (190, 201), (201, 179), (179, 146), (146, 135), (135, 246), (246, 235), (235, 224), (224, 212), (212, 268), (268, 279), (279, 257)]
2016-08-07 20:38:22,434 - DEBUG --- edge_to_remove_on_f1: (179, 201)
2016-08-07 20:38:22,434 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:22,435 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:22,435 - DEBUG --- Temporary f1_plus_f2: [(179, 146), (146, 135), (135, 246), (246, 235), (235, 224), (224, 212), (212, 268), (268, 279), (279, 257), (257, 290), (290, 190), (190, 201), (201, 301), (301, 179)]
2016-08-07 20:38:22,435 - DEBUG --- f1_plus_f2: [(301, 146), (146, 135), (135, 246), (246, 235), (235, 224), (224, 212), (212, 268), (268, 279), (279, 257), (257, 290), (290, 190), (190, 301)]
2016-08-07 20:38:22,435 - DEBUG --- END: join_faces
2016-08-07 20:38:22,435 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:22,436 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:22,436 - DEBUG --- Edge to remove found :-) (179, 201)
2016-08-07 20:38:22,436 - DEBUG --- f1: [(179, 201), (201, 301), (301, 179)]
2016-08-07 20:38:22,436 - DEBUG --- f2: [(257, 290), (290, 190), (190, 201), (201, 179), (179, 146), (146, 135), (135, 246), (246, 235), (235, 224), (224, 212), (212, 268), (268, 279), (279, 257)]
2016-08-07 20:38:22,437 - DEBUG --- f1_plus_f2_temp: [(301, 146), (146, 135), (135, 246), (246, 235), (235, 224), (224, 212), (212, 268), (268, 279), (279, 257), (257, 290), (290, 190), (190, 301)]
2016-08-07 20:38:22,437 - DEBUG --- END 15: test the 0 edge
2016-08-07 20:38:22,437 - INFO --- END 15: Search the right edge to remove. Found: (179, 201)
2016-08-07 20:38:22,437 - INFO --- BEGIN 15: Remove an F3, F4 or F5
2016-08-07 20:38:22,437 - DEBUG --- vertex_to_join_near_v1_on_the_face: 301
2016-08-07 20:38:22,438 - DEBUG --- vertex_to_join_near_v2_on_the_face: 301
2016-08-07 20:38:22,438 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 146
2016-08-07 20:38:22,438 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 190
2016-08-07 20:38:22,438 - DEBUG --- third_face_to_update: [(179, 301), (301, 312), (312, 168), (168, 146), (146, 179)]
2016-08-07 20:38:22,439 - DEBUG --- fourth_face_to_update: [(190, 323), (323, 312), (312, 301), (301, 201), (201, 190)]
2016-08-07 20:38:22,439 - INFO --- ariadne_step: [3, 179, 201, 301, 301, 146, 190]
2016-08-07 20:38:22,439 - INFO --- END 15: Remove an F3, F4 or F5
2016-08-07 20:38:22,439 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:22,503 - DEBUG --- END: check_regularity
2016-08-07 20:38:22,503 - INFO --- END 15: Main loop
2016-08-07 20:38:22,503 - INFO --- 
2016-08-07 20:38:22,503 - INFO --- BEGIN 16: Main loop
2016-08-07 20:38:22,504 - INFO --- BEGIN 16: Search the right edge to remove
2016-08-07 20:38:22,504 - DEBUG --- BEGIN 16: test the 0 edge
2016-08-07 20:38:22,504 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:22,504 - DEBUG --- edge_to_remove: (246, 334)
2016-08-07 20:38:22,504 - DEBUG --- rotated_edge_to_remove: (334, 246)
2016-08-07 20:38:22,505 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:22,505 - DEBUG --- f1: [(246, 334), (334, 235), (235, 246)]
2016-08-07 20:38:22,505 - DEBUG --- f2: [(332, 333), (333, 334), (334, 246), (246, 135), (135, 57), (57, 68), (68, 331), (331, 332)]
2016-08-07 20:38:22,505 - DEBUG --- edge_to_remove_on_f1: (246, 334)
2016-08-07 20:38:22,505 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:22,506 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:22,506 - DEBUG --- Temporary f1_plus_f2: [(246, 135), (135, 57), (57, 68), (68, 331), (331, 332), (332, 333), (333, 334), (334, 235), (235, 246)]
2016-08-07 20:38:22,506 - DEBUG --- f1_plus_f2: [(235, 135), (135, 57), (57, 68), (68, 331), (331, 332), (332, 333), (333, 235)]
2016-08-07 20:38:22,506 - DEBUG --- END: join_faces
2016-08-07 20:38:22,507 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:22,507 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:22,507 - DEBUG --- Edge to remove found :-) (246, 334)
2016-08-07 20:38:22,507 - DEBUG --- f1: [(246, 334), (334, 235), (235, 246)]
2016-08-07 20:38:22,507 - DEBUG --- f2: [(332, 333), (333, 334), (334, 246), (246, 135), (135, 57), (57, 68), (68, 331), (331, 332)]
2016-08-07 20:38:22,508 - DEBUG --- f1_plus_f2_temp: [(235, 135), (135, 57), (57, 68), (68, 331), (331, 332), (332, 333), (333, 235)]
2016-08-07 20:38:22,508 - DEBUG --- END 16: test the 0 edge
2016-08-07 20:38:22,508 - INFO --- END 16: Search the right edge to remove. Found: (246, 334)
2016-08-07 20:38:22,508 - INFO --- BEGIN 16: Remove an F3, F4 or F5
2016-08-07 20:38:22,509 - DEBUG --- vertex_to_join_near_v1_on_the_face: 235
2016-08-07 20:38:22,509 - DEBUG --- vertex_to_join_near_v2_on_the_face: 235
2016-08-07 20:38:22,509 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 135
2016-08-07 20:38:22,509 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 333
2016-08-07 20:38:22,510 - DEBUG --- third_face_to_update: [(301, 146), (146, 135), (135, 246), (246, 235), (235, 224), (224, 212), (212, 268), (268, 279), (279, 257), (257, 290), (290, 190), (190, 301)]
2016-08-07 20:38:22,510 - DEBUG --- fourth_face_to_update: [(333, 345), (345, 224), (224, 235), (235, 334), (334, 333)]
2016-08-07 20:38:22,511 - INFO --- ariadne_step: [3, 246, 334, 235, 235, 135, 333]
2016-08-07 20:38:22,511 - INFO --- END 16: Remove an F3, F4 or F5
2016-08-07 20:38:22,511 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:22,573 - DEBUG --- END: check_regularity
2016-08-07 20:38:22,573 - INFO --- END 16: Main loop
2016-08-07 20:38:22,574 - INFO --- 
2016-08-07 20:38:22,574 - INFO --- BEGIN 17: Main loop
2016-08-07 20:38:22,574 - INFO --- BEGIN 17: Search the right edge to remove
2016-08-07 20:38:22,574 - DEBUG --- BEGIN 17: test the 0 edge
2016-08-07 20:38:22,574 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:22,575 - DEBUG --- edge_to_remove: (359, 343)
2016-08-07 20:38:22,575 - DEBUG --- rotated_edge_to_remove: (343, 359)
2016-08-07 20:38:22,575 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:22,575 - DEBUG --- f1: [(359, 343), (343, 342), (342, 359)]
2016-08-07 20:38:22,576 - DEBUG --- f2: [(190, 290), (290, 336), (336, 343), (343, 359), (359, 365), (365, 382), (382, 34), (34, 37), (37, 219), (219, 217), (217, 218), (218, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 323), (323, 190)]
2016-08-07 20:38:22,576 - DEBUG --- edge_to_remove_on_f1: (359, 343)
2016-08-07 20:38:22,576 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:22,576 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:22,576 - DEBUG --- Temporary f1_plus_f2: [(359, 365), (365, 382), (382, 34), (34, 37), (37, 219), (219, 217), (217, 218), (218, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 323), (323, 190), (190, 290), (290, 336), (336, 343), (343, 342), (342, 359)]
2016-08-07 20:38:22,577 - DEBUG --- f1_plus_f2: [(342, 365), (365, 382), (382, 34), (34, 37), (37, 219), (219, 217), (217, 218), (218, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 323), (323, 190), (190, 290), (290, 336), (336, 342)]
2016-08-07 20:38:22,577 - DEBUG --- END: join_faces
2016-08-07 20:38:22,577 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:22,577 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:22,578 - DEBUG --- Edge to remove found :-) (359, 343)
2016-08-07 20:38:22,578 - DEBUG --- f1: [(359, 343), (343, 342), (342, 359)]
2016-08-07 20:38:22,578 - DEBUG --- f2: [(190, 290), (290, 336), (336, 343), (343, 359), (359, 365), (365, 382), (382, 34), (34, 37), (37, 219), (219, 217), (217, 218), (218, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 323), (323, 190)]
2016-08-07 20:38:22,578 - DEBUG --- f1_plus_f2_temp: [(342, 365), (365, 382), (382, 34), (34, 37), (37, 219), (219, 217), (217, 218), (218, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 323), (323, 190), (190, 290), (290, 336), (336, 342)]
2016-08-07 20:38:22,578 - DEBUG --- END 17: test the 0 edge
2016-08-07 20:38:22,579 - INFO --- END 17: Search the right edge to remove. Found: (359, 343)
2016-08-07 20:38:22,579 - INFO --- BEGIN 17: Remove an F3, F4 or F5
2016-08-07 20:38:22,579 - DEBUG --- vertex_to_join_near_v1_on_the_face: 342
2016-08-07 20:38:22,579 - DEBUG --- vertex_to_join_near_v2_on_the_face: 342
2016-08-07 20:38:22,579 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 365
2016-08-07 20:38:22,580 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 336
2016-08-07 20:38:22,580 - DEBUG --- third_face_to_update: [(364, 362), (362, 360), (360, 365), (365, 359), (359, 342), (342, 340), (340, 348), (348, 361), (361, 364)]
2016-08-07 20:38:22,580 - DEBUG --- fourth_face_to_update: [(347, 340), (340, 342), (342, 343), (343, 336), (336, 337), (337, 268), (268, 212), (212, 335), (335, 331), (331, 68), (68, 79), (79, 347)]
2016-08-07 20:38:22,580 - INFO --- ariadne_step: [3, 359, 343, 342, 342, 365, 336]
2016-08-07 20:38:22,581 - INFO --- END 17: Remove an F3, F4 or F5
2016-08-07 20:38:22,581 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:22,642 - DEBUG --- END: check_regularity
2016-08-07 20:38:22,642 - INFO --- END 17: Main loop
2016-08-07 20:38:22,643 - INFO --- 
2016-08-07 20:38:22,643 - INFO --- BEGIN 18: Main loop
2016-08-07 20:38:22,643 - INFO --- BEGIN 18: Search the right edge to remove
2016-08-07 20:38:22,643 - DEBUG --- BEGIN 18: test the 0 edge
2016-08-07 20:38:22,644 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:22,644 - DEBUG --- edge_to_remove: (285, 276)
2016-08-07 20:38:22,644 - DEBUG --- rotated_edge_to_remove: (276, 285)
2016-08-07 20:38:22,644 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:22,644 - DEBUG --- f1: [(285, 276), (276, 277), (277, 285)]
2016-08-07 20:38:22,645 - DEBUG --- f2: [(291, 278), (278, 276), (276, 285), (285, 284), (284, 287), (287, 289), (289, 291)]
2016-08-07 20:38:22,645 - DEBUG --- edge_to_remove_on_f1: (285, 276)
2016-08-07 20:38:22,645 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:22,645 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:22,645 - DEBUG --- Temporary f1_plus_f2: [(285, 284), (284, 287), (287, 289), (289, 291), (291, 278), (278, 276), (276, 277), (277, 285)]
2016-08-07 20:38:22,646 - DEBUG --- f1_plus_f2: [(277, 284), (284, 287), (287, 289), (289, 291), (291, 278), (278, 277)]
2016-08-07 20:38:22,646 - DEBUG --- END: join_faces
2016-08-07 20:38:22,646 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:22,646 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:22,646 - DEBUG --- Edge to remove found :-) (285, 276)
2016-08-07 20:38:22,647 - DEBUG --- f1: [(285, 276), (276, 277), (277, 285)]
2016-08-07 20:38:22,647 - DEBUG --- f2: [(291, 278), (278, 276), (276, 285), (285, 284), (284, 287), (287, 289), (289, 291)]
2016-08-07 20:38:22,647 - DEBUG --- f1_plus_f2_temp: [(277, 284), (284, 287), (287, 289), (289, 291), (291, 278), (278, 277)]
2016-08-07 20:38:22,647 - DEBUG --- END 18: test the 0 edge
2016-08-07 20:38:22,647 - INFO --- END 18: Search the right edge to remove. Found: (285, 276)
2016-08-07 20:38:22,648 - INFO --- BEGIN 18: Remove an F3, F4 or F5
2016-08-07 20:38:22,648 - DEBUG --- vertex_to_join_near_v1_on_the_face: 277
2016-08-07 20:38:22,648 - DEBUG --- vertex_to_join_near_v2_on_the_face: 277
2016-08-07 20:38:22,648 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 284
2016-08-07 20:38:22,648 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 278
2016-08-07 20:38:22,649 - DEBUG --- third_face_to_update: [(283, 284), (284, 285), (285, 277), (277, 275), (275, 286), (286, 283)]
2016-08-07 20:38:22,649 - DEBUG --- fourth_face_to_update: [(281, 13), (13, 374), (374, 270), (270, 269), (269, 282), (282, 275), (275, 277), (277, 276), (276, 278), (278, 280), (280, 281)]
2016-08-07 20:38:22,649 - INFO --- ariadne_step: [3, 285, 276, 277, 277, 284, 278]
2016-08-07 20:38:22,650 - INFO --- END 18: Remove an F3, F4 or F5
2016-08-07 20:38:22,650 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:22,711 - DEBUG --- END: check_regularity
2016-08-07 20:38:22,712 - INFO --- END 18: Main loop
2016-08-07 20:38:22,712 - INFO --- 
2016-08-07 20:38:22,712 - INFO --- BEGIN 19: Main loop
2016-08-07 20:38:22,713 - INFO --- BEGIN 19: Search the right edge to remove
2016-08-07 20:38:22,713 - DEBUG --- BEGIN 19: test the 0 edge
2016-08-07 20:38:22,713 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:22,713 - DEBUG --- edge_to_remove: (45, 41)
2016-08-07 20:38:22,713 - DEBUG --- rotated_edge_to_remove: (41, 45)
2016-08-07 20:38:22,714 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:22,714 - DEBUG --- f1: [(45, 41), (41, 42), (42, 45)]
2016-08-07 20:38:22,714 - DEBUG --- f2: [(41, 45), (45, 44), (44, 43), (43, 41)]
2016-08-07 20:38:22,714 - DEBUG --- edge_to_remove_on_f1: (45, 41)
2016-08-07 20:38:22,714 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:22,715 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:22,715 - DEBUG --- Temporary f1_plus_f2: [(45, 44), (44, 43), (43, 41), (41, 42), (42, 45)]
2016-08-07 20:38:22,715 - DEBUG --- f1_plus_f2: [(42, 44), (44, 43), (43, 42)]
2016-08-07 20:38:22,715 - DEBUG --- END: join_faces
2016-08-07 20:38:22,716 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:22,716 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:22,716 - DEBUG --- Edge to remove found :-) (45, 41)
2016-08-07 20:38:22,716 - DEBUG --- f1: [(45, 41), (41, 42), (42, 45)]
2016-08-07 20:38:22,716 - DEBUG --- f2: [(41, 45), (45, 44), (44, 43), (43, 41)]
2016-08-07 20:38:22,717 - DEBUG --- f1_plus_f2_temp: [(42, 44), (44, 43), (43, 42)]
2016-08-07 20:38:22,717 - DEBUG --- END 19: test the 0 edge
2016-08-07 20:38:22,717 - INFO --- END 19: Search the right edge to remove. Found: (45, 41)
2016-08-07 20:38:22,717 - INFO --- BEGIN 19: Remove an F3, F4 or F5
2016-08-07 20:38:22,717 - DEBUG --- vertex_to_join_near_v1_on_the_face: 42
2016-08-07 20:38:22,718 - DEBUG --- vertex_to_join_near_v2_on_the_face: 42
2016-08-07 20:38:22,718 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 44
2016-08-07 20:38:22,718 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 43
2016-08-07 20:38:22,718 - DEBUG --- third_face_to_update: [(47, 48), (48, 53), (53, 52), (52, 44), (44, 45), (45, 42), (42, 40), (40, 54), (54, 55), (55, 51), (51, 50), (50, 47)]
2016-08-07 20:38:22,719 - DEBUG --- fourth_face_to_update: [(40, 42), (42, 41), (41, 43), (43, 39), (39, 36), (36, 30), (30, 31), (31, 40)]
2016-08-07 20:38:22,719 - INFO --- ariadne_step: [3, 45, 41, 42, 42, 44, 43]
2016-08-07 20:38:22,719 - INFO --- END 19: Remove an F3, F4 or F5
2016-08-07 20:38:22,719 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:22,779 - DEBUG --- END: check_regularity
2016-08-07 20:38:22,780 - INFO --- END 19: Main loop
2016-08-07 20:38:22,780 - INFO --- 
2016-08-07 20:38:22,780 - INFO --- BEGIN 20: Main loop
2016-08-07 20:38:22,780 - INFO --- BEGIN 20: Search the right edge to remove
2016-08-07 20:38:22,781 - DEBUG --- BEGIN 20: test the 0 edge
2016-08-07 20:38:22,781 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:22,781 - DEBUG --- edge_to_remove: (376, 329)
2016-08-07 20:38:22,781 - DEBUG --- rotated_edge_to_remove: (329, 376)
2016-08-07 20:38:22,781 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:22,782 - DEBUG --- f1: [(376, 329), (329, 373), (373, 376)]
2016-08-07 20:38:22,782 - DEBUG --- f2: [(375, 327), (327, 329), (329, 376), (376, 375)]
2016-08-07 20:38:22,782 - DEBUG --- edge_to_remove_on_f1: (376, 329)
2016-08-07 20:38:22,782 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:22,783 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:22,783 - DEBUG --- Temporary f1_plus_f2: [(376, 375), (375, 327), (327, 329), (329, 373), (373, 376)]
2016-08-07 20:38:22,783 - DEBUG --- f1_plus_f2: [(373, 375), (375, 327), (327, 373)]
2016-08-07 20:38:22,783 - DEBUG --- END: join_faces
2016-08-07 20:38:22,783 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:22,784 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:22,784 - DEBUG --- Edge to remove found :-) (376, 329)
2016-08-07 20:38:22,784 - DEBUG --- f1: [(376, 329), (329, 373), (373, 376)]
2016-08-07 20:38:22,784 - DEBUG --- f2: [(375, 327), (327, 329), (329, 376), (376, 375)]
2016-08-07 20:38:22,784 - DEBUG --- f1_plus_f2_temp: [(373, 375), (375, 327), (327, 373)]
2016-08-07 20:38:22,785 - DEBUG --- END 20: test the 0 edge
2016-08-07 20:38:22,785 - INFO --- END 20: Search the right edge to remove. Found: (376, 329)
2016-08-07 20:38:22,785 - INFO --- BEGIN 20: Remove an F3, F4 or F5
2016-08-07 20:38:22,785 - DEBUG --- vertex_to_join_near_v1_on_the_face: 373
2016-08-07 20:38:22,785 - DEBUG --- vertex_to_join_near_v2_on_the_face: 373
2016-08-07 20:38:22,786 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 375
2016-08-07 20:38:22,786 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 327
2016-08-07 20:38:22,786 - DEBUG --- third_face_to_update: [(324, 375), (375, 376), (376, 373), (373, 46), (46, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 369), (369, 366), (366, 367), (367, 361), (361, 348), (348, 349), (349, 324)]
2016-08-07 20:38:22,786 - DEBUG --- fourth_face_to_update: [(373, 329), (329, 327), (327, 326), (326, 112), (112, 223), (223, 46), (46, 373)]
2016-08-07 20:38:22,787 - INFO --- ariadne_step: [3, 376, 329, 373, 373, 375, 327]
2016-08-07 20:38:22,787 - INFO --- END 20: Remove an F3, F4 or F5
2016-08-07 20:38:22,787 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:22,846 - DEBUG --- END: check_regularity
2016-08-07 20:38:22,847 - INFO --- END 20: Main loop
2016-08-07 20:38:22,847 - INFO --- 
2016-08-07 20:38:22,847 - INFO --- BEGIN 21: Main loop
2016-08-07 20:38:22,847 - INFO --- BEGIN 21: Search the right edge to remove
2016-08-07 20:38:22,848 - DEBUG --- BEGIN 21: test the 0 edge
2016-08-07 20:38:22,848 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:22,848 - DEBUG --- edge_to_remove: (350, 90)
2016-08-07 20:38:22,848 - DEBUG --- rotated_edge_to_remove: (90, 350)
2016-08-07 20:38:22,848 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:22,849 - DEBUG --- f1: [(350, 90), (90, 124), (124, 350)]
2016-08-07 20:38:22,849 - DEBUG --- f2: [(340, 347), (347, 101), (101, 90), (90, 350), (350, 351), (351, 354), (354, 355), (355, 353), (353, 356), (356, 358), (358, 357), (357, 349), (349, 348), (348, 340)]
2016-08-07 20:38:22,849 - DEBUG --- edge_to_remove_on_f1: (350, 90)
2016-08-07 20:38:22,849 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:22,849 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:22,850 - DEBUG --- Temporary f1_plus_f2: [(350, 351), (351, 354), (354, 355), (355, 353), (353, 356), (356, 358), (358, 357), (357, 349), (349, 348), (348, 340), (340, 347), (347, 101), (101, 90), (90, 124), (124, 350)]
2016-08-07 20:38:22,850 - DEBUG --- f1_plus_f2: [(124, 351), (351, 354), (354, 355), (355, 353), (353, 356), (356, 358), (358, 357), (357, 349), (349, 348), (348, 340), (340, 347), (347, 101), (101, 124)]
2016-08-07 20:38:22,850 - DEBUG --- END: join_faces
2016-08-07 20:38:22,850 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:22,851 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:22,851 - DEBUG --- Edge to remove found :-) (350, 90)
2016-08-07 20:38:22,851 - DEBUG --- f1: [(350, 90), (90, 124), (124, 350)]
2016-08-07 20:38:22,851 - DEBUG --- f2: [(340, 347), (347, 101), (101, 90), (90, 350), (350, 351), (351, 354), (354, 355), (355, 353), (353, 356), (356, 358), (358, 357), (357, 349), (349, 348), (348, 340)]
2016-08-07 20:38:22,851 - DEBUG --- f1_plus_f2_temp: [(124, 351), (351, 354), (354, 355), (355, 353), (353, 356), (356, 358), (358, 357), (357, 349), (349, 348), (348, 340), (340, 347), (347, 101), (101, 124)]
2016-08-07 20:38:22,852 - DEBUG --- END 21: test the 0 edge
2016-08-07 20:38:22,852 - INFO --- END 21: Search the right edge to remove. Found: (350, 90)
2016-08-07 20:38:22,852 - INFO --- BEGIN 21: Remove an F3, F4 or F5
2016-08-07 20:38:22,852 - DEBUG --- vertex_to_join_near_v1_on_the_face: 124
2016-08-07 20:38:22,852 - DEBUG --- vertex_to_join_near_v2_on_the_face: 124
2016-08-07 20:38:22,853 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 351
2016-08-07 20:38:22,853 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 101
2016-08-07 20:38:22,853 - DEBUG --- third_face_to_update: [(363, 266), (266, 267), (267, 351), (351, 350), (350, 124), (124, 341), (341, 363)]
2016-08-07 20:38:22,854 - DEBUG --- fourth_face_to_update: [(113, 352), (352, 341), (341, 124), (124, 90), (90, 101), (101, 79), (79, 68), (68, 57), (57, 113)]
2016-08-07 20:38:22,854 - INFO --- ariadne_step: [3, 350, 90, 124, 124, 351, 101]
2016-08-07 20:38:22,854 - INFO --- END 21: Remove an F3, F4 or F5
2016-08-07 20:38:22,854 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:22,913 - DEBUG --- END: check_regularity
2016-08-07 20:38:22,913 - INFO --- END 21: Main loop
2016-08-07 20:38:22,913 - INFO --- 
2016-08-07 20:38:22,914 - INFO --- BEGIN 22: Main loop
2016-08-07 20:38:22,914 - INFO --- BEGIN 22: Search the right edge to remove
2016-08-07 20:38:22,914 - DEBUG --- BEGIN 22: test the 0 edge
2016-08-07 20:38:22,914 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:22,915 - DEBUG --- edge_to_remove: (204, 205)
2016-08-07 20:38:22,915 - DEBUG --- rotated_edge_to_remove: (205, 204)
2016-08-07 20:38:22,915 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:22,915 - DEBUG --- f1: [(204, 205), (205, 208), (208, 204)]
2016-08-07 20:38:22,915 - DEBUG --- f2: [(180, 207), (207, 203), (203, 205), (205, 204), (204, 206), (206, 202), (202, 197), (197, 198), (198, 180)]
2016-08-07 20:38:22,916 - DEBUG --- edge_to_remove_on_f1: (204, 205)
2016-08-07 20:38:22,916 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:22,916 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:22,916 - DEBUG --- Temporary f1_plus_f2: [(204, 206), (206, 202), (202, 197), (197, 198), (198, 180), (180, 207), (207, 203), (203, 205), (205, 208), (208, 204)]
2016-08-07 20:38:22,916 - DEBUG --- f1_plus_f2: [(208, 206), (206, 202), (202, 197), (197, 198), (198, 180), (180, 207), (207, 203), (203, 208)]
2016-08-07 20:38:22,917 - DEBUG --- END: join_faces
2016-08-07 20:38:22,917 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:22,917 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:22,917 - DEBUG --- Edge to remove found :-) (204, 205)
2016-08-07 20:38:22,917 - DEBUG --- f1: [(204, 205), (205, 208), (208, 204)]
2016-08-07 20:38:22,918 - DEBUG --- f2: [(180, 207), (207, 203), (203, 205), (205, 204), (204, 206), (206, 202), (202, 197), (197, 198), (198, 180)]
2016-08-07 20:38:22,918 - DEBUG --- f1_plus_f2_temp: [(208, 206), (206, 202), (202, 197), (197, 198), (198, 180), (180, 207), (207, 203), (203, 208)]
2016-08-07 20:38:22,918 - DEBUG --- END 22: test the 0 edge
2016-08-07 20:38:22,918 - INFO --- END 22: Search the right edge to remove. Found: (204, 205)
2016-08-07 20:38:22,918 - INFO --- BEGIN 22: Remove an F3, F4 or F5
2016-08-07 20:38:22,919 - DEBUG --- vertex_to_join_near_v1_on_the_face: 208
2016-08-07 20:38:22,919 - DEBUG --- vertex_to_join_near_v2_on_the_face: 208
2016-08-07 20:38:22,919 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 206
2016-08-07 20:38:22,919 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 203
2016-08-07 20:38:22,920 - DEBUG --- third_face_to_update: [(208, 199), (199, 200), (200, 206), (206, 204), (204, 208)]
2016-08-07 20:38:22,920 - DEBUG --- fourth_face_to_update: [(176, 199), (199, 208), (208, 205), (205, 203), (203, 177), (177, 176)]
2016-08-07 20:38:22,920 - INFO --- ariadne_step: [3, 204, 205, 208, 208, 206, 203]
2016-08-07 20:38:22,920 - INFO --- END 22: Remove an F3, F4 or F5
2016-08-07 20:38:22,920 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:22,979 - DEBUG --- END: check_regularity
2016-08-07 20:38:22,980 - INFO --- END 22: Main loop
2016-08-07 20:38:22,980 - INFO --- 
2016-08-07 20:38:22,980 - INFO --- BEGIN 23: Main loop
2016-08-07 20:38:22,980 - INFO --- BEGIN 23: Search the right edge to remove
2016-08-07 20:38:22,981 - DEBUG --- BEGIN 23: test the 0 edge
2016-08-07 20:38:22,981 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:22,981 - DEBUG --- edge_to_remove: (297, 299)
2016-08-07 20:38:22,981 - DEBUG --- rotated_edge_to_remove: (299, 297)
2016-08-07 20:38:22,982 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:22,982 - DEBUG --- f1: [(297, 299), (299, 302), (302, 297)]
2016-08-07 20:38:22,982 - DEBUG --- f2: [(299, 297), (297, 281), (281, 280), (280, 296), (296, 300), (300, 298), (298, 299)]
2016-08-07 20:38:22,982 - DEBUG --- edge_to_remove_on_f1: (297, 299)
2016-08-07 20:38:22,982 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:22,983 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:22,983 - DEBUG --- Temporary f1_plus_f2: [(297, 281), (281, 280), (280, 296), (296, 300), (300, 298), (298, 299), (299, 302), (302, 297)]
2016-08-07 20:38:22,983 - DEBUG --- f1_plus_f2: [(302, 281), (281, 280), (280, 296), (296, 300), (300, 298), (298, 302)]
2016-08-07 20:38:22,983 - DEBUG --- END: join_faces
2016-08-07 20:38:22,983 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:22,984 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:22,984 - DEBUG --- Edge to remove found :-) (297, 299)
2016-08-07 20:38:22,984 - DEBUG --- f1: [(297, 299), (299, 302), (302, 297)]
2016-08-07 20:38:22,984 - DEBUG --- f2: [(299, 297), (297, 281), (281, 280), (280, 296), (296, 300), (300, 298), (298, 299)]
2016-08-07 20:38:22,984 - DEBUG --- f1_plus_f2_temp: [(302, 281), (281, 280), (280, 296), (296, 300), (300, 298), (298, 302)]
2016-08-07 20:38:22,985 - DEBUG --- END 23: test the 0 edge
2016-08-07 20:38:22,985 - INFO --- END 23: Search the right edge to remove. Found: (297, 299)
2016-08-07 20:38:22,985 - INFO --- BEGIN 23: Remove an F3, F4 or F5
2016-08-07 20:38:22,985 - DEBUG --- vertex_to_join_near_v1_on_the_face: 302
2016-08-07 20:38:22,986 - DEBUG --- vertex_to_join_near_v2_on_the_face: 302
2016-08-07 20:38:22,986 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 281
2016-08-07 20:38:22,986 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 298
2016-08-07 20:38:22,986 - DEBUG --- third_face_to_update: [(13, 281), (281, 297), (297, 302), (302, 303), (303, 35), (35, 13)]
2016-08-07 20:38:22,987 - DEBUG --- fourth_face_to_update: [(299, 298), (298, 304), (304, 305), (305, 266), (266, 363), (363, 24), (24, 303), (303, 302), (302, 299)]
2016-08-07 20:38:22,987 - INFO --- ariadne_step: [3, 297, 299, 302, 302, 281, 298]
2016-08-07 20:38:22,987 - INFO --- END 23: Remove an F3, F4 or F5
2016-08-07 20:38:22,987 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:23,049 - DEBUG --- END: check_regularity
2016-08-07 20:38:23,050 - INFO --- END 23: Main loop
2016-08-07 20:38:23,050 - INFO --- 
2016-08-07 20:38:23,050 - INFO --- BEGIN 24: Main loop
2016-08-07 20:38:23,050 - INFO --- BEGIN 24: Search the right edge to remove
2016-08-07 20:38:23,050 - DEBUG --- BEGIN 24: test the 0 edge
2016-08-07 20:38:23,051 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:23,051 - DEBUG --- edge_to_remove: (315, 318)
2016-08-07 20:38:23,051 - DEBUG --- rotated_edge_to_remove: (318, 315)
2016-08-07 20:38:23,051 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:23,051 - DEBUG --- f1: [(315, 318), (318, 319), (319, 315)]
2016-08-07 20:38:23,052 - DEBUG --- f2: [(317, 316), (316, 318), (318, 315), (315, 311), (311, 310), (310, 317)]
2016-08-07 20:38:23,052 - DEBUG --- edge_to_remove_on_f1: (315, 318)
2016-08-07 20:38:23,052 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:23,052 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:23,052 - DEBUG --- Temporary f1_plus_f2: [(315, 311), (311, 310), (310, 317), (317, 316), (316, 318), (318, 319), (319, 315)]
2016-08-07 20:38:23,053 - DEBUG --- f1_plus_f2: [(319, 311), (311, 310), (310, 317), (317, 316), (316, 319)]
2016-08-07 20:38:23,053 - DEBUG --- END: join_faces
2016-08-07 20:38:23,053 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:23,053 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:23,054 - DEBUG --- Edge to remove found :-) (315, 318)
2016-08-07 20:38:23,054 - DEBUG --- f1: [(315, 318), (318, 319), (319, 315)]
2016-08-07 20:38:23,054 - DEBUG --- f2: [(317, 316), (316, 318), (318, 315), (315, 311), (311, 310), (310, 317)]
2016-08-07 20:38:23,054 - DEBUG --- f1_plus_f2_temp: [(319, 311), (311, 310), (310, 317), (317, 316), (316, 319)]
2016-08-07 20:38:23,054 - DEBUG --- END 24: test the 0 edge
2016-08-07 20:38:23,055 - INFO --- END 24: Search the right edge to remove. Found: (315, 318)
2016-08-07 20:38:23,055 - INFO --- BEGIN 24: Remove an F3, F4 or F5
2016-08-07 20:38:23,055 - DEBUG --- vertex_to_join_near_v1_on_the_face: 319
2016-08-07 20:38:23,055 - DEBUG --- vertex_to_join_near_v2_on_the_face: 319
2016-08-07 20:38:23,055 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 311
2016-08-07 20:38:23,056 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 316
2016-08-07 20:38:23,056 - DEBUG --- third_face_to_update: [(308, 307), (307, 311), (311, 315), (315, 319), (319, 320), (320, 308)]
2016-08-07 20:38:23,056 - DEBUG --- fourth_face_to_update: [(320, 319), (319, 318), (318, 316), (316, 356), (356, 353), (353, 321), (321, 320)]
2016-08-07 20:38:23,056 - INFO --- ariadne_step: [3, 315, 318, 319, 319, 311, 316]
2016-08-07 20:38:23,057 - INFO --- END 24: Remove an F3, F4 or F5
2016-08-07 20:38:23,057 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:23,114 - DEBUG --- END: check_regularity
2016-08-07 20:38:23,114 - INFO --- END 24: Main loop
2016-08-07 20:38:23,114 - INFO --- 
2016-08-07 20:38:23,115 - INFO --- BEGIN 25: Main loop
2016-08-07 20:38:23,115 - INFO --- BEGIN 25: Search the right edge to remove
2016-08-07 20:38:23,115 - DEBUG --- BEGIN 25: test the 0 edge
2016-08-07 20:38:23,115 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:23,115 - DEBUG --- edge_to_remove: (36, 39)
2016-08-07 20:38:23,116 - DEBUG --- rotated_edge_to_remove: (39, 36)
2016-08-07 20:38:23,116 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:23,116 - DEBUG --- f1: [(36, 39), (39, 38), (38, 36)]
2016-08-07 20:38:23,116 - DEBUG --- f2: [(40, 42), (42, 43), (43, 39), (39, 36), (36, 30), (30, 31), (31, 40)]
2016-08-07 20:38:23,117 - DEBUG --- edge_to_remove_on_f1: (36, 39)
2016-08-07 20:38:23,117 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:23,117 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:23,117 - DEBUG --- Temporary f1_plus_f2: [(36, 30), (30, 31), (31, 40), (40, 42), (42, 43), (43, 39), (39, 38), (38, 36)]
2016-08-07 20:38:23,117 - DEBUG --- f1_plus_f2: [(38, 30), (30, 31), (31, 40), (40, 42), (42, 43), (43, 38)]
2016-08-07 20:38:23,118 - DEBUG --- END: join_faces
2016-08-07 20:38:23,118 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:23,118 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:23,118 - DEBUG --- Edge to remove found :-) (36, 39)
2016-08-07 20:38:23,118 - DEBUG --- f1: [(36, 39), (39, 38), (38, 36)]
2016-08-07 20:38:23,119 - DEBUG --- f2: [(40, 42), (42, 43), (43, 39), (39, 36), (36, 30), (30, 31), (31, 40)]
2016-08-07 20:38:23,119 - DEBUG --- f1_plus_f2_temp: [(38, 30), (30, 31), (31, 40), (40, 42), (42, 43), (43, 38)]
2016-08-07 20:38:23,119 - DEBUG --- END 25: test the 0 edge
2016-08-07 20:38:23,119 - INFO --- END 25: Search the right edge to remove. Found: (36, 39)
2016-08-07 20:38:23,120 - INFO --- BEGIN 25: Remove an F3, F4 or F5
2016-08-07 20:38:23,120 - DEBUG --- vertex_to_join_near_v1_on_the_face: 38
2016-08-07 20:38:23,120 - DEBUG --- vertex_to_join_near_v2_on_the_face: 38
2016-08-07 20:38:23,120 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 30
2016-08-07 20:38:23,120 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 43
2016-08-07 20:38:23,121 - DEBUG --- third_face_to_update: [(38, 37), (37, 34), (34, 29), (29, 30), (30, 36), (36, 38)]
2016-08-07 20:38:23,121 - DEBUG --- fourth_face_to_update: [(43, 44), (44, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 221), (221, 227), (227, 219), (219, 37), (37, 38), (38, 39), (39, 43)]
2016-08-07 20:38:23,121 - INFO --- ariadne_step: [3, 36, 39, 38, 38, 30, 43]
2016-08-07 20:38:23,121 - INFO --- END 25: Remove an F3, F4 or F5
2016-08-07 20:38:23,122 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:23,177 - DEBUG --- END: check_regularity
2016-08-07 20:38:23,178 - INFO --- END 25: Main loop
2016-08-07 20:38:23,178 - INFO --- 
2016-08-07 20:38:23,178 - INFO --- BEGIN 26: Main loop
2016-08-07 20:38:23,178 - INFO --- BEGIN 26: Search the right edge to remove
2016-08-07 20:38:23,178 - DEBUG --- BEGIN 26: test the 0 edge
2016-08-07 20:38:23,179 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:23,179 - DEBUG --- edge_to_remove: (251, 245)
2016-08-07 20:38:23,179 - DEBUG --- rotated_edge_to_remove: (245, 251)
2016-08-07 20:38:23,179 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:23,180 - DEBUG --- f1: [(251, 245), (245, 248), (248, 251)]
2016-08-07 20:38:23,180 - DEBUG --- f2: [(251, 250), (250, 238), (238, 237), (237, 245), (245, 251)]
2016-08-07 20:38:23,180 - DEBUG --- edge_to_remove_on_f1: (251, 245)
2016-08-07 20:38:23,180 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:23,180 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:23,181 - DEBUG --- Temporary f1_plus_f2: [(251, 250), (250, 238), (238, 237), (237, 245), (245, 248), (248, 251)]
2016-08-07 20:38:23,181 - DEBUG --- f1_plus_f2: [(248, 250), (250, 238), (238, 237), (237, 248)]
2016-08-07 20:38:23,181 - DEBUG --- END: join_faces
2016-08-07 20:38:23,181 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:23,181 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:23,182 - DEBUG --- Edge to remove found :-) (251, 245)
2016-08-07 20:38:23,182 - DEBUG --- f1: [(251, 245), (245, 248), (248, 251)]
2016-08-07 20:38:23,182 - DEBUG --- f2: [(251, 250), (250, 238), (238, 237), (237, 245), (245, 251)]
2016-08-07 20:38:23,182 - DEBUG --- f1_plus_f2_temp: [(248, 250), (250, 238), (238, 237), (237, 248)]
2016-08-07 20:38:23,182 - DEBUG --- END 26: test the 0 edge
2016-08-07 20:38:23,183 - INFO --- END 26: Search the right edge to remove. Found: (251, 245)
2016-08-07 20:38:23,183 - INFO --- BEGIN 26: Remove an F3, F4 or F5
2016-08-07 20:38:23,183 - DEBUG --- vertex_to_join_near_v1_on_the_face: 248
2016-08-07 20:38:23,183 - DEBUG --- vertex_to_join_near_v2_on_the_face: 248
2016-08-07 20:38:23,184 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 250
2016-08-07 20:38:23,184 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 237
2016-08-07 20:38:23,184 - DEBUG --- third_face_to_update: [(241, 250), (250, 251), (251, 248), (248, 247), (247, 253), (253, 252), (252, 242), (242, 241)]
2016-08-07 20:38:23,184 - DEBUG --- fourth_face_to_update: [(249, 247), (247, 248), (248, 245), (245, 237), (237, 236), (236, 243), (243, 249)]
2016-08-07 20:38:23,185 - INFO --- ariadne_step: [3, 251, 245, 248, 248, 250, 237]
2016-08-07 20:38:23,185 - INFO --- END 26: Remove an F3, F4 or F5
2016-08-07 20:38:23,185 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:23,241 - DEBUG --- END: check_regularity
2016-08-07 20:38:23,241 - INFO --- END 26: Main loop
2016-08-07 20:38:23,241 - INFO --- 
2016-08-07 20:38:23,241 - INFO --- BEGIN 27: Main loop
2016-08-07 20:38:23,242 - INFO --- BEGIN 27: Search the right edge to remove
2016-08-07 20:38:23,242 - DEBUG --- BEGIN 27: test the 0 edge
2016-08-07 20:38:23,242 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:23,242 - DEBUG --- edge_to_remove: (218, 220)
2016-08-07 20:38:23,242 - DEBUG --- rotated_edge_to_remove: (220, 218)
2016-08-07 20:38:23,243 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:23,243 - DEBUG --- f1: [(218, 220), (220, 216), (216, 218)]
2016-08-07 20:38:23,243 - DEBUG --- f2: [(164, 220), (220, 218), (218, 217), (217, 222), (222, 221), (221, 225), (225, 226), (226, 165), (165, 164)]
2016-08-07 20:38:23,243 - DEBUG --- edge_to_remove_on_f1: (218, 220)
2016-08-07 20:38:23,243 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:23,244 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:23,244 - DEBUG --- Temporary f1_plus_f2: [(218, 217), (217, 222), (222, 221), (221, 225), (225, 226), (226, 165), (165, 164), (164, 220), (220, 216), (216, 218)]
2016-08-07 20:38:23,244 - DEBUG --- f1_plus_f2: [(216, 217), (217, 222), (222, 221), (221, 225), (225, 226), (226, 165), (165, 164), (164, 216)]
2016-08-07 20:38:23,244 - DEBUG --- END: join_faces
2016-08-07 20:38:23,245 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:23,245 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:23,245 - DEBUG --- Edge to remove found :-) (218, 220)
2016-08-07 20:38:23,245 - DEBUG --- f1: [(218, 220), (220, 216), (216, 218)]
2016-08-07 20:38:23,245 - DEBUG --- f2: [(164, 220), (220, 218), (218, 217), (217, 222), (222, 221), (221, 225), (225, 226), (226, 165), (165, 164)]
2016-08-07 20:38:23,246 - DEBUG --- f1_plus_f2_temp: [(216, 217), (217, 222), (222, 221), (221, 225), (225, 226), (226, 165), (165, 164), (164, 216)]
2016-08-07 20:38:23,246 - DEBUG --- END 27: test the 0 edge
2016-08-07 20:38:23,246 - INFO --- END 27: Search the right edge to remove. Found: (218, 220)
2016-08-07 20:38:23,246 - INFO --- BEGIN 27: Remove an F3, F4 or F5
2016-08-07 20:38:23,246 - DEBUG --- vertex_to_join_near_v1_on_the_face: 216
2016-08-07 20:38:23,247 - DEBUG --- vertex_to_join_near_v2_on_the_face: 216
2016-08-07 20:38:23,247 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 217
2016-08-07 20:38:23,247 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 164
2016-08-07 20:38:23,248 - DEBUG --- third_face_to_update: [(342, 365), (365, 382), (382, 34), (34, 37), (37, 219), (219, 217), (217, 218), (218, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 323), (323, 190), (190, 290), (290, 336), (336, 342)]
2016-08-07 20:38:23,248 - DEBUG --- fourth_face_to_update: [(216, 220), (220, 164), (164, 163), (163, 215), (215, 216)]
2016-08-07 20:38:23,248 - INFO --- ariadne_step: [3, 218, 220, 216, 216, 217, 164]
2016-08-07 20:38:23,248 - INFO --- END 27: Remove an F3, F4 or F5
2016-08-07 20:38:23,248 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:23,303 - DEBUG --- END: check_regularity
2016-08-07 20:38:23,304 - INFO --- END 27: Main loop
2016-08-07 20:38:23,304 - INFO --- 
2016-08-07 20:38:23,304 - INFO --- BEGIN 28: Main loop
2016-08-07 20:38:23,304 - INFO --- BEGIN 28: Search the right edge to remove
2016-08-07 20:38:23,305 - DEBUG --- BEGIN 28: test the 0 edge
2016-08-07 20:38:23,305 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:23,305 - DEBUG --- edge_to_remove: (300, 304)
2016-08-07 20:38:23,305 - DEBUG --- rotated_edge_to_remove: (304, 300)
2016-08-07 20:38:23,305 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:23,306 - DEBUG --- f1: [(300, 304), (304, 298), (298, 300)]
2016-08-07 20:38:23,306 - DEBUG --- f2: [(304, 300), (300, 296), (296, 292), (292, 293), (293, 305), (305, 304)]
2016-08-07 20:38:23,306 - DEBUG --- edge_to_remove_on_f1: (300, 304)
2016-08-07 20:38:23,306 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:23,307 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:23,307 - DEBUG --- Temporary f1_plus_f2: [(300, 296), (296, 292), (292, 293), (293, 305), (305, 304), (304, 298), (298, 300)]
2016-08-07 20:38:23,307 - DEBUG --- f1_plus_f2: [(298, 296), (296, 292), (292, 293), (293, 305), (305, 298)]
2016-08-07 20:38:23,307 - DEBUG --- END: join_faces
2016-08-07 20:38:23,307 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:23,308 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:23,308 - DEBUG --- Edge to remove found :-) (300, 304)
2016-08-07 20:38:23,308 - DEBUG --- f1: [(300, 304), (304, 298), (298, 300)]
2016-08-07 20:38:23,308 - DEBUG --- f2: [(304, 300), (300, 296), (296, 292), (292, 293), (293, 305), (305, 304)]
2016-08-07 20:38:23,308 - DEBUG --- f1_plus_f2_temp: [(298, 296), (296, 292), (292, 293), (293, 305), (305, 298)]
2016-08-07 20:38:23,309 - DEBUG --- END 28: test the 0 edge
2016-08-07 20:38:23,309 - INFO --- END 28: Search the right edge to remove. Found: (300, 304)
2016-08-07 20:38:23,309 - INFO --- BEGIN 28: Remove an F3, F4 or F5
2016-08-07 20:38:23,309 - DEBUG --- vertex_to_join_near_v1_on_the_face: 298
2016-08-07 20:38:23,309 - DEBUG --- vertex_to_join_near_v2_on_the_face: 298
2016-08-07 20:38:23,310 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 296
2016-08-07 20:38:23,310 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 305
2016-08-07 20:38:23,310 - DEBUG --- third_face_to_update: [(302, 281), (281, 280), (280, 296), (296, 300), (300, 298), (298, 302)]
2016-08-07 20:38:23,311 - DEBUG --- fourth_face_to_update: [(302, 298), (298, 304), (304, 305), (305, 266), (266, 363), (363, 24), (24, 303), (303, 302)]
2016-08-07 20:38:23,311 - INFO --- ariadne_step: [3, 300, 304, 298, 298, 296, 305]
2016-08-07 20:38:23,311 - INFO --- END 28: Remove an F3, F4 or F5
2016-08-07 20:38:23,311 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:23,365 - DEBUG --- END: check_regularity
2016-08-07 20:38:23,366 - INFO --- END 28: Main loop
2016-08-07 20:38:23,366 - INFO --- 
2016-08-07 20:38:23,366 - INFO --- BEGIN 29: Main loop
2016-08-07 20:38:23,367 - INFO --- BEGIN 29: Search the right edge to remove
2016-08-07 20:38:23,367 - DEBUG --- BEGIN 29: test the 0 edge
2016-08-07 20:38:23,367 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:23,367 - DEBUG --- edge_to_remove: (369, 378)
2016-08-07 20:38:23,367 - DEBUG --- rotated_edge_to_remove: (378, 369)
2016-08-07 20:38:23,368 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:23,368 - DEBUG --- f1: [(369, 378), (378, 366), (366, 369)]
2016-08-07 20:38:23,368 - DEBUG --- f2: [(394, 393), (393, 395), (395, 379), (379, 378), (378, 369), (369, 368), (368, 391), (391, 392), (392, 394)]
2016-08-07 20:38:23,368 - DEBUG --- edge_to_remove_on_f1: (369, 378)
2016-08-07 20:38:23,368 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:23,369 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:23,369 - DEBUG --- Temporary f1_plus_f2: [(369, 368), (368, 391), (391, 392), (392, 394), (394, 393), (393, 395), (395, 379), (379, 378), (378, 366), (366, 369)]
2016-08-07 20:38:23,369 - DEBUG --- f1_plus_f2: [(366, 368), (368, 391), (391, 392), (392, 394), (394, 393), (393, 395), (395, 379), (379, 366)]
2016-08-07 20:38:23,369 - DEBUG --- END: join_faces
2016-08-07 20:38:23,370 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:23,370 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:23,370 - DEBUG --- Edge to remove found :-) (369, 378)
2016-08-07 20:38:23,370 - DEBUG --- f1: [(369, 378), (378, 366), (366, 369)]
2016-08-07 20:38:23,370 - DEBUG --- f2: [(394, 393), (393, 395), (395, 379), (379, 378), (378, 369), (369, 368), (368, 391), (391, 392), (392, 394)]
2016-08-07 20:38:23,371 - DEBUG --- f1_plus_f2_temp: [(366, 368), (368, 391), (391, 392), (392, 394), (394, 393), (393, 395), (395, 379), (379, 366)]
2016-08-07 20:38:23,371 - DEBUG --- END 29: test the 0 edge
2016-08-07 20:38:23,371 - INFO --- END 29: Search the right edge to remove. Found: (369, 378)
2016-08-07 20:38:23,371 - INFO --- BEGIN 29: Remove an F3, F4 or F5
2016-08-07 20:38:23,371 - DEBUG --- vertex_to_join_near_v1_on_the_face: 366
2016-08-07 20:38:23,372 - DEBUG --- vertex_to_join_near_v2_on_the_face: 366
2016-08-07 20:38:23,372 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 368
2016-08-07 20:38:23,372 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 379
2016-08-07 20:38:23,372 - DEBUG --- third_face_to_update: [(324, 375), (375, 373), (373, 46), (46, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 369), (369, 366), (366, 367), (367, 361), (361, 348), (348, 349), (349, 324)]
2016-08-07 20:38:23,373 - DEBUG --- fourth_face_to_update: [(365, 360), (360, 377), (377, 367), (367, 366), (366, 378), (378, 379), (379, 380), (380, 381), (381, 382), (382, 365)]
2016-08-07 20:38:23,373 - INFO --- ariadne_step: [3, 369, 378, 366, 366, 368, 379]
2016-08-07 20:38:23,373 - INFO --- END 29: Remove an F3, F4 or F5
2016-08-07 20:38:23,373 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:23,427 - DEBUG --- END: check_regularity
2016-08-07 20:38:23,427 - INFO --- END 29: Main loop
2016-08-07 20:38:23,427 - INFO --- 
2016-08-07 20:38:23,428 - INFO --- BEGIN 30: Main loop
2016-08-07 20:38:23,428 - INFO --- BEGIN 30: Search the right edge to remove
2016-08-07 20:38:23,428 - DEBUG --- BEGIN 30: test the 0 edge
2016-08-07 20:38:23,428 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:23,428 - DEBUG --- edge_to_remove: (303, 24)
2016-08-07 20:38:23,429 - DEBUG --- rotated_edge_to_remove: (24, 303)
2016-08-07 20:38:23,429 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:23,429 - DEBUG --- f1: [(303, 24), (24, 35), (35, 303)]
2016-08-07 20:38:23,429 - DEBUG --- f2: [(302, 298), (298, 305), (305, 266), (266, 363), (363, 24), (24, 303), (303, 302)]
2016-08-07 20:38:23,429 - DEBUG --- edge_to_remove_on_f1: (303, 24)
2016-08-07 20:38:23,430 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:23,430 - DEBUG --- index_of_edge_to_remove_on_f2: 5
2016-08-07 20:38:23,430 - DEBUG --- Temporary f1_plus_f2: [(303, 302), (302, 298), (298, 305), (305, 266), (266, 363), (363, 24), (24, 35), (35, 303)]
2016-08-07 20:38:23,430 - DEBUG --- f1_plus_f2: [(35, 302), (302, 298), (298, 305), (305, 266), (266, 363), (363, 35)]
2016-08-07 20:38:23,430 - DEBUG --- END: join_faces
2016-08-07 20:38:23,431 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:23,431 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:23,431 - DEBUG --- Edge to remove found :-) (303, 24)
2016-08-07 20:38:23,431 - DEBUG --- f1: [(303, 24), (24, 35), (35, 303)]
2016-08-07 20:38:23,432 - DEBUG --- f2: [(302, 298), (298, 305), (305, 266), (266, 363), (363, 24), (24, 303), (303, 302)]
2016-08-07 20:38:23,432 - DEBUG --- f1_plus_f2_temp: [(35, 302), (302, 298), (298, 305), (305, 266), (266, 363), (363, 35)]
2016-08-07 20:38:23,432 - DEBUG --- END 30: test the 0 edge
2016-08-07 20:38:23,432 - INFO --- END 30: Search the right edge to remove. Found: (303, 24)
2016-08-07 20:38:23,432 - INFO --- BEGIN 30: Remove an F3, F4 or F5
2016-08-07 20:38:23,433 - DEBUG --- vertex_to_join_near_v1_on_the_face: 35
2016-08-07 20:38:23,433 - DEBUG --- vertex_to_join_near_v2_on_the_face: 35
2016-08-07 20:38:23,433 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 302
2016-08-07 20:38:23,433 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 363
2016-08-07 20:38:23,434 - DEBUG --- third_face_to_update: [(13, 281), (281, 302), (302, 303), (303, 35), (35, 13)]
2016-08-07 20:38:23,434 - DEBUG --- fourth_face_to_update: [(363, 341), (341, 352), (352, 46), (46, 223), (223, 0), (0, 2), (2, 374), (374, 13), (13, 35), (35, 24), (24, 363)]
2016-08-07 20:38:23,434 - INFO --- ariadne_step: [3, 303, 24, 35, 35, 302, 363]
2016-08-07 20:38:23,434 - INFO --- END 30: Remove an F3, F4 or F5
2016-08-07 20:38:23,434 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:23,487 - DEBUG --- END: check_regularity
2016-08-07 20:38:23,488 - INFO --- END 30: Main loop
2016-08-07 20:38:23,488 - INFO --- 
2016-08-07 20:38:23,488 - INFO --- BEGIN 31: Main loop
2016-08-07 20:38:23,489 - INFO --- BEGIN 31: Search the right edge to remove
2016-08-07 20:38:23,489 - DEBUG --- BEGIN 31: test the 0 edge
2016-08-07 20:38:23,489 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:23,489 - DEBUG --- edge_to_remove: (325, 357)
2016-08-07 20:38:23,489 - DEBUG --- rotated_edge_to_remove: (357, 325)
2016-08-07 20:38:23,490 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:23,490 - DEBUG --- f1: [(325, 357), (357, 358), (358, 325)]
2016-08-07 20:38:23,490 - DEBUG --- f2: [(324, 349), (349, 357), (357, 325), (325, 324)]
2016-08-07 20:38:23,490 - DEBUG --- edge_to_remove_on_f1: (325, 357)
2016-08-07 20:38:23,490 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:23,491 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:23,491 - DEBUG --- Temporary f1_plus_f2: [(325, 324), (324, 349), (349, 357), (357, 358), (358, 325)]
2016-08-07 20:38:23,491 - DEBUG --- f1_plus_f2: [(358, 324), (324, 349), (349, 358)]
2016-08-07 20:38:23,491 - DEBUG --- END: join_faces
2016-08-07 20:38:23,492 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:23,492 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:23,492 - DEBUG --- Edge to remove found :-) (325, 357)
2016-08-07 20:38:23,492 - DEBUG --- f1: [(325, 357), (357, 358), (358, 325)]
2016-08-07 20:38:23,492 - DEBUG --- f2: [(324, 349), (349, 357), (357, 325), (325, 324)]
2016-08-07 20:38:23,493 - DEBUG --- f1_plus_f2_temp: [(358, 324), (324, 349), (349, 358)]
2016-08-07 20:38:23,493 - DEBUG --- END 31: test the 0 edge
2016-08-07 20:38:23,493 - INFO --- END 31: Search the right edge to remove. Found: (325, 357)
2016-08-07 20:38:23,493 - INFO --- BEGIN 31: Remove an F3, F4 or F5
2016-08-07 20:38:23,494 - DEBUG --- vertex_to_join_near_v1_on_the_face: 358
2016-08-07 20:38:23,494 - DEBUG --- vertex_to_join_near_v2_on_the_face: 358
2016-08-07 20:38:23,494 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 324
2016-08-07 20:38:23,494 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 349
2016-08-07 20:38:23,495 - DEBUG --- third_face_to_update: [(375, 324), (324, 325), (325, 358), (358, 356), (356, 316), (316, 317), (317, 326), (326, 327), (327, 375)]
2016-08-07 20:38:23,495 - DEBUG --- fourth_face_to_update: [(124, 351), (351, 354), (354, 355), (355, 353), (353, 356), (356, 358), (358, 357), (357, 349), (349, 348), (348, 340), (340, 347), (347, 101), (101, 124)]
2016-08-07 20:38:23,495 - INFO --- ariadne_step: [3, 325, 357, 358, 358, 324, 349]
2016-08-07 20:38:23,496 - INFO --- END 31: Remove an F3, F4 or F5
2016-08-07 20:38:23,496 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:23,548 - DEBUG --- END: check_regularity
2016-08-07 20:38:23,548 - INFO --- END 31: Main loop
2016-08-07 20:38:23,548 - INFO --- 
2016-08-07 20:38:23,549 - INFO --- BEGIN 32: Main loop
2016-08-07 20:38:23,549 - INFO --- BEGIN 32: Search the right edge to remove
2016-08-07 20:38:23,549 - DEBUG --- BEGIN 32: test the 0 edge
2016-08-07 20:38:23,549 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:23,550 - DEBUG --- edge_to_remove: (279, 346)
2016-08-07 20:38:23,550 - DEBUG --- rotated_edge_to_remove: (346, 279)
2016-08-07 20:38:23,550 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:23,550 - DEBUG --- f1: [(279, 346), (346, 257), (257, 279)]
2016-08-07 20:38:23,550 - DEBUG --- f2: [(346, 279), (279, 268), (268, 337), (337, 346)]
2016-08-07 20:38:23,551 - DEBUG --- edge_to_remove_on_f1: (279, 346)
2016-08-07 20:38:23,551 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:23,551 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:23,551 - DEBUG --- Temporary f1_plus_f2: [(279, 268), (268, 337), (337, 346), (346, 257), (257, 279)]
2016-08-07 20:38:23,551 - DEBUG --- f1_plus_f2: [(257, 268), (268, 337), (337, 257)]
2016-08-07 20:38:23,552 - DEBUG --- END: join_faces
2016-08-07 20:38:23,552 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:23,552 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:23,552 - DEBUG --- Edge to remove found :-) (279, 346)
2016-08-07 20:38:23,552 - DEBUG --- f1: [(279, 346), (346, 257), (257, 279)]
2016-08-07 20:38:23,553 - DEBUG --- f2: [(346, 279), (279, 268), (268, 337), (337, 346)]
2016-08-07 20:38:23,553 - DEBUG --- f1_plus_f2_temp: [(257, 268), (268, 337), (337, 257)]
2016-08-07 20:38:23,553 - DEBUG --- END 32: test the 0 edge
2016-08-07 20:38:23,553 - INFO --- END 32: Search the right edge to remove. Found: (279, 346)
2016-08-07 20:38:23,553 - INFO --- BEGIN 32: Remove an F3, F4 or F5
2016-08-07 20:38:23,553 - DEBUG --- vertex_to_join_near_v1_on_the_face: 257
2016-08-07 20:38:23,554 - DEBUG --- vertex_to_join_near_v2_on_the_face: 257
2016-08-07 20:38:23,554 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 268
2016-08-07 20:38:23,554 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 337
2016-08-07 20:38:23,555 - DEBUG --- third_face_to_update: [(301, 146), (146, 135), (135, 235), (235, 224), (224, 212), (212, 268), (268, 279), (279, 257), (257, 290), (290, 190), (190, 301)]
2016-08-07 20:38:23,555 - DEBUG --- fourth_face_to_update: [(290, 257), (257, 346), (346, 337), (337, 336), (336, 290)]
2016-08-07 20:38:23,555 - INFO --- ariadne_step: [3, 279, 346, 257, 257, 268, 337]
2016-08-07 20:38:23,555 - INFO --- END 32: Remove an F3, F4 or F5
2016-08-07 20:38:23,555 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:23,607 - DEBUG --- END: check_regularity
2016-08-07 20:38:23,607 - INFO --- END 32: Main loop
2016-08-07 20:38:23,607 - INFO --- 
2016-08-07 20:38:23,608 - INFO --- BEGIN 33: Main loop
2016-08-07 20:38:23,608 - INFO --- BEGIN 33: Search the right edge to remove
2016-08-07 20:38:23,608 - DEBUG --- BEGIN 33: test the 0 edge
2016-08-07 20:38:23,608 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:23,609 - DEBUG --- edge_to_remove: (22, 26)
2016-08-07 20:38:23,609 - DEBUG --- rotated_edge_to_remove: (26, 22)
2016-08-07 20:38:23,609 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:23,609 - DEBUG --- f1: [(22, 26), (26, 21), (21, 22)]
2016-08-07 20:38:23,610 - DEBUG --- f2: [(9, 26), (26, 22), (22, 20), (20, 23), (23, 11), (11, 9)]
2016-08-07 20:38:23,610 - DEBUG --- edge_to_remove_on_f1: (22, 26)
2016-08-07 20:38:23,610 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:23,610 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:23,611 - DEBUG --- Temporary f1_plus_f2: [(22, 20), (20, 23), (23, 11), (11, 9), (9, 26), (26, 21), (21, 22)]
2016-08-07 20:38:23,611 - DEBUG --- f1_plus_f2: [(21, 20), (20, 23), (23, 11), (11, 9), (9, 21)]
2016-08-07 20:38:23,611 - DEBUG --- END: join_faces
2016-08-07 20:38:23,611 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:23,611 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:23,612 - DEBUG --- Edge to remove found :-) (22, 26)
2016-08-07 20:38:23,612 - DEBUG --- f1: [(22, 26), (26, 21), (21, 22)]
2016-08-07 20:38:23,612 - DEBUG --- f2: [(9, 26), (26, 22), (22, 20), (20, 23), (23, 11), (11, 9)]
2016-08-07 20:38:23,612 - DEBUG --- f1_plus_f2_temp: [(21, 20), (20, 23), (23, 11), (11, 9), (9, 21)]
2016-08-07 20:38:23,612 - DEBUG --- END 33: test the 0 edge
2016-08-07 20:38:23,613 - INFO --- END 33: Search the right edge to remove. Found: (22, 26)
2016-08-07 20:38:23,613 - INFO --- BEGIN 33: Remove an F3, F4 or F5
2016-08-07 20:38:23,613 - DEBUG --- vertex_to_join_near_v1_on_the_face: 21
2016-08-07 20:38:23,613 - DEBUG --- vertex_to_join_near_v2_on_the_face: 21
2016-08-07 20:38:23,613 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 20
2016-08-07 20:38:23,614 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 9
2016-08-07 20:38:23,614 - DEBUG --- third_face_to_update: [(10, 8), (8, 16), (16, 19), (19, 20), (20, 22), (22, 21), (21, 10)]
2016-08-07 20:38:23,614 - DEBUG --- fourth_face_to_update: [(10, 21), (21, 26), (26, 9), (9, 10)]
2016-08-07 20:38:23,614 - INFO --- ariadne_step: [3, 22, 26, 21, 21, 20, 9]
2016-08-07 20:38:23,615 - INFO --- END 33: Remove an F3, F4 or F5
2016-08-07 20:38:23,615 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:23,665 - DEBUG --- END: check_regularity
2016-08-07 20:38:23,666 - INFO --- END 33: Main loop
2016-08-07 20:38:23,666 - INFO --- 
2016-08-07 20:38:23,666 - INFO --- BEGIN 34: Main loop
2016-08-07 20:38:23,667 - INFO --- BEGIN 34: Search the right edge to remove
2016-08-07 20:38:23,667 - DEBUG --- BEGIN 34: test the 0 edge
2016-08-07 20:38:23,667 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:23,667 - DEBUG --- edge_to_remove: (227, 221)
2016-08-07 20:38:23,667 - DEBUG --- rotated_edge_to_remove: (221, 227)
2016-08-07 20:38:23,668 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:23,668 - DEBUG --- f1: [(227, 221), (221, 222), (222, 227)]
2016-08-07 20:38:23,668 - DEBUG --- f2: [(43, 44), (44, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 221), (221, 227), (227, 219), (219, 37), (37, 38), (38, 43)]
2016-08-07 20:38:23,668 - DEBUG --- edge_to_remove_on_f1: (227, 221)
2016-08-07 20:38:23,669 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:23,669 - DEBUG --- index_of_edge_to_remove_on_f2: 8
2016-08-07 20:38:23,669 - DEBUG --- Temporary f1_plus_f2: [(227, 219), (219, 37), (37, 38), (38, 43), (43, 44), (44, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 221), (221, 222), (222, 227)]
2016-08-07 20:38:23,669 - DEBUG --- f1_plus_f2: [(222, 219), (219, 37), (37, 38), (38, 43), (43, 44), (44, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 222)]
2016-08-07 20:38:23,669 - DEBUG --- END: join_faces
2016-08-07 20:38:23,670 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:23,670 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:23,670 - DEBUG --- Edge to remove found :-) (227, 221)
2016-08-07 20:38:23,670 - DEBUG --- f1: [(227, 221), (221, 222), (222, 227)]
2016-08-07 20:38:23,670 - DEBUG --- f2: [(43, 44), (44, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 221), (221, 227), (227, 219), (219, 37), (37, 38), (38, 43)]
2016-08-07 20:38:23,671 - DEBUG --- f1_plus_f2_temp: [(222, 219), (219, 37), (37, 38), (38, 43), (43, 44), (44, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 222)]
2016-08-07 20:38:23,671 - DEBUG --- END 34: test the 0 edge
2016-08-07 20:38:23,671 - INFO --- END 34: Search the right edge to remove. Found: (227, 221)
2016-08-07 20:38:23,671 - INFO --- BEGIN 34: Remove an F3, F4 or F5
2016-08-07 20:38:23,671 - DEBUG --- vertex_to_join_near_v1_on_the_face: 222
2016-08-07 20:38:23,672 - DEBUG --- vertex_to_join_near_v2_on_the_face: 222
2016-08-07 20:38:23,672 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 219
2016-08-07 20:38:23,672 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 225
2016-08-07 20:38:23,672 - DEBUG --- third_face_to_update: [(219, 227), (227, 222), (222, 217), (217, 219)]
2016-08-07 20:38:23,673 - DEBUG --- fourth_face_to_update: [(216, 217), (217, 222), (222, 221), (221, 225), (225, 226), (226, 165), (165, 164), (164, 216)]
2016-08-07 20:38:23,673 - INFO --- ariadne_step: [3, 227, 221, 222, 222, 219, 225]
2016-08-07 20:38:23,673 - INFO --- END 34: Remove an F3, F4 or F5
2016-08-07 20:38:23,673 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:23,724 - DEBUG --- END: check_regularity
2016-08-07 20:38:23,724 - INFO --- END 34: Main loop
2016-08-07 20:38:23,724 - INFO --- 
2016-08-07 20:38:23,725 - INFO --- BEGIN 35: Main loop
2016-08-07 20:38:23,725 - INFO --- BEGIN 35: Search the right edge to remove
2016-08-07 20:38:23,725 - DEBUG --- BEGIN 35: test the 0 edge
2016-08-07 20:38:23,725 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:23,725 - DEBUG --- edge_to_remove: (109, 111)
2016-08-07 20:38:23,726 - DEBUG --- rotated_edge_to_remove: (111, 109)
2016-08-07 20:38:23,726 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:23,726 - DEBUG --- f1: [(109, 111), (111, 143), (143, 109)]
2016-08-07 20:38:23,726 - DEBUG --- f2: [(106, 110), (110, 111), (111, 109), (109, 107), (107, 70), (70, 59), (59, 61), (61, 106)]
2016-08-07 20:38:23,727 - DEBUG --- edge_to_remove_on_f1: (109, 111)
2016-08-07 20:38:23,727 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:23,727 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:23,727 - DEBUG --- Temporary f1_plus_f2: [(109, 107), (107, 70), (70, 59), (59, 61), (61, 106), (106, 110), (110, 111), (111, 143), (143, 109)]
2016-08-07 20:38:23,727 - DEBUG --- f1_plus_f2: [(143, 107), (107, 70), (70, 59), (59, 61), (61, 106), (106, 110), (110, 143)]
2016-08-07 20:38:23,728 - DEBUG --- END: join_faces
2016-08-07 20:38:23,728 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:23,728 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:23,728 - DEBUG --- Edge to remove found :-) (109, 111)
2016-08-07 20:38:23,728 - DEBUG --- f1: [(109, 111), (111, 143), (143, 109)]
2016-08-07 20:38:23,729 - DEBUG --- f2: [(106, 110), (110, 111), (111, 109), (109, 107), (107, 70), (70, 59), (59, 61), (61, 106)]
2016-08-07 20:38:23,729 - DEBUG --- f1_plus_f2_temp: [(143, 107), (107, 70), (70, 59), (59, 61), (61, 106), (106, 110), (110, 143)]
2016-08-07 20:38:23,729 - DEBUG --- END 35: test the 0 edge
2016-08-07 20:38:23,729 - INFO --- END 35: Search the right edge to remove. Found: (109, 111)
2016-08-07 20:38:23,729 - INFO --- BEGIN 35: Remove an F3, F4 or F5
2016-08-07 20:38:23,730 - DEBUG --- vertex_to_join_near_v1_on_the_face: 143
2016-08-07 20:38:23,730 - DEBUG --- vertex_to_join_near_v2_on_the_face: 143
2016-08-07 20:38:23,730 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 107
2016-08-07 20:38:23,730 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 110
2016-08-07 20:38:23,731 - DEBUG --- third_face_to_update: [(144, 116), (116, 107), (107, 109), (109, 143), (143, 140), (140, 139), (139, 144)]
2016-08-07 20:38:23,731 - DEBUG --- fourth_face_to_update: [(111, 110), (110, 140), (140, 143), (143, 111)]
2016-08-07 20:38:23,731 - INFO --- ariadne_step: [3, 109, 111, 143, 143, 107, 110]
2016-08-07 20:38:23,731 - INFO --- END 35: Remove an F3, F4 or F5
2016-08-07 20:38:23,731 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:23,781 - DEBUG --- END: check_regularity
2016-08-07 20:38:23,781 - INFO --- END 35: Main loop
2016-08-07 20:38:23,782 - INFO --- 
2016-08-07 20:38:23,782 - INFO --- BEGIN 36: Main loop
2016-08-07 20:38:23,782 - INFO --- BEGIN 36: Search the right edge to remove
2016-08-07 20:38:23,782 - DEBUG --- BEGIN 36: test the 0 edge
2016-08-07 20:38:23,783 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:23,783 - DEBUG --- edge_to_remove: (149, 151)
2016-08-07 20:38:23,783 - DEBUG --- rotated_edge_to_remove: (151, 149)
2016-08-07 20:38:23,783 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:23,783 - DEBUG --- f1: [(149, 151), (151, 153), (153, 149)]
2016-08-07 20:38:23,784 - DEBUG --- f2: [(148, 147), (147, 145), (145, 142), (142, 141), (141, 152), (152, 150), (150, 151), (151, 149), (149, 148)]
2016-08-07 20:38:23,784 - DEBUG --- edge_to_remove_on_f1: (149, 151)
2016-08-07 20:38:23,784 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:23,784 - DEBUG --- index_of_edge_to_remove_on_f2: 7
2016-08-07 20:38:23,784 - DEBUG --- Temporary f1_plus_f2: [(149, 148), (148, 147), (147, 145), (145, 142), (142, 141), (141, 152), (152, 150), (150, 151), (151, 153), (153, 149)]
2016-08-07 20:38:23,785 - DEBUG --- f1_plus_f2: [(153, 148), (148, 147), (147, 145), (145, 142), (142, 141), (141, 152), (152, 150), (150, 153)]
2016-08-07 20:38:23,785 - DEBUG --- END: join_faces
2016-08-07 20:38:23,785 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:23,785 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:23,786 - DEBUG --- Edge to remove found :-) (149, 151)
2016-08-07 20:38:23,786 - DEBUG --- f1: [(149, 151), (151, 153), (153, 149)]
2016-08-07 20:38:23,786 - DEBUG --- f2: [(148, 147), (147, 145), (145, 142), (142, 141), (141, 152), (152, 150), (150, 151), (151, 149), (149, 148)]
2016-08-07 20:38:23,786 - DEBUG --- f1_plus_f2_temp: [(153, 148), (148, 147), (147, 145), (145, 142), (142, 141), (141, 152), (152, 150), (150, 153)]
2016-08-07 20:38:23,786 - DEBUG --- END 36: test the 0 edge
2016-08-07 20:38:23,787 - INFO --- END 36: Search the right edge to remove. Found: (149, 151)
2016-08-07 20:38:23,787 - INFO --- BEGIN 36: Remove an F3, F4 or F5
2016-08-07 20:38:23,787 - DEBUG --- vertex_to_join_near_v1_on_the_face: 153
2016-08-07 20:38:23,787 - DEBUG --- vertex_to_join_near_v2_on_the_face: 153
2016-08-07 20:38:23,788 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 148
2016-08-07 20:38:23,788 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 150
2016-08-07 20:38:23,788 - DEBUG --- third_face_to_update: [(118, 148), (148, 149), (149, 153), (153, 119), (119, 118)]
2016-08-07 20:38:23,789 - DEBUG --- fourth_face_to_update: [(153, 151), (151, 150), (150, 158), (158, 156), (156, 155), (155, 154), (154, 125), (125, 114), (114, 119), (119, 153)]
2016-08-07 20:38:23,789 - INFO --- ariadne_step: [3, 149, 151, 153, 153, 148, 150]
2016-08-07 20:38:23,789 - INFO --- END 36: Remove an F3, F4 or F5
2016-08-07 20:38:23,790 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:23,838 - DEBUG --- END: check_regularity
2016-08-07 20:38:23,838 - INFO --- END 36: Main loop
2016-08-07 20:38:23,839 - INFO --- 
2016-08-07 20:38:23,839 - INFO --- BEGIN 37: Main loop
2016-08-07 20:38:23,839 - INFO --- BEGIN 37: Search the right edge to remove
2016-08-07 20:38:23,839 - DEBUG --- BEGIN 37: test the 0 edge
2016-08-07 20:38:23,840 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:23,840 - DEBUG --- edge_to_remove: (202, 206)
2016-08-07 20:38:23,840 - DEBUG --- rotated_edge_to_remove: (206, 202)
2016-08-07 20:38:23,840 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:23,840 - DEBUG --- f1: [(202, 206), (206, 200), (200, 202)]
2016-08-07 20:38:23,841 - DEBUG --- f2: [(208, 206), (206, 202), (202, 197), (197, 198), (198, 180), (180, 207), (207, 203), (203, 208)]
2016-08-07 20:38:23,841 - DEBUG --- edge_to_remove_on_f1: (202, 206)
2016-08-07 20:38:23,841 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:23,841 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:23,841 - DEBUG --- Temporary f1_plus_f2: [(202, 197), (197, 198), (198, 180), (180, 207), (207, 203), (203, 208), (208, 206), (206, 200), (200, 202)]
2016-08-07 20:38:23,842 - DEBUG --- f1_plus_f2: [(200, 197), (197, 198), (198, 180), (180, 207), (207, 203), (203, 208), (208, 200)]
2016-08-07 20:38:23,842 - DEBUG --- END: join_faces
2016-08-07 20:38:23,842 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:23,842 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:23,842 - DEBUG --- Edge to remove found :-) (202, 206)
2016-08-07 20:38:23,843 - DEBUG --- f1: [(202, 206), (206, 200), (200, 202)]
2016-08-07 20:38:23,843 - DEBUG --- f2: [(208, 206), (206, 202), (202, 197), (197, 198), (198, 180), (180, 207), (207, 203), (203, 208)]
2016-08-07 20:38:23,843 - DEBUG --- f1_plus_f2_temp: [(200, 197), (197, 198), (198, 180), (180, 207), (207, 203), (203, 208), (208, 200)]
2016-08-07 20:38:23,843 - DEBUG --- END 37: test the 0 edge
2016-08-07 20:38:23,844 - INFO --- END 37: Search the right edge to remove. Found: (202, 206)
2016-08-07 20:38:23,844 - INFO --- BEGIN 37: Remove an F3, F4 or F5
2016-08-07 20:38:23,844 - DEBUG --- vertex_to_join_near_v1_on_the_face: 200
2016-08-07 20:38:23,844 - DEBUG --- vertex_to_join_near_v2_on_the_face: 200
2016-08-07 20:38:23,844 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 197
2016-08-07 20:38:23,845 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 208
2016-08-07 20:38:23,845 - DEBUG --- third_face_to_update: [(174, 196), (196, 197), (197, 202), (202, 200), (200, 199), (199, 176), (176, 174)]
2016-08-07 20:38:23,845 - DEBUG --- fourth_face_to_update: [(208, 199), (199, 200), (200, 206), (206, 208)]
2016-08-07 20:38:23,845 - INFO --- ariadne_step: [3, 202, 206, 200, 200, 197, 208]
2016-08-07 20:38:23,846 - INFO --- END 37: Remove an F3, F4 or F5
2016-08-07 20:38:23,846 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:23,895 - DEBUG --- END: check_regularity
2016-08-07 20:38:23,896 - INFO --- END 37: Main loop
2016-08-07 20:38:23,896 - INFO --- 
2016-08-07 20:38:23,896 - INFO --- BEGIN 38: Main loop
2016-08-07 20:38:23,896 - INFO --- BEGIN 38: Search the right edge to remove
2016-08-07 20:38:23,897 - DEBUG --- BEGIN 38: test the 0 edge
2016-08-07 20:38:23,897 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:23,897 - DEBUG --- edge_to_remove: (85, 67)
2016-08-07 20:38:23,897 - DEBUG --- rotated_edge_to_remove: (67, 85)
2016-08-07 20:38:23,898 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:23,898 - DEBUG --- f1: [(85, 67), (67, 69), (69, 85)]
2016-08-07 20:38:23,898 - DEBUG --- f2: [(85, 81), (81, 88), (88, 87), (87, 86), (86, 66), (66, 67), (67, 85)]
2016-08-07 20:38:23,898 - DEBUG --- edge_to_remove_on_f1: (85, 67)
2016-08-07 20:38:23,899 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:23,899 - DEBUG --- index_of_edge_to_remove_on_f2: 6
2016-08-07 20:38:23,899 - DEBUG --- Temporary f1_plus_f2: [(85, 81), (81, 88), (88, 87), (87, 86), (86, 66), (66, 67), (67, 69), (69, 85)]
2016-08-07 20:38:23,899 - DEBUG --- f1_plus_f2: [(69, 81), (81, 88), (88, 87), (87, 86), (86, 66), (66, 69)]
2016-08-07 20:38:23,899 - DEBUG --- END: join_faces
2016-08-07 20:38:23,900 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:23,900 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:23,900 - DEBUG --- Edge to remove found :-) (85, 67)
2016-08-07 20:38:23,900 - DEBUG --- f1: [(85, 67), (67, 69), (69, 85)]
2016-08-07 20:38:23,900 - DEBUG --- f2: [(85, 81), (81, 88), (88, 87), (87, 86), (86, 66), (66, 67), (67, 85)]
2016-08-07 20:38:23,901 - DEBUG --- f1_plus_f2_temp: [(69, 81), (81, 88), (88, 87), (87, 86), (86, 66), (66, 69)]
2016-08-07 20:38:23,901 - DEBUG --- END 38: test the 0 edge
2016-08-07 20:38:23,901 - INFO --- END 38: Search the right edge to remove. Found: (85, 67)
2016-08-07 20:38:23,901 - INFO --- BEGIN 38: Remove an F3, F4 or F5
2016-08-07 20:38:23,901 - DEBUG --- vertex_to_join_near_v1_on_the_face: 69
2016-08-07 20:38:23,902 - DEBUG --- vertex_to_join_near_v2_on_the_face: 69
2016-08-07 20:38:23,902 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 81
2016-08-07 20:38:23,902 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 66
2016-08-07 20:38:23,902 - DEBUG --- third_face_to_update: [(84, 83), (83, 81), (81, 85), (85, 69), (69, 65), (65, 73), (73, 80), (80, 82), (82, 84)]
2016-08-07 20:38:23,903 - DEBUG --- fourth_face_to_update: [(66, 72), (72, 71), (71, 63), (63, 59), (59, 70), (70, 64), (64, 65), (65, 69), (69, 67), (67, 66)]
2016-08-07 20:38:23,903 - INFO --- ariadne_step: [3, 85, 67, 69, 69, 81, 66]
2016-08-07 20:38:23,903 - INFO --- END 38: Remove an F3, F4 or F5
2016-08-07 20:38:23,903 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:23,953 - DEBUG --- END: check_regularity
2016-08-07 20:38:23,953 - INFO --- END 38: Main loop
2016-08-07 20:38:23,954 - INFO --- 
2016-08-07 20:38:23,954 - INFO --- BEGIN 39: Main loop
2016-08-07 20:38:23,954 - INFO --- BEGIN 39: Search the right edge to remove
2016-08-07 20:38:23,954 - DEBUG --- BEGIN 39: test the 0 edge
2016-08-07 20:38:23,955 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:23,955 - DEBUG --- edge_to_remove: (203, 207)
2016-08-07 20:38:23,955 - DEBUG --- rotated_edge_to_remove: (207, 203)
2016-08-07 20:38:23,955 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:23,956 - DEBUG --- f1: [(203, 207), (207, 177), (177, 203)]
2016-08-07 20:38:23,956 - DEBUG --- f2: [(200, 197), (197, 198), (198, 180), (180, 207), (207, 203), (203, 208), (208, 200)]
2016-08-07 20:38:23,956 - DEBUG --- edge_to_remove_on_f1: (203, 207)
2016-08-07 20:38:23,956 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:23,956 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:23,957 - DEBUG --- Temporary f1_plus_f2: [(203, 208), (208, 200), (200, 197), (197, 198), (198, 180), (180, 207), (207, 177), (177, 203)]
2016-08-07 20:38:23,957 - DEBUG --- f1_plus_f2: [(177, 208), (208, 200), (200, 197), (197, 198), (198, 180), (180, 177)]
2016-08-07 20:38:23,957 - DEBUG --- END: join_faces
2016-08-07 20:38:23,957 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:23,957 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:23,958 - DEBUG --- Edge to remove found :-) (203, 207)
2016-08-07 20:38:23,958 - DEBUG --- f1: [(203, 207), (207, 177), (177, 203)]
2016-08-07 20:38:23,958 - DEBUG --- f2: [(200, 197), (197, 198), (198, 180), (180, 207), (207, 203), (203, 208), (208, 200)]
2016-08-07 20:38:23,958 - DEBUG --- f1_plus_f2_temp: [(177, 208), (208, 200), (200, 197), (197, 198), (198, 180), (180, 177)]
2016-08-07 20:38:23,959 - DEBUG --- END 39: test the 0 edge
2016-08-07 20:38:23,959 - INFO --- END 39: Search the right edge to remove. Found: (203, 207)
2016-08-07 20:38:23,959 - INFO --- BEGIN 39: Remove an F3, F4 or F5
2016-08-07 20:38:23,959 - DEBUG --- vertex_to_join_near_v1_on_the_face: 177
2016-08-07 20:38:23,960 - DEBUG --- vertex_to_join_near_v2_on_the_face: 177
2016-08-07 20:38:23,960 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 208
2016-08-07 20:38:23,960 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 180
2016-08-07 20:38:23,961 - DEBUG --- third_face_to_update: [(176, 199), (199, 208), (208, 203), (203, 177), (177, 176)]
2016-08-07 20:38:23,961 - DEBUG --- fourth_face_to_update: [(207, 180), (180, 172), (172, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 174), (174, 176), (176, 177), (177, 207)]
2016-08-07 20:38:23,961 - INFO --- ariadne_step: [3, 203, 207, 177, 177, 208, 180]
2016-08-07 20:38:23,961 - INFO --- END 39: Remove an F3, F4 or F5
2016-08-07 20:38:23,961 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:24,010 - DEBUG --- END: check_regularity
2016-08-07 20:38:24,010 - INFO --- END 39: Main loop
2016-08-07 20:38:24,011 - INFO --- 
2016-08-07 20:38:24,011 - INFO --- BEGIN 40: Main loop
2016-08-07 20:38:24,011 - INFO --- BEGIN 40: Search the right edge to remove
2016-08-07 20:38:24,011 - DEBUG --- BEGIN 40: test the 0 edge
2016-08-07 20:38:24,011 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:24,012 - DEBUG --- edge_to_remove: (314, 272)
2016-08-07 20:38:24,012 - DEBUG --- rotated_edge_to_remove: (272, 314)
2016-08-07 20:38:24,012 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:24,012 - DEBUG --- f1: [(314, 272), (272, 274), (274, 314)]
2016-08-07 20:38:24,013 - DEBUG --- f2: [(314, 310), (310, 311), (311, 307), (307, 282), (282, 269), (269, 272), (272, 314)]
2016-08-07 20:38:24,013 - DEBUG --- edge_to_remove_on_f1: (314, 272)
2016-08-07 20:38:24,013 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:24,013 - DEBUG --- index_of_edge_to_remove_on_f2: 6
2016-08-07 20:38:24,014 - DEBUG --- Temporary f1_plus_f2: [(314, 310), (310, 311), (311, 307), (307, 282), (282, 269), (269, 272), (272, 274), (274, 314)]
2016-08-07 20:38:24,014 - DEBUG --- f1_plus_f2: [(274, 310), (310, 311), (311, 307), (307, 282), (282, 269), (269, 274)]
2016-08-07 20:38:24,014 - DEBUG --- END: join_faces
2016-08-07 20:38:24,014 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:24,015 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:24,015 - DEBUG --- Edge to remove found :-) (314, 272)
2016-08-07 20:38:24,018 - DEBUG --- f1: [(314, 272), (272, 274), (274, 314)]
2016-08-07 20:38:24,019 - DEBUG --- f2: [(314, 310), (310, 311), (311, 307), (307, 282), (282, 269), (269, 272), (272, 314)]
2016-08-07 20:38:24,019 - DEBUG --- f1_plus_f2_temp: [(274, 310), (310, 311), (311, 307), (307, 282), (282, 269), (269, 274)]
2016-08-07 20:38:24,019 - DEBUG --- END 40: test the 0 edge
2016-08-07 20:38:24,020 - INFO --- END 40: Search the right edge to remove. Found: (314, 272)
2016-08-07 20:38:24,020 - INFO --- BEGIN 40: Remove an F3, F4 or F5
2016-08-07 20:38:24,020 - DEBUG --- vertex_to_join_near_v1_on_the_face: 274
2016-08-07 20:38:24,020 - DEBUG --- vertex_to_join_near_v2_on_the_face: 274
2016-08-07 20:38:24,020 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 310
2016-08-07 20:38:24,021 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 269
2016-08-07 20:38:24,021 - DEBUG --- third_face_to_update: [(314, 274), (274, 1), (1, 112), (112, 326), (326, 317), (317, 310), (310, 314)]
2016-08-07 20:38:24,021 - DEBUG --- fourth_face_to_update: [(270, 2), (2, 0), (0, 1), (1, 274), (274, 272), (272, 269), (269, 270)]
2016-08-07 20:38:24,021 - INFO --- ariadne_step: [3, 314, 272, 274, 274, 310, 269]
2016-08-07 20:38:24,022 - INFO --- END 40: Remove an F3, F4 or F5
2016-08-07 20:38:24,022 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:24,071 - DEBUG --- END: check_regularity
2016-08-07 20:38:24,071 - INFO --- END 40: Main loop
2016-08-07 20:38:24,072 - INFO --- 
2016-08-07 20:38:24,072 - INFO --- BEGIN 41: Main loop
2016-08-07 20:38:24,072 - INFO --- BEGIN 41: Search the right edge to remove
2016-08-07 20:38:24,072 - DEBUG --- BEGIN 41: test the 0 edge
2016-08-07 20:38:24,072 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:24,073 - DEBUG --- edge_to_remove: (101, 347)
2016-08-07 20:38:24,073 - DEBUG --- rotated_edge_to_remove: (347, 101)
2016-08-07 20:38:24,073 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:24,073 - DEBUG --- f1: [(101, 347), (347, 79), (79, 101)]
2016-08-07 20:38:24,074 - DEBUG --- f2: [(124, 351), (351, 354), (354, 355), (355, 353), (353, 356), (356, 358), (358, 349), (349, 348), (348, 340), (340, 347), (347, 101), (101, 124)]
2016-08-07 20:38:24,074 - DEBUG --- edge_to_remove_on_f1: (101, 347)
2016-08-07 20:38:24,074 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:24,074 - DEBUG --- index_of_edge_to_remove_on_f2: 10
2016-08-07 20:38:24,074 - DEBUG --- Temporary f1_plus_f2: [(101, 124), (124, 351), (351, 354), (354, 355), (355, 353), (353, 356), (356, 358), (358, 349), (349, 348), (348, 340), (340, 347), (347, 79), (79, 101)]
2016-08-07 20:38:24,075 - DEBUG --- f1_plus_f2: [(79, 124), (124, 351), (351, 354), (354, 355), (355, 353), (353, 356), (356, 358), (358, 349), (349, 348), (348, 340), (340, 79)]
2016-08-07 20:38:24,075 - DEBUG --- END: join_faces
2016-08-07 20:38:24,075 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:24,075 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:24,076 - DEBUG --- Edge to remove found :-) (101, 347)
2016-08-07 20:38:24,076 - DEBUG --- f1: [(101, 347), (347, 79), (79, 101)]
2016-08-07 20:38:24,076 - DEBUG --- f2: [(124, 351), (351, 354), (354, 355), (355, 353), (353, 356), (356, 358), (358, 349), (349, 348), (348, 340), (340, 347), (347, 101), (101, 124)]
2016-08-07 20:38:24,076 - DEBUG --- f1_plus_f2_temp: [(79, 124), (124, 351), (351, 354), (354, 355), (355, 353), (353, 356), (356, 358), (358, 349), (349, 348), (348, 340), (340, 79)]
2016-08-07 20:38:24,077 - DEBUG --- END 41: test the 0 edge
2016-08-07 20:38:24,077 - INFO --- END 41: Search the right edge to remove. Found: (101, 347)
2016-08-07 20:38:24,077 - INFO --- BEGIN 41: Remove an F3, F4 or F5
2016-08-07 20:38:24,077 - DEBUG --- vertex_to_join_near_v1_on_the_face: 79
2016-08-07 20:38:24,077 - DEBUG --- vertex_to_join_near_v2_on_the_face: 79
2016-08-07 20:38:24,078 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 124
2016-08-07 20:38:24,078 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 340
2016-08-07 20:38:24,078 - DEBUG --- third_face_to_update: [(113, 352), (352, 341), (341, 124), (124, 101), (101, 79), (79, 68), (68, 57), (57, 113)]
2016-08-07 20:38:24,079 - DEBUG --- fourth_face_to_update: [(347, 340), (340, 342), (342, 336), (336, 337), (337, 268), (268, 212), (212, 335), (335, 331), (331, 68), (68, 79), (79, 347)]
2016-08-07 20:38:24,079 - INFO --- ariadne_step: [3, 101, 347, 79, 79, 124, 340]
2016-08-07 20:38:24,079 - INFO --- END 41: Remove an F3, F4 or F5
2016-08-07 20:38:24,079 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:24,160 - DEBUG --- END: check_regularity
2016-08-07 20:38:24,160 - INFO --- END 41: Main loop
2016-08-07 20:38:24,161 - INFO --- 
2016-08-07 20:38:24,161 - INFO --- BEGIN 42: Main loop
2016-08-07 20:38:24,161 - INFO --- BEGIN 42: Search the right edge to remove
2016-08-07 20:38:24,161 - DEBUG --- BEGIN 42: test the 0 edge
2016-08-07 20:38:24,161 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:24,162 - DEBUG --- edge_to_remove: (143, 110)
2016-08-07 20:38:24,162 - DEBUG --- rotated_edge_to_remove: (110, 143)
2016-08-07 20:38:24,162 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:24,162 - DEBUG --- f1: [(143, 110), (110, 140), (140, 143)]
2016-08-07 20:38:24,163 - DEBUG --- f2: [(143, 107), (107, 70), (70, 59), (59, 61), (61, 106), (106, 110), (110, 143)]
2016-08-07 20:38:24,163 - DEBUG --- edge_to_remove_on_f1: (143, 110)
2016-08-07 20:38:24,163 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:24,163 - DEBUG --- index_of_edge_to_remove_on_f2: 6
2016-08-07 20:38:24,163 - DEBUG --- Temporary f1_plus_f2: [(143, 107), (107, 70), (70, 59), (59, 61), (61, 106), (106, 110), (110, 140), (140, 143)]
2016-08-07 20:38:24,164 - DEBUG --- f1_plus_f2: [(140, 107), (107, 70), (70, 59), (59, 61), (61, 106), (106, 140)]
2016-08-07 20:38:24,164 - DEBUG --- END: join_faces
2016-08-07 20:38:24,164 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:24,164 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:24,164 - DEBUG --- Edge to remove found :-) (143, 110)
2016-08-07 20:38:24,165 - DEBUG --- f1: [(143, 110), (110, 140), (140, 143)]
2016-08-07 20:38:24,165 - DEBUG --- f2: [(143, 107), (107, 70), (70, 59), (59, 61), (61, 106), (106, 110), (110, 143)]
2016-08-07 20:38:24,165 - DEBUG --- f1_plus_f2_temp: [(140, 107), (107, 70), (70, 59), (59, 61), (61, 106), (106, 140)]
2016-08-07 20:38:24,165 - DEBUG --- END 42: test the 0 edge
2016-08-07 20:38:24,166 - INFO --- END 42: Search the right edge to remove. Found: (143, 110)
2016-08-07 20:38:24,166 - INFO --- BEGIN 42: Remove an F3, F4 or F5
2016-08-07 20:38:24,166 - DEBUG --- vertex_to_join_near_v1_on_the_face: 140
2016-08-07 20:38:24,166 - DEBUG --- vertex_to_join_near_v2_on_the_face: 140
2016-08-07 20:38:24,166 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 107
2016-08-07 20:38:24,167 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 106
2016-08-07 20:38:24,167 - DEBUG --- third_face_to_update: [(144, 116), (116, 107), (107, 143), (143, 140), (140, 139), (139, 144)]
2016-08-07 20:38:24,167 - DEBUG --- fourth_face_to_update: [(98, 102), (102, 141), (141, 142), (142, 139), (139, 140), (140, 110), (110, 106), (106, 98)]
2016-08-07 20:38:24,167 - INFO --- ariadne_step: [3, 143, 110, 140, 140, 107, 106]
2016-08-07 20:38:24,168 - INFO --- END 42: Remove an F3, F4 or F5
2016-08-07 20:38:24,168 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:24,214 - DEBUG --- END: check_regularity
2016-08-07 20:38:24,215 - INFO --- END 42: Main loop
2016-08-07 20:38:24,215 - INFO --- 
2016-08-07 20:38:24,215 - INFO --- BEGIN 43: Main loop
2016-08-07 20:38:24,216 - INFO --- BEGIN 43: Search the right edge to remove
2016-08-07 20:38:24,216 - DEBUG --- BEGIN 43: test the 0 edge
2016-08-07 20:38:24,216 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:24,216 - DEBUG --- edge_to_remove: (6, 15)
2016-08-07 20:38:24,217 - DEBUG --- rotated_edge_to_remove: (15, 6)
2016-08-07 20:38:24,217 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:24,217 - DEBUG --- f1: [(6, 15), (15, 3), (3, 6)]
2016-08-07 20:38:24,217 - DEBUG --- f2: [(15, 6), (6, 5), (5, 32), (32, 33), (33, 263), (263, 18), (18, 7), (7, 15)]
2016-08-07 20:38:24,218 - DEBUG --- edge_to_remove_on_f1: (6, 15)
2016-08-07 20:38:24,218 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:24,218 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:24,218 - DEBUG --- Temporary f1_plus_f2: [(6, 5), (5, 32), (32, 33), (33, 263), (263, 18), (18, 7), (7, 15), (15, 3), (3, 6)]
2016-08-07 20:38:24,218 - DEBUG --- f1_plus_f2: [(3, 5), (5, 32), (32, 33), (33, 263), (263, 18), (18, 7), (7, 3)]
2016-08-07 20:38:24,219 - DEBUG --- END: join_faces
2016-08-07 20:38:24,219 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:24,219 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:24,219 - DEBUG --- Edge to remove found :-) (6, 15)
2016-08-07 20:38:24,220 - DEBUG --- f1: [(6, 15), (15, 3), (3, 6)]
2016-08-07 20:38:24,220 - DEBUG --- f2: [(15, 6), (6, 5), (5, 32), (32, 33), (33, 263), (263, 18), (18, 7), (7, 15)]
2016-08-07 20:38:24,220 - DEBUG --- f1_plus_f2_temp: [(3, 5), (5, 32), (32, 33), (33, 263), (263, 18), (18, 7), (7, 3)]
2016-08-07 20:38:24,220 - DEBUG --- END 43: test the 0 edge
2016-08-07 20:38:24,220 - INFO --- END 43: Search the right edge to remove. Found: (6, 15)
2016-08-07 20:38:24,221 - INFO --- BEGIN 43: Remove an F3, F4 or F5
2016-08-07 20:38:24,221 - DEBUG --- vertex_to_join_near_v1_on_the_face: 3
2016-08-07 20:38:24,221 - DEBUG --- vertex_to_join_near_v2_on_the_face: 3
2016-08-07 20:38:24,221 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 5
2016-08-07 20:38:24,222 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 7
2016-08-07 20:38:24,222 - DEBUG --- third_face_to_update: [(4, 5), (5, 6), (6, 3), (3, 392), (392, 391), (391, 4)]
2016-08-07 20:38:24,222 - DEBUG --- fourth_face_to_update: [(10, 9), (9, 11), (11, 12), (12, 394), (394, 392), (392, 3), (3, 15), (15, 7), (7, 8), (8, 10)]
2016-08-07 20:38:24,222 - INFO --- ariadne_step: [3, 6, 15, 3, 3, 5, 7]
2016-08-07 20:38:24,223 - INFO --- END 43: Remove an F3, F4 or F5
2016-08-07 20:38:24,223 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:24,269 - DEBUG --- END: check_regularity
2016-08-07 20:38:24,269 - INFO --- END 43: Main loop
2016-08-07 20:38:24,270 - INFO --- 
2016-08-07 20:38:24,270 - INFO --- BEGIN 44: Main loop
2016-08-07 20:38:24,270 - INFO --- BEGIN 44: Search the right edge to remove
2016-08-07 20:38:24,271 - DEBUG --- BEGIN 44: test the 0 edge
2016-08-07 20:38:24,271 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:24,271 - DEBUG --- edge_to_remove: (219, 222)
2016-08-07 20:38:24,271 - DEBUG --- rotated_edge_to_remove: (222, 219)
2016-08-07 20:38:24,271 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:24,271 - DEBUG --- f1: [(219, 222), (222, 217), (217, 219)]
2016-08-07 20:38:24,272 - DEBUG --- f2: [(222, 219), (219, 37), (37, 38), (38, 43), (43, 44), (44, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 222)]
2016-08-07 20:38:24,272 - DEBUG --- edge_to_remove_on_f1: (219, 222)
2016-08-07 20:38:24,272 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:24,272 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:24,273 - DEBUG --- Temporary f1_plus_f2: [(219, 37), (37, 38), (38, 43), (43, 44), (44, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 222), (222, 217), (217, 219)]
2016-08-07 20:38:24,273 - DEBUG --- f1_plus_f2: [(217, 37), (37, 38), (38, 43), (43, 44), (44, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 217)]
2016-08-07 20:38:24,273 - DEBUG --- END: join_faces
2016-08-07 20:38:24,273 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:24,273 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:24,274 - DEBUG --- Edge to remove found :-) (219, 222)
2016-08-07 20:38:24,274 - DEBUG --- f1: [(219, 222), (222, 217), (217, 219)]
2016-08-07 20:38:24,274 - DEBUG --- f2: [(222, 219), (219, 37), (37, 38), (38, 43), (43, 44), (44, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 222)]
2016-08-07 20:38:24,274 - DEBUG --- f1_plus_f2_temp: [(217, 37), (37, 38), (38, 43), (43, 44), (44, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 217)]
2016-08-07 20:38:24,274 - DEBUG --- END 44: test the 0 edge
2016-08-07 20:38:24,275 - INFO --- END 44: Search the right edge to remove. Found: (219, 222)
2016-08-07 20:38:24,275 - INFO --- BEGIN 44: Remove an F3, F4 or F5
2016-08-07 20:38:24,275 - DEBUG --- vertex_to_join_near_v1_on_the_face: 217
2016-08-07 20:38:24,275 - DEBUG --- vertex_to_join_near_v2_on_the_face: 217
2016-08-07 20:38:24,275 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 37
2016-08-07 20:38:24,276 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 225
2016-08-07 20:38:24,276 - DEBUG --- third_face_to_update: [(342, 365), (365, 382), (382, 34), (34, 37), (37, 219), (219, 217), (217, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 323), (323, 190), (190, 290), (290, 336), (336, 342)]
2016-08-07 20:38:24,277 - DEBUG --- fourth_face_to_update: [(216, 217), (217, 222), (222, 225), (225, 226), (226, 165), (165, 164), (164, 216)]
2016-08-07 20:38:24,277 - INFO --- ariadne_step: [3, 219, 222, 217, 217, 37, 225]
2016-08-07 20:38:24,277 - INFO --- END 44: Remove an F3, F4 or F5
2016-08-07 20:38:24,277 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:24,322 - DEBUG --- END: check_regularity
2016-08-07 20:38:24,322 - INFO --- END 44: Main loop
2016-08-07 20:38:24,323 - INFO --- 
2016-08-07 20:38:24,323 - INFO --- BEGIN 45: Main loop
2016-08-07 20:38:24,323 - INFO --- BEGIN 45: Search the right edge to remove
2016-08-07 20:38:24,323 - DEBUG --- BEGIN 45: test the 0 edge
2016-08-07 20:38:24,324 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:24,324 - DEBUG --- edge_to_remove: (389, 388)
2016-08-07 20:38:24,324 - DEBUG --- rotated_edge_to_remove: (388, 389)
2016-08-07 20:38:24,324 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:24,324 - DEBUG --- f1: [(389, 388), (388, 387), (387, 389)]
2016-08-07 20:38:24,325 - DEBUG --- f2: [(388, 389), (389, 383), (383, 384), (384, 388)]
2016-08-07 20:38:24,325 - DEBUG --- edge_to_remove_on_f1: (389, 388)
2016-08-07 20:38:24,325 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:24,325 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:24,325 - DEBUG --- Temporary f1_plus_f2: [(389, 383), (383, 384), (384, 388), (388, 387), (387, 389)]
2016-08-07 20:38:24,326 - DEBUG --- f1_plus_f2: [(387, 383), (383, 384), (384, 387)]
2016-08-07 20:38:24,326 - DEBUG --- END: join_faces
2016-08-07 20:38:24,326 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:24,326 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:24,326 - DEBUG --- Edge to remove found :-) (389, 388)
2016-08-07 20:38:24,327 - DEBUG --- f1: [(389, 388), (388, 387), (387, 389)]
2016-08-07 20:38:24,327 - DEBUG --- f2: [(388, 389), (389, 383), (383, 384), (384, 388)]
2016-08-07 20:38:24,327 - DEBUG --- f1_plus_f2_temp: [(387, 383), (383, 384), (384, 387)]
2016-08-07 20:38:24,327 - DEBUG --- END 45: test the 0 edge
2016-08-07 20:38:24,327 - INFO --- END 45: Search the right edge to remove. Found: (389, 388)
2016-08-07 20:38:24,328 - INFO --- BEGIN 45: Remove an F3, F4 or F5
2016-08-07 20:38:24,328 - DEBUG --- vertex_to_join_near_v1_on_the_face: 387
2016-08-07 20:38:24,328 - DEBUG --- vertex_to_join_near_v2_on_the_face: 387
2016-08-07 20:38:24,328 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 383
2016-08-07 20:38:24,328 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 384
2016-08-07 20:38:24,329 - DEBUG --- third_face_to_update: [(387, 362), (362, 364), (364, 383), (383, 389), (389, 387)]
2016-08-07 20:38:24,329 - DEBUG --- fourth_face_to_update: [(388, 384), (384, 377), (377, 360), (360, 362), (362, 387), (387, 388)]
2016-08-07 20:38:24,329 - INFO --- ariadne_step: [3, 389, 388, 387, 387, 383, 384]
2016-08-07 20:38:24,329 - INFO --- END 45: Remove an F3, F4 or F5
2016-08-07 20:38:24,330 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:24,373 - DEBUG --- END: check_regularity
2016-08-07 20:38:24,373 - INFO --- END 45: Main loop
2016-08-07 20:38:24,374 - INFO --- 
2016-08-07 20:38:24,374 - INFO --- BEGIN 46: Main loop
2016-08-07 20:38:24,374 - INFO --- BEGIN 46: Search the right edge to remove
2016-08-07 20:38:24,374 - DEBUG --- BEGIN 46: test the 0 edge
2016-08-07 20:38:24,375 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:24,375 - DEBUG --- edge_to_remove: (53, 48)
2016-08-07 20:38:24,375 - DEBUG --- rotated_edge_to_remove: (48, 53)
2016-08-07 20:38:24,375 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:24,375 - DEBUG --- f1: [(53, 48), (48, 56), (56, 53)]
2016-08-07 20:38:24,376 - DEBUG --- f2: [(47, 48), (48, 53), (53, 52), (52, 44), (44, 42), (42, 40), (40, 54), (54, 55), (55, 51), (51, 50), (50, 47)]
2016-08-07 20:38:24,376 - DEBUG --- edge_to_remove_on_f1: (53, 48)
2016-08-07 20:38:24,376 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:24,376 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:24,376 - DEBUG --- Temporary f1_plus_f2: [(53, 52), (52, 44), (44, 42), (42, 40), (40, 54), (54, 55), (55, 51), (51, 50), (50, 47), (47, 48), (48, 56), (56, 53)]
2016-08-07 20:38:24,377 - DEBUG --- f1_plus_f2: [(56, 52), (52, 44), (44, 42), (42, 40), (40, 54), (54, 55), (55, 51), (51, 50), (50, 47), (47, 56)]
2016-08-07 20:38:24,377 - DEBUG --- END: join_faces
2016-08-07 20:38:24,377 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:24,377 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:24,378 - DEBUG --- Edge to remove found :-) (53, 48)
2016-08-07 20:38:24,378 - DEBUG --- f1: [(53, 48), (48, 56), (56, 53)]
2016-08-07 20:38:24,378 - DEBUG --- f2: [(47, 48), (48, 53), (53, 52), (52, 44), (44, 42), (42, 40), (40, 54), (54, 55), (55, 51), (51, 50), (50, 47)]
2016-08-07 20:38:24,378 - DEBUG --- f1_plus_f2_temp: [(56, 52), (52, 44), (44, 42), (42, 40), (40, 54), (54, 55), (55, 51), (51, 50), (50, 47), (47, 56)]
2016-08-07 20:38:24,378 - DEBUG --- END 46: test the 0 edge
2016-08-07 20:38:24,379 - INFO --- END 46: Search the right edge to remove. Found: (53, 48)
2016-08-07 20:38:24,379 - INFO --- BEGIN 46: Remove an F3, F4 or F5
2016-08-07 20:38:24,379 - DEBUG --- vertex_to_join_near_v1_on_the_face: 56
2016-08-07 20:38:24,379 - DEBUG --- vertex_to_join_near_v2_on_the_face: 56
2016-08-07 20:38:24,379 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 52
2016-08-07 20:38:24,380 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 47
2016-08-07 20:38:24,380 - DEBUG --- third_face_to_update: [(56, 62), (62, 258), (258, 256), (256, 231), (231, 52), (52, 53), (53, 56)]
2016-08-07 20:38:24,380 - DEBUG --- fourth_face_to_update: [(48, 47), (47, 60), (60, 61), (61, 59), (59, 63), (63, 62), (62, 56), (56, 48)]
2016-08-07 20:38:24,380 - INFO --- ariadne_step: [3, 53, 48, 56, 56, 52, 47]
2016-08-07 20:38:24,381 - INFO --- END 46: Remove an F3, F4 or F5
2016-08-07 20:38:24,381 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:24,424 - DEBUG --- END: check_regularity
2016-08-07 20:38:24,424 - INFO --- END 46: Main loop
2016-08-07 20:38:24,425 - INFO --- 
2016-08-07 20:38:24,425 - INFO --- BEGIN 47: Main loop
2016-08-07 20:38:24,425 - INFO --- BEGIN 47: Search the right edge to remove
2016-08-07 20:38:24,425 - DEBUG --- BEGIN 47: test the 0 edge
2016-08-07 20:38:24,425 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:24,426 - DEBUG --- edge_to_remove: (10, 21)
2016-08-07 20:38:24,426 - DEBUG --- rotated_edge_to_remove: (21, 10)
2016-08-07 20:38:24,426 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:24,426 - DEBUG --- f1: [(10, 21), (21, 9), (9, 10)]
2016-08-07 20:38:24,426 - DEBUG --- f2: [(10, 8), (8, 16), (16, 19), (19, 20), (20, 21), (21, 10)]
2016-08-07 20:38:24,427 - DEBUG --- edge_to_remove_on_f1: (10, 21)
2016-08-07 20:38:24,427 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:24,427 - DEBUG --- index_of_edge_to_remove_on_f2: 5
2016-08-07 20:38:24,427 - DEBUG --- Temporary f1_plus_f2: [(10, 8), (8, 16), (16, 19), (19, 20), (20, 21), (21, 9), (9, 10)]
2016-08-07 20:38:24,427 - DEBUG --- f1_plus_f2: [(9, 8), (8, 16), (16, 19), (19, 20), (20, 9)]
2016-08-07 20:38:24,428 - DEBUG --- END: join_faces
2016-08-07 20:38:24,428 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:24,428 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:24,428 - DEBUG --- Edge to remove found :-) (10, 21)
2016-08-07 20:38:24,428 - DEBUG --- f1: [(10, 21), (21, 9), (9, 10)]
2016-08-07 20:38:24,429 - DEBUG --- f2: [(10, 8), (8, 16), (16, 19), (19, 20), (20, 21), (21, 10)]
2016-08-07 20:38:24,429 - DEBUG --- f1_plus_f2_temp: [(9, 8), (8, 16), (16, 19), (19, 20), (20, 9)]
2016-08-07 20:38:24,429 - DEBUG --- END 47: test the 0 edge
2016-08-07 20:38:24,429 - INFO --- END 47: Search the right edge to remove. Found: (10, 21)
2016-08-07 20:38:24,429 - INFO --- BEGIN 47: Remove an F3, F4 or F5
2016-08-07 20:38:24,430 - DEBUG --- vertex_to_join_near_v1_on_the_face: 9
2016-08-07 20:38:24,430 - DEBUG --- vertex_to_join_near_v2_on_the_face: 9
2016-08-07 20:38:24,430 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 8
2016-08-07 20:38:24,430 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 20
2016-08-07 20:38:24,431 - DEBUG --- third_face_to_update: [(10, 9), (9, 11), (11, 12), (12, 394), (394, 392), (392, 3), (3, 7), (7, 8), (8, 10)]
2016-08-07 20:38:24,431 - DEBUG --- fourth_face_to_update: [(21, 20), (20, 23), (23, 11), (11, 9), (9, 21)]
2016-08-07 20:38:24,431 - INFO --- ariadne_step: [3, 10, 21, 9, 9, 8, 20]
2016-08-07 20:38:24,431 - INFO --- END 47: Remove an F3, F4 or F5
2016-08-07 20:38:24,432 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:24,474 - DEBUG --- END: check_regularity
2016-08-07 20:38:24,474 - INFO --- END 47: Main loop
2016-08-07 20:38:24,475 - INFO --- 
2016-08-07 20:38:24,475 - INFO --- BEGIN 48: Main loop
2016-08-07 20:38:24,476 - INFO --- BEGIN 48: Search the right edge to remove
2016-08-07 20:38:24,476 - DEBUG --- BEGIN 48: test the 0 edge
2016-08-07 20:38:24,476 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:24,476 - DEBUG --- edge_to_remove: (208, 199)
2016-08-07 20:38:24,477 - DEBUG --- rotated_edge_to_remove: (199, 208)
2016-08-07 20:38:24,477 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:24,477 - DEBUG --- f1: [(208, 199), (199, 200), (200, 208)]
2016-08-07 20:38:24,477 - DEBUG --- f2: [(176, 199), (199, 208), (208, 177), (177, 176)]
2016-08-07 20:38:24,477 - DEBUG --- edge_to_remove_on_f1: (208, 199)
2016-08-07 20:38:24,478 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:24,478 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:24,478 - DEBUG --- Temporary f1_plus_f2: [(208, 177), (177, 176), (176, 199), (199, 200), (200, 208)]
2016-08-07 20:38:24,478 - DEBUG --- f1_plus_f2: [(200, 177), (177, 176), (176, 200)]
2016-08-07 20:38:24,478 - DEBUG --- END: join_faces
2016-08-07 20:38:24,479 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:24,479 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:24,479 - DEBUG --- Edge to remove found :-) (208, 199)
2016-08-07 20:38:24,479 - DEBUG --- f1: [(208, 199), (199, 200), (200, 208)]
2016-08-07 20:38:24,479 - DEBUG --- f2: [(176, 199), (199, 208), (208, 177), (177, 176)]
2016-08-07 20:38:24,480 - DEBUG --- f1_plus_f2_temp: [(200, 177), (177, 176), (176, 200)]
2016-08-07 20:38:24,480 - DEBUG --- END 48: test the 0 edge
2016-08-07 20:38:24,480 - INFO --- END 48: Search the right edge to remove. Found: (208, 199)
2016-08-07 20:38:24,480 - INFO --- BEGIN 48: Remove an F3, F4 or F5
2016-08-07 20:38:24,480 - DEBUG --- vertex_to_join_near_v1_on_the_face: 200
2016-08-07 20:38:24,481 - DEBUG --- vertex_to_join_near_v2_on_the_face: 200
2016-08-07 20:38:24,481 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 177
2016-08-07 20:38:24,481 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 176
2016-08-07 20:38:24,482 - DEBUG --- third_face_to_update: [(177, 208), (208, 200), (200, 197), (197, 198), (198, 180), (180, 177)]
2016-08-07 20:38:24,482 - DEBUG --- fourth_face_to_update: [(174, 196), (196, 197), (197, 200), (200, 199), (199, 176), (176, 174)]
2016-08-07 20:38:24,482 - INFO --- ariadne_step: [3, 208, 199, 200, 200, 177, 176]
2016-08-07 20:38:24,482 - INFO --- END 48: Remove an F3, F4 or F5
2016-08-07 20:38:24,482 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:24,524 - DEBUG --- END: check_regularity
2016-08-07 20:38:24,525 - INFO --- END 48: Main loop
2016-08-07 20:38:24,525 - INFO --- 
2016-08-07 20:38:24,526 - INFO --- BEGIN 49: Main loop
2016-08-07 20:38:24,526 - INFO --- BEGIN 49: Search the right edge to remove
2016-08-07 20:38:24,526 - DEBUG --- BEGIN 49: test the 0 edge
2016-08-07 20:38:24,526 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:24,527 - DEBUG --- edge_to_remove: (2, 270)
2016-08-07 20:38:24,527 - DEBUG --- rotated_edge_to_remove: (270, 2)
2016-08-07 20:38:24,527 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:24,527 - DEBUG --- f1: [(2, 270), (270, 374), (374, 2)]
2016-08-07 20:38:24,527 - DEBUG --- f2: [(270, 2), (2, 0), (0, 1), (1, 274), (274, 269), (269, 270)]
2016-08-07 20:38:24,528 - DEBUG --- edge_to_remove_on_f1: (2, 270)
2016-08-07 20:38:24,528 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:24,528 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:24,528 - DEBUG --- Temporary f1_plus_f2: [(2, 0), (0, 1), (1, 274), (274, 269), (269, 270), (270, 374), (374, 2)]
2016-08-07 20:38:24,529 - DEBUG --- f1_plus_f2: [(374, 0), (0, 1), (1, 274), (274, 269), (269, 374)]
2016-08-07 20:38:24,529 - DEBUG --- END: join_faces
2016-08-07 20:38:24,529 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:24,529 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:24,529 - DEBUG --- Edge to remove found :-) (2, 270)
2016-08-07 20:38:24,530 - DEBUG --- f1: [(2, 270), (270, 374), (374, 2)]
2016-08-07 20:38:24,530 - DEBUG --- f2: [(270, 2), (2, 0), (0, 1), (1, 274), (274, 269), (269, 270)]
2016-08-07 20:38:24,530 - DEBUG --- f1_plus_f2_temp: [(374, 0), (0, 1), (1, 274), (274, 269), (269, 374)]
2016-08-07 20:38:24,530 - DEBUG --- END 49: test the 0 edge
2016-08-07 20:38:24,531 - INFO --- END 49: Search the right edge to remove. Found: (2, 270)
2016-08-07 20:38:24,531 - INFO --- BEGIN 49: Remove an F3, F4 or F5
2016-08-07 20:38:24,531 - DEBUG --- vertex_to_join_near_v1_on_the_face: 374
2016-08-07 20:38:24,531 - DEBUG --- vertex_to_join_near_v2_on_the_face: 374
2016-08-07 20:38:24,531 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 0
2016-08-07 20:38:24,532 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 269
2016-08-07 20:38:24,532 - DEBUG --- third_face_to_update: [(363, 341), (341, 352), (352, 46), (46, 223), (223, 0), (0, 2), (2, 374), (374, 13), (13, 35), (35, 363)]
2016-08-07 20:38:24,532 - DEBUG --- fourth_face_to_update: [(281, 13), (13, 374), (374, 270), (270, 269), (269, 282), (282, 275), (275, 277), (277, 278), (278, 280), (280, 281)]
2016-08-07 20:38:24,532 - INFO --- ariadne_step: [3, 2, 270, 374, 374, 0, 269]
2016-08-07 20:38:24,533 - INFO --- END 49: Remove an F3, F4 or F5
2016-08-07 20:38:24,533 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:24,575 - DEBUG --- END: check_regularity
2016-08-07 20:38:24,575 - INFO --- END 49: Main loop
2016-08-07 20:38:24,576 - INFO --- 
2016-08-07 20:38:24,576 - INFO --- BEGIN 50: Main loop
2016-08-07 20:38:24,576 - INFO --- BEGIN 50: Search the right edge to remove
2016-08-07 20:38:24,576 - DEBUG --- BEGIN 50: test the 0 edge
2016-08-07 20:38:24,577 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:24,577 - DEBUG --- edge_to_remove: (93, 95)
2016-08-07 20:38:24,577 - DEBUG --- rotated_edge_to_remove: (95, 93)
2016-08-07 20:38:24,577 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:24,578 - DEBUG --- f1: [(93, 95), (95, 99), (99, 93)]
2016-08-07 20:38:24,578 - DEBUG --- f2: [(93, 60), (60, 47), (47, 50), (50, 97), (97, 92), (92, 95), (95, 93)]
2016-08-07 20:38:24,578 - DEBUG --- edge_to_remove_on_f1: (93, 95)
2016-08-07 20:38:24,578 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:24,578 - DEBUG --- index_of_edge_to_remove_on_f2: 6
2016-08-07 20:38:24,579 - DEBUG --- Temporary f1_plus_f2: [(93, 60), (60, 47), (47, 50), (50, 97), (97, 92), (92, 95), (95, 99), (99, 93)]
2016-08-07 20:38:24,579 - DEBUG --- f1_plus_f2: [(99, 60), (60, 47), (47, 50), (50, 97), (97, 92), (92, 99)]
2016-08-07 20:38:24,579 - DEBUG --- END: join_faces
2016-08-07 20:38:24,579 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:24,579 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:24,580 - DEBUG --- Edge to remove found :-) (93, 95)
2016-08-07 20:38:24,580 - DEBUG --- f1: [(93, 95), (95, 99), (99, 93)]
2016-08-07 20:38:24,580 - DEBUG --- f2: [(93, 60), (60, 47), (47, 50), (50, 97), (97, 92), (92, 95), (95, 93)]
2016-08-07 20:38:24,580 - DEBUG --- f1_plus_f2_temp: [(99, 60), (60, 47), (47, 50), (50, 97), (97, 92), (92, 99)]
2016-08-07 20:38:24,580 - DEBUG --- END 50: test the 0 edge
2016-08-07 20:38:24,581 - INFO --- END 50: Search the right edge to remove. Found: (93, 95)
2016-08-07 20:38:24,581 - INFO --- BEGIN 50: Remove an F3, F4 or F5
2016-08-07 20:38:24,581 - DEBUG --- vertex_to_join_near_v1_on_the_face: 99
2016-08-07 20:38:24,581 - DEBUG --- vertex_to_join_near_v2_on_the_face: 99
2016-08-07 20:38:24,582 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 60
2016-08-07 20:38:24,582 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 92
2016-08-07 20:38:24,582 - DEBUG --- third_face_to_update: [(61, 60), (60, 93), (93, 99), (99, 98), (98, 106), (106, 61)]
2016-08-07 20:38:24,582 - DEBUG --- fourth_face_to_update: [(103, 102), (102, 98), (98, 99), (99, 95), (95, 92), (92, 103)]
2016-08-07 20:38:24,583 - INFO --- ariadne_step: [3, 93, 95, 99, 99, 60, 92]
2016-08-07 20:38:24,583 - INFO --- END 50: Remove an F3, F4 or F5
2016-08-07 20:38:24,583 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:24,626 - DEBUG --- END: check_regularity
2016-08-07 20:38:24,626 - INFO --- END 50: Main loop
2016-08-07 20:38:24,626 - INFO --- 
2016-08-07 20:38:24,627 - INFO --- BEGIN 51: Main loop
2016-08-07 20:38:24,627 - INFO --- BEGIN 51: Search the right edge to remove
2016-08-07 20:38:24,627 - DEBUG --- BEGIN 51: test the 0 edge
2016-08-07 20:38:24,627 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:24,628 - DEBUG --- edge_to_remove: (42, 44)
2016-08-07 20:38:24,628 - DEBUG --- rotated_edge_to_remove: (44, 42)
2016-08-07 20:38:24,628 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:24,628 - DEBUG --- f1: [(42, 44), (44, 43), (43, 42)]
2016-08-07 20:38:24,628 - DEBUG --- f2: [(56, 52), (52, 44), (44, 42), (42, 40), (40, 54), (54, 55), (55, 51), (51, 50), (50, 47), (47, 56)]
2016-08-07 20:38:24,629 - DEBUG --- edge_to_remove_on_f1: (42, 44)
2016-08-07 20:38:24,629 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:24,629 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:24,629 - DEBUG --- Temporary f1_plus_f2: [(42, 40), (40, 54), (54, 55), (55, 51), (51, 50), (50, 47), (47, 56), (56, 52), (52, 44), (44, 43), (43, 42)]
2016-08-07 20:38:24,630 - DEBUG --- f1_plus_f2: [(43, 40), (40, 54), (54, 55), (55, 51), (51, 50), (50, 47), (47, 56), (56, 52), (52, 43)]
2016-08-07 20:38:24,630 - DEBUG --- END: join_faces
2016-08-07 20:38:24,630 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:24,630 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:24,630 - DEBUG --- Edge to remove found :-) (42, 44)
2016-08-07 20:38:24,631 - DEBUG --- f1: [(42, 44), (44, 43), (43, 42)]
2016-08-07 20:38:24,631 - DEBUG --- f2: [(56, 52), (52, 44), (44, 42), (42, 40), (40, 54), (54, 55), (55, 51), (51, 50), (50, 47), (47, 56)]
2016-08-07 20:38:24,631 - DEBUG --- f1_plus_f2_temp: [(43, 40), (40, 54), (54, 55), (55, 51), (51, 50), (50, 47), (47, 56), (56, 52), (52, 43)]
2016-08-07 20:38:24,631 - DEBUG --- END 51: test the 0 edge
2016-08-07 20:38:24,631 - INFO --- END 51: Search the right edge to remove. Found: (42, 44)
2016-08-07 20:38:24,632 - INFO --- BEGIN 51: Remove an F3, F4 or F5
2016-08-07 20:38:24,632 - DEBUG --- vertex_to_join_near_v1_on_the_face: 43
2016-08-07 20:38:24,632 - DEBUG --- vertex_to_join_near_v2_on_the_face: 43
2016-08-07 20:38:24,632 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 40
2016-08-07 20:38:24,632 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 52
2016-08-07 20:38:24,633 - DEBUG --- third_face_to_update: [(38, 30), (30, 31), (31, 40), (40, 42), (42, 43), (43, 38)]
2016-08-07 20:38:24,633 - DEBUG --- fourth_face_to_update: [(217, 37), (37, 38), (38, 43), (43, 44), (44, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 217)]
2016-08-07 20:38:24,633 - INFO --- ariadne_step: [3, 42, 44, 43, 43, 40, 52]
2016-08-07 20:38:24,633 - INFO --- END 51: Remove an F3, F4 or F5
2016-08-07 20:38:24,634 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:24,685 - DEBUG --- END: check_regularity
2016-08-07 20:38:24,686 - INFO --- END 51: Main loop
2016-08-07 20:38:24,686 - INFO --- 
2016-08-07 20:38:24,687 - INFO --- BEGIN 52: Main loop
2016-08-07 20:38:24,687 - INFO --- BEGIN 52: Search the right edge to remove
2016-08-07 20:38:24,688 - DEBUG --- BEGIN 52: test the 0 edge
2016-08-07 20:38:24,688 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:24,689 - DEBUG --- edge_to_remove: (373, 375)
2016-08-07 20:38:24,689 - DEBUG --- rotated_edge_to_remove: (375, 373)
2016-08-07 20:38:24,690 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:24,690 - DEBUG --- f1: [(373, 375), (375, 327), (327, 373)]
2016-08-07 20:38:24,690 - DEBUG --- f2: [(324, 375), (375, 373), (373, 46), (46, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 366), (366, 367), (367, 361), (361, 348), (348, 349), (349, 324)]
2016-08-07 20:38:24,691 - DEBUG --- edge_to_remove_on_f1: (373, 375)
2016-08-07 20:38:24,691 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:24,692 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:24,692 - DEBUG --- Temporary f1_plus_f2: [(373, 46), (46, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 366), (366, 367), (367, 361), (361, 348), (348, 349), (349, 324), (324, 375), (375, 327), (327, 373)]
2016-08-07 20:38:24,693 - DEBUG --- f1_plus_f2: [(327, 46), (46, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 366), (366, 367), (367, 361), (361, 348), (348, 349), (349, 324), (324, 327)]
2016-08-07 20:38:24,693 - DEBUG --- END: join_faces
2016-08-07 20:38:24,694 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:24,695 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:24,695 - DEBUG --- Edge to remove found :-) (373, 375)
2016-08-07 20:38:24,695 - DEBUG --- f1: [(373, 375), (375, 327), (327, 373)]
2016-08-07 20:38:24,696 - DEBUG --- f2: [(324, 375), (375, 373), (373, 46), (46, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 366), (366, 367), (367, 361), (361, 348), (348, 349), (349, 324)]
2016-08-07 20:38:24,696 - DEBUG --- f1_plus_f2_temp: [(327, 46), (46, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 366), (366, 367), (367, 361), (361, 348), (348, 349), (349, 324), (324, 327)]
2016-08-07 20:38:24,696 - DEBUG --- END 52: test the 0 edge
2016-08-07 20:38:24,697 - INFO --- END 52: Search the right edge to remove. Found: (373, 375)
2016-08-07 20:38:24,697 - INFO --- BEGIN 52: Remove an F3, F4 or F5
2016-08-07 20:38:24,697 - DEBUG --- vertex_to_join_near_v1_on_the_face: 327
2016-08-07 20:38:24,698 - DEBUG --- vertex_to_join_near_v2_on_the_face: 327
2016-08-07 20:38:24,698 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 46
2016-08-07 20:38:24,699 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 324
2016-08-07 20:38:24,700 - DEBUG --- third_face_to_update: [(373, 327), (327, 326), (326, 112), (112, 223), (223, 46), (46, 373)]
2016-08-07 20:38:24,700 - DEBUG --- fourth_face_to_update: [(375, 324), (324, 358), (358, 356), (356, 316), (316, 317), (317, 326), (326, 327), (327, 375)]
2016-08-07 20:38:24,701 - INFO --- ariadne_step: [3, 373, 375, 327, 327, 46, 324]
2016-08-07 20:38:24,701 - INFO --- END 52: Remove an F3, F4 or F5
2016-08-07 20:38:24,701 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:24,794 - DEBUG --- END: check_regularity
2016-08-07 20:38:24,795 - INFO --- END 52: Main loop
2016-08-07 20:38:24,795 - INFO --- 
2016-08-07 20:38:24,796 - INFO --- BEGIN 53: Main loop
2016-08-07 20:38:24,796 - INFO --- BEGIN 53: Search the right edge to remove
2016-08-07 20:38:24,797 - DEBUG --- BEGIN 53: test the 0 edge
2016-08-07 20:38:24,797 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:24,798 - DEBUG --- edge_to_remove: (358, 324)
2016-08-07 20:38:24,798 - DEBUG --- rotated_edge_to_remove: (324, 358)
2016-08-07 20:38:24,799 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:24,799 - DEBUG --- f1: [(358, 324), (324, 349), (349, 358)]
2016-08-07 20:38:24,799 - DEBUG --- f2: [(327, 324), (324, 358), (358, 356), (356, 316), (316, 317), (317, 326), (326, 327)]
2016-08-07 20:38:24,800 - DEBUG --- edge_to_remove_on_f1: (358, 324)
2016-08-07 20:38:24,800 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:24,800 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:24,801 - DEBUG --- Temporary f1_plus_f2: [(358, 356), (356, 316), (316, 317), (317, 326), (326, 327), (327, 324), (324, 349), (349, 358)]
2016-08-07 20:38:24,801 - DEBUG --- f1_plus_f2: [(349, 356), (356, 316), (316, 317), (317, 326), (326, 327), (327, 349)]
2016-08-07 20:38:24,802 - DEBUG --- END: join_faces
2016-08-07 20:38:24,803 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:24,803 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:24,804 - DEBUG --- Edge to remove found :-) (358, 324)
2016-08-07 20:38:24,805 - DEBUG --- f1: [(358, 324), (324, 349), (349, 358)]
2016-08-07 20:38:24,805 - DEBUG --- f2: [(327, 324), (324, 358), (358, 356), (356, 316), (316, 317), (317, 326), (326, 327)]
2016-08-07 20:38:24,806 - DEBUG --- f1_plus_f2_temp: [(349, 356), (356, 316), (316, 317), (317, 326), (326, 327), (327, 349)]
2016-08-07 20:38:24,806 - DEBUG --- END 53: test the 0 edge
2016-08-07 20:38:24,806 - INFO --- END 53: Search the right edge to remove. Found: (358, 324)
2016-08-07 20:38:24,807 - INFO --- BEGIN 53: Remove an F3, F4 or F5
2016-08-07 20:38:24,807 - DEBUG --- vertex_to_join_near_v1_on_the_face: 349
2016-08-07 20:38:24,808 - DEBUG --- vertex_to_join_near_v2_on_the_face: 349
2016-08-07 20:38:24,808 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 356
2016-08-07 20:38:24,808 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 327
2016-08-07 20:38:24,810 - DEBUG --- third_face_to_update: [(79, 124), (124, 351), (351, 354), (354, 355), (355, 353), (353, 356), (356, 358), (358, 349), (349, 348), (348, 340), (340, 79)]
2016-08-07 20:38:24,810 - DEBUG --- fourth_face_to_update: [(327, 46), (46, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 366), (366, 367), (367, 361), (361, 348), (348, 349), (349, 324), (324, 327)]
2016-08-07 20:38:24,811 - INFO --- ariadne_step: [3, 358, 324, 349, 349, 356, 327]
2016-08-07 20:38:24,811 - INFO --- END 53: Remove an F3, F4 or F5
2016-08-07 20:38:24,812 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:24,878 - DEBUG --- END: check_regularity
2016-08-07 20:38:24,879 - INFO --- END 53: Main loop
2016-08-07 20:38:24,879 - INFO --- 
2016-08-07 20:38:24,879 - INFO --- BEGIN 54: Main loop
2016-08-07 20:38:24,880 - INFO --- BEGIN 54: Search the right edge to remove
2016-08-07 20:38:24,880 - DEBUG --- BEGIN 54: test the 0 edge
2016-08-07 20:38:24,880 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:24,880 - DEBUG --- edge_to_remove: (257, 268)
2016-08-07 20:38:24,881 - DEBUG --- rotated_edge_to_remove: (268, 257)
2016-08-07 20:38:24,881 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:24,881 - DEBUG --- f1: [(257, 268), (268, 337), (337, 257)]
2016-08-07 20:38:24,882 - DEBUG --- f2: [(301, 146), (146, 135), (135, 235), (235, 224), (224, 212), (212, 268), (268, 257), (257, 290), (290, 190), (190, 301)]
2016-08-07 20:38:24,882 - DEBUG --- edge_to_remove_on_f1: (257, 268)
2016-08-07 20:38:24,883 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:24,883 - DEBUG --- index_of_edge_to_remove_on_f2: 6
2016-08-07 20:38:24,883 - DEBUG --- Temporary f1_plus_f2: [(257, 290), (290, 190), (190, 301), (301, 146), (146, 135), (135, 235), (235, 224), (224, 212), (212, 268), (268, 337), (337, 257)]
2016-08-07 20:38:24,884 - DEBUG --- f1_plus_f2: [(337, 290), (290, 190), (190, 301), (301, 146), (146, 135), (135, 235), (235, 224), (224, 212), (212, 337)]
2016-08-07 20:38:24,884 - DEBUG --- END: join_faces
2016-08-07 20:38:24,884 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:24,884 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:24,884 - DEBUG --- Edge to remove found :-) (257, 268)
2016-08-07 20:38:24,885 - DEBUG --- f1: [(257, 268), (268, 337), (337, 257)]
2016-08-07 20:38:24,885 - DEBUG --- f2: [(301, 146), (146, 135), (135, 235), (235, 224), (224, 212), (212, 268), (268, 257), (257, 290), (290, 190), (190, 301)]
2016-08-07 20:38:24,885 - DEBUG --- f1_plus_f2_temp: [(337, 290), (290, 190), (190, 301), (301, 146), (146, 135), (135, 235), (235, 224), (224, 212), (212, 337)]
2016-08-07 20:38:24,885 - DEBUG --- END 54: test the 0 edge
2016-08-07 20:38:24,886 - INFO --- END 54: Search the right edge to remove. Found: (257, 268)
2016-08-07 20:38:24,886 - INFO --- BEGIN 54: Remove an F3, F4 or F5
2016-08-07 20:38:24,886 - DEBUG --- vertex_to_join_near_v1_on_the_face: 337
2016-08-07 20:38:24,886 - DEBUG --- vertex_to_join_near_v2_on_the_face: 337
2016-08-07 20:38:24,887 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 290
2016-08-07 20:38:24,887 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 212
2016-08-07 20:38:24,887 - DEBUG --- third_face_to_update: [(290, 257), (257, 337), (337, 336), (336, 290)]
2016-08-07 20:38:24,888 - DEBUG --- fourth_face_to_update: [(79, 340), (340, 342), (342, 336), (336, 337), (337, 268), (268, 212), (212, 335), (335, 331), (331, 68), (68, 79)]
2016-08-07 20:38:24,888 - INFO --- ariadne_step: [3, 257, 268, 337, 337, 290, 212]
2016-08-07 20:38:24,888 - INFO --- END 54: Remove an F3, F4 or F5
2016-08-07 20:38:24,888 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:24,940 - DEBUG --- END: check_regularity
2016-08-07 20:38:24,940 - INFO --- END 54: Main loop
2016-08-07 20:38:24,941 - INFO --- 
2016-08-07 20:38:24,941 - INFO --- BEGIN 55: Main loop
2016-08-07 20:38:24,941 - INFO --- BEGIN 55: Search the right edge to remove
2016-08-07 20:38:24,941 - DEBUG --- BEGIN 55: test the 0 edge
2016-08-07 20:38:24,942 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:24,942 - DEBUG --- edge_to_remove: (290, 337)
2016-08-07 20:38:24,942 - DEBUG --- rotated_edge_to_remove: (337, 290)
2016-08-07 20:38:24,942 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:24,943 - DEBUG --- f1: [(290, 337), (337, 336), (336, 290)]
2016-08-07 20:38:24,943 - DEBUG --- f2: [(337, 290), (290, 190), (190, 301), (301, 146), (146, 135), (135, 235), (235, 224), (224, 212), (212, 337)]
2016-08-07 20:38:24,943 - DEBUG --- edge_to_remove_on_f1: (290, 337)
2016-08-07 20:38:24,943 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:24,944 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:24,944 - DEBUG --- Temporary f1_plus_f2: [(290, 190), (190, 301), (301, 146), (146, 135), (135, 235), (235, 224), (224, 212), (212, 337), (337, 336), (336, 290)]
2016-08-07 20:38:24,944 - DEBUG --- f1_plus_f2: [(336, 190), (190, 301), (301, 146), (146, 135), (135, 235), (235, 224), (224, 212), (212, 336)]
2016-08-07 20:38:24,944 - DEBUG --- END: join_faces
2016-08-07 20:38:24,945 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:24,945 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:24,945 - DEBUG --- Edge to remove found :-) (290, 337)
2016-08-07 20:38:24,945 - DEBUG --- f1: [(290, 337), (337, 336), (336, 290)]
2016-08-07 20:38:24,946 - DEBUG --- f2: [(337, 290), (290, 190), (190, 301), (301, 146), (146, 135), (135, 235), (235, 224), (224, 212), (212, 337)]
2016-08-07 20:38:24,946 - DEBUG --- f1_plus_f2_temp: [(336, 190), (190, 301), (301, 146), (146, 135), (135, 235), (235, 224), (224, 212), (212, 336)]
2016-08-07 20:38:24,946 - DEBUG --- END 55: test the 0 edge
2016-08-07 20:38:24,946 - INFO --- END 55: Search the right edge to remove. Found: (290, 337)
2016-08-07 20:38:24,947 - INFO --- BEGIN 55: Remove an F3, F4 or F5
2016-08-07 20:38:24,947 - DEBUG --- vertex_to_join_near_v1_on_the_face: 336
2016-08-07 20:38:24,947 - DEBUG --- vertex_to_join_near_v2_on_the_face: 336
2016-08-07 20:38:24,947 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 190
2016-08-07 20:38:24,948 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 212
2016-08-07 20:38:24,949 - DEBUG --- third_face_to_update: [(342, 365), (365, 382), (382, 34), (34, 37), (37, 217), (217, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 323), (323, 190), (190, 290), (290, 336), (336, 342)]
2016-08-07 20:38:24,949 - DEBUG --- fourth_face_to_update: [(79, 340), (340, 342), (342, 336), (336, 337), (337, 212), (212, 335), (335, 331), (331, 68), (68, 79)]
2016-08-07 20:38:24,949 - INFO --- ariadne_step: [3, 290, 337, 336, 336, 190, 212]
2016-08-07 20:38:24,949 - INFO --- END 55: Remove an F3, F4 or F5
2016-08-07 20:38:24,950 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:25,001 - DEBUG --- END: check_regularity
2016-08-07 20:38:25,002 - INFO --- END 55: Main loop
2016-08-07 20:38:25,002 - INFO --- 
2016-08-07 20:38:25,003 - INFO --- BEGIN 56: Main loop
2016-08-07 20:38:25,003 - INFO --- BEGIN 56: Search the right edge to remove
2016-08-07 20:38:25,003 - DEBUG --- BEGIN 56: test the 0 edge
2016-08-07 20:38:25,003 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:25,004 - DEBUG --- edge_to_remove: (387, 383)
2016-08-07 20:38:25,004 - DEBUG --- rotated_edge_to_remove: (383, 387)
2016-08-07 20:38:25,004 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:25,004 - DEBUG --- f1: [(387, 383), (383, 384), (384, 387)]
2016-08-07 20:38:25,005 - DEBUG --- f2: [(387, 362), (362, 364), (364, 383), (383, 387)]
2016-08-07 20:38:25,005 - DEBUG --- edge_to_remove_on_f1: (387, 383)
2016-08-07 20:38:25,005 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:25,005 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:25,006 - DEBUG --- Temporary f1_plus_f2: [(387, 362), (362, 364), (364, 383), (383, 384), (384, 387)]
2016-08-07 20:38:25,006 - DEBUG --- f1_plus_f2: [(384, 362), (362, 364), (364, 384)]
2016-08-07 20:38:25,006 - DEBUG --- END: join_faces
2016-08-07 20:38:25,006 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:25,007 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:25,007 - DEBUG --- Edge to remove found :-) (387, 383)
2016-08-07 20:38:25,007 - DEBUG --- f1: [(387, 383), (383, 384), (384, 387)]
2016-08-07 20:38:25,007 - DEBUG --- f2: [(387, 362), (362, 364), (364, 383), (383, 387)]
2016-08-07 20:38:25,008 - DEBUG --- f1_plus_f2_temp: [(384, 362), (362, 364), (364, 384)]
2016-08-07 20:38:25,008 - DEBUG --- END 56: test the 0 edge
2016-08-07 20:38:25,008 - INFO --- END 56: Search the right edge to remove. Found: (387, 383)
2016-08-07 20:38:25,008 - INFO --- BEGIN 56: Remove an F3, F4 or F5
2016-08-07 20:38:25,008 - DEBUG --- vertex_to_join_near_v1_on_the_face: 384
2016-08-07 20:38:25,009 - DEBUG --- vertex_to_join_near_v2_on_the_face: 384
2016-08-07 20:38:25,009 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 362
2016-08-07 20:38:25,009 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 364
2016-08-07 20:38:25,010 - DEBUG --- third_face_to_update: [(387, 384), (384, 377), (377, 360), (360, 362), (362, 387)]
2016-08-07 20:38:25,010 - DEBUG --- fourth_face_to_update: [(361, 367), (367, 377), (377, 384), (384, 383), (383, 364), (364, 361)]
2016-08-07 20:38:25,010 - INFO --- ariadne_step: [3, 387, 383, 384, 384, 362, 364]
2016-08-07 20:38:25,010 - INFO --- END 56: Remove an F3, F4 or F5
2016-08-07 20:38:25,011 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:25,063 - DEBUG --- END: check_regularity
2016-08-07 20:38:25,064 - INFO --- END 56: Main loop
2016-08-07 20:38:25,064 - INFO --- 
2016-08-07 20:38:25,064 - INFO --- BEGIN 57: Main loop
2016-08-07 20:38:25,064 - INFO --- BEGIN 57: Search the right edge to remove
2016-08-07 20:38:25,065 - DEBUG --- BEGIN 57: test the 0 edge
2016-08-07 20:38:25,065 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:25,065 - DEBUG --- edge_to_remove: (200, 177)
2016-08-07 20:38:25,065 - DEBUG --- rotated_edge_to_remove: (177, 200)
2016-08-07 20:38:25,066 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:25,066 - DEBUG --- f1: [(200, 177), (177, 176), (176, 200)]
2016-08-07 20:38:25,066 - DEBUG --- f2: [(177, 200), (200, 197), (197, 198), (198, 180), (180, 177)]
2016-08-07 20:38:25,066 - DEBUG --- edge_to_remove_on_f1: (200, 177)
2016-08-07 20:38:25,066 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:25,067 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:25,067 - DEBUG --- Temporary f1_plus_f2: [(200, 197), (197, 198), (198, 180), (180, 177), (177, 176), (176, 200)]
2016-08-07 20:38:25,067 - DEBUG --- f1_plus_f2: [(176, 197), (197, 198), (198, 180), (180, 176)]
2016-08-07 20:38:25,067 - DEBUG --- END: join_faces
2016-08-07 20:38:25,067 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:25,068 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:25,068 - DEBUG --- Edge to remove found :-) (200, 177)
2016-08-07 20:38:25,068 - DEBUG --- f1: [(200, 177), (177, 176), (176, 200)]
2016-08-07 20:38:25,068 - DEBUG --- f2: [(177, 200), (200, 197), (197, 198), (198, 180), (180, 177)]
2016-08-07 20:38:25,068 - DEBUG --- f1_plus_f2_temp: [(176, 197), (197, 198), (198, 180), (180, 176)]
2016-08-07 20:38:25,069 - DEBUG --- END 57: test the 0 edge
2016-08-07 20:38:25,069 - INFO --- END 57: Search the right edge to remove. Found: (200, 177)
2016-08-07 20:38:25,069 - INFO --- BEGIN 57: Remove an F3, F4 or F5
2016-08-07 20:38:25,069 - DEBUG --- vertex_to_join_near_v1_on_the_face: 176
2016-08-07 20:38:25,070 - DEBUG --- vertex_to_join_near_v2_on_the_face: 176
2016-08-07 20:38:25,070 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 197
2016-08-07 20:38:25,070 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 180
2016-08-07 20:38:25,070 - DEBUG --- third_face_to_update: [(174, 196), (196, 197), (197, 200), (200, 176), (176, 174)]
2016-08-07 20:38:25,071 - DEBUG --- fourth_face_to_update: [(177, 180), (180, 172), (172, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 174), (174, 176), (176, 177)]
2016-08-07 20:38:25,071 - INFO --- ariadne_step: [3, 200, 177, 176, 176, 197, 180]
2016-08-07 20:38:25,071 - INFO --- END 57: Remove an F3, F4 or F5
2016-08-07 20:38:25,071 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:25,108 - DEBUG --- END: check_regularity
2016-08-07 20:38:25,109 - INFO --- END 57: Main loop
2016-08-07 20:38:25,109 - INFO --- 
2016-08-07 20:38:25,109 - INFO --- BEGIN 58: Main loop
2016-08-07 20:38:25,109 - INFO --- BEGIN 58: Search the right edge to remove
2016-08-07 20:38:25,110 - DEBUG --- BEGIN 58: test the 0 edge
2016-08-07 20:38:25,110 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:25,110 - DEBUG --- edge_to_remove: (384, 362)
2016-08-07 20:38:25,110 - DEBUG --- rotated_edge_to_remove: (362, 384)
2016-08-07 20:38:25,110 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:25,111 - DEBUG --- f1: [(384, 362), (362, 364), (364, 384)]
2016-08-07 20:38:25,111 - DEBUG --- f2: [(362, 384), (384, 377), (377, 360), (360, 362)]
2016-08-07 20:38:25,111 - DEBUG --- edge_to_remove_on_f1: (384, 362)
2016-08-07 20:38:25,111 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:25,112 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:25,112 - DEBUG --- Temporary f1_plus_f2: [(384, 377), (377, 360), (360, 362), (362, 364), (364, 384)]
2016-08-07 20:38:25,112 - DEBUG --- f1_plus_f2: [(364, 377), (377, 360), (360, 364)]
2016-08-07 20:38:25,112 - DEBUG --- END: join_faces
2016-08-07 20:38:25,112 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:25,113 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:25,113 - DEBUG --- Edge to remove found :-) (384, 362)
2016-08-07 20:38:25,113 - DEBUG --- f1: [(384, 362), (362, 364), (364, 384)]
2016-08-07 20:38:25,113 - DEBUG --- f2: [(362, 384), (384, 377), (377, 360), (360, 362)]
2016-08-07 20:38:25,113 - DEBUG --- f1_plus_f2_temp: [(364, 377), (377, 360), (360, 364)]
2016-08-07 20:38:25,114 - DEBUG --- END 58: test the 0 edge
2016-08-07 20:38:25,114 - INFO --- END 58: Search the right edge to remove. Found: (384, 362)
2016-08-07 20:38:25,114 - INFO --- BEGIN 58: Remove an F3, F4 or F5
2016-08-07 20:38:25,114 - DEBUG --- vertex_to_join_near_v1_on_the_face: 364
2016-08-07 20:38:25,114 - DEBUG --- vertex_to_join_near_v2_on_the_face: 364
2016-08-07 20:38:25,115 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 377
2016-08-07 20:38:25,115 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 360
2016-08-07 20:38:25,115 - DEBUG --- third_face_to_update: [(361, 367), (367, 377), (377, 384), (384, 364), (364, 361)]
2016-08-07 20:38:25,115 - DEBUG --- fourth_face_to_update: [(364, 362), (362, 360), (360, 365), (365, 342), (342, 340), (340, 348), (348, 361), (361, 364)]
2016-08-07 20:38:25,116 - INFO --- ariadne_step: [3, 384, 362, 364, 364, 377, 360]
2016-08-07 20:38:25,116 - INFO --- END 58: Remove an F3, F4 or F5
2016-08-07 20:38:25,116 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:25,156 - DEBUG --- END: check_regularity
2016-08-07 20:38:25,156 - INFO --- END 58: Main loop
2016-08-07 20:38:25,156 - INFO --- 
2016-08-07 20:38:25,156 - INFO --- BEGIN 59: Main loop
2016-08-07 20:38:25,157 - INFO --- BEGIN 59: Search the right edge to remove
2016-08-07 20:38:25,157 - DEBUG --- BEGIN 59: test the 0 edge
2016-08-07 20:38:25,157 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:25,157 - DEBUG --- edge_to_remove: (364, 377)
2016-08-07 20:38:25,157 - DEBUG --- rotated_edge_to_remove: (377, 364)
2016-08-07 20:38:25,158 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:25,158 - DEBUG --- f1: [(364, 377), (377, 360), (360, 364)]
2016-08-07 20:38:25,158 - DEBUG --- f2: [(361, 367), (367, 377), (377, 364), (364, 361)]
2016-08-07 20:38:25,158 - DEBUG --- edge_to_remove_on_f1: (364, 377)
2016-08-07 20:38:25,159 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:25,159 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:25,159 - DEBUG --- Temporary f1_plus_f2: [(364, 361), (361, 367), (367, 377), (377, 360), (360, 364)]
2016-08-07 20:38:25,159 - DEBUG --- f1_plus_f2: [(360, 361), (361, 367), (367, 360)]
2016-08-07 20:38:25,160 - DEBUG --- END: join_faces
2016-08-07 20:38:25,160 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:25,160 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:25,160 - DEBUG --- Edge to remove found :-) (364, 377)
2016-08-07 20:38:25,160 - DEBUG --- f1: [(364, 377), (377, 360), (360, 364)]
2016-08-07 20:38:25,161 - DEBUG --- f2: [(361, 367), (367, 377), (377, 364), (364, 361)]
2016-08-07 20:38:25,161 - DEBUG --- f1_plus_f2_temp: [(360, 361), (361, 367), (367, 360)]
2016-08-07 20:38:25,161 - DEBUG --- END 59: test the 0 edge
2016-08-07 20:38:25,161 - INFO --- END 59: Search the right edge to remove. Found: (364, 377)
2016-08-07 20:38:25,161 - INFO --- BEGIN 59: Remove an F3, F4 or F5
2016-08-07 20:38:25,162 - DEBUG --- vertex_to_join_near_v1_on_the_face: 360
2016-08-07 20:38:25,162 - DEBUG --- vertex_to_join_near_v2_on_the_face: 360
2016-08-07 20:38:25,162 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 361
2016-08-07 20:38:25,162 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 367
2016-08-07 20:38:25,163 - DEBUG --- third_face_to_update: [(364, 360), (360, 365), (365, 342), (342, 340), (340, 348), (348, 361), (361, 364)]
2016-08-07 20:38:25,163 - DEBUG --- fourth_face_to_update: [(365, 360), (360, 377), (377, 367), (367, 366), (366, 379), (379, 380), (380, 381), (381, 382), (382, 365)]
2016-08-07 20:38:25,163 - INFO --- ariadne_step: [3, 364, 377, 360, 360, 361, 367]
2016-08-07 20:38:25,163 - INFO --- END 59: Remove an F3, F4 or F5
2016-08-07 20:38:25,164 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:25,200 - DEBUG --- END: check_regularity
2016-08-07 20:38:25,200 - INFO --- END 59: Main loop
2016-08-07 20:38:25,201 - INFO --- 
2016-08-07 20:38:25,201 - INFO --- BEGIN 60: Main loop
2016-08-07 20:38:25,201 - INFO --- BEGIN 60: Search the right edge to remove
2016-08-07 20:38:25,201 - DEBUG --- BEGIN 60: test the 0 edge
2016-08-07 20:38:25,202 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:25,202 - DEBUG --- edge_to_remove: (360, 361)
2016-08-07 20:38:25,202 - DEBUG --- rotated_edge_to_remove: (361, 360)
2016-08-07 20:38:25,202 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:25,203 - DEBUG --- f1: [(360, 361), (361, 367), (367, 360)]
2016-08-07 20:38:25,203 - DEBUG --- f2: [(361, 360), (360, 365), (365, 342), (342, 340), (340, 348), (348, 361)]
2016-08-07 20:38:25,203 - DEBUG --- edge_to_remove_on_f1: (360, 361)
2016-08-07 20:38:25,203 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:25,203 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:25,204 - DEBUG --- Temporary f1_plus_f2: [(360, 365), (365, 342), (342, 340), (340, 348), (348, 361), (361, 367), (367, 360)]
2016-08-07 20:38:25,204 - DEBUG --- f1_plus_f2: [(367, 365), (365, 342), (342, 340), (340, 348), (348, 367)]
2016-08-07 20:38:25,204 - DEBUG --- END: join_faces
2016-08-07 20:38:25,204 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:25,204 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:25,205 - DEBUG --- Edge to remove found :-) (360, 361)
2016-08-07 20:38:25,205 - DEBUG --- f1: [(360, 361), (361, 367), (367, 360)]
2016-08-07 20:38:25,205 - DEBUG --- f2: [(361, 360), (360, 365), (365, 342), (342, 340), (340, 348), (348, 361)]
2016-08-07 20:38:25,205 - DEBUG --- f1_plus_f2_temp: [(367, 365), (365, 342), (342, 340), (340, 348), (348, 367)]
2016-08-07 20:38:25,206 - DEBUG --- END 60: test the 0 edge
2016-08-07 20:38:25,206 - INFO --- END 60: Search the right edge to remove. Found: (360, 361)
2016-08-07 20:38:25,206 - INFO --- BEGIN 60: Remove an F3, F4 or F5
2016-08-07 20:38:25,206 - DEBUG --- vertex_to_join_near_v1_on_the_face: 367
2016-08-07 20:38:25,206 - DEBUG --- vertex_to_join_near_v2_on_the_face: 367
2016-08-07 20:38:25,207 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 365
2016-08-07 20:38:25,207 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 348
2016-08-07 20:38:25,207 - DEBUG --- third_face_to_update: [(365, 360), (360, 367), (367, 366), (366, 379), (379, 380), (380, 381), (381, 382), (382, 365)]
2016-08-07 20:38:25,207 - DEBUG --- fourth_face_to_update: [(327, 46), (46, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 366), (366, 367), (367, 361), (361, 348), (348, 349), (349, 327)]
2016-08-07 20:38:25,208 - INFO --- ariadne_step: [3, 360, 361, 367, 367, 365, 348]
2016-08-07 20:38:25,208 - INFO --- END 60: Remove an F3, F4 or F5
2016-08-07 20:38:25,208 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:25,244 - DEBUG --- END: check_regularity
2016-08-07 20:38:25,244 - INFO --- END 60: Main loop
2016-08-07 20:38:25,245 - INFO --- 
2016-08-07 20:38:25,245 - INFO --- BEGIN 61: Main loop
2016-08-07 20:38:25,245 - INFO --- BEGIN 61: Search the right edge to remove
2016-08-07 20:38:25,245 - DEBUG --- BEGIN 61: test the 0 edge
2016-08-07 20:38:25,246 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:25,246 - DEBUG --- edge_to_remove: (288, 287)
2016-08-07 20:38:25,246 - DEBUG --- rotated_edge_to_remove: (287, 288)
2016-08-07 20:38:25,246 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:25,246 - DEBUG --- f1: [(288, 287), (287, 284), (284, 283), (283, 288)]
2016-08-07 20:38:25,247 - DEBUG --- f2: [(295, 289), (289, 287), (287, 288), (288, 295)]
2016-08-07 20:38:25,247 - DEBUG --- edge_to_remove_on_f1: (288, 287)
2016-08-07 20:38:25,247 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:25,247 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:25,247 - DEBUG --- Temporary f1_plus_f2: [(288, 295), (295, 289), (289, 287), (287, 284), (284, 283), (283, 288)]
2016-08-07 20:38:25,248 - DEBUG --- f1_plus_f2: [(283, 295), (295, 289), (289, 284), (284, 283)]
2016-08-07 20:38:25,248 - DEBUG --- END: join_faces
2016-08-07 20:38:25,248 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:25,248 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:25,249 - DEBUG --- Edge to remove found :-) (288, 287)
2016-08-07 20:38:25,249 - DEBUG --- f1: [(288, 287), (287, 284), (284, 283), (283, 288)]
2016-08-07 20:38:25,249 - DEBUG --- f2: [(295, 289), (289, 287), (287, 288), (288, 295)]
2016-08-07 20:38:25,249 - DEBUG --- f1_plus_f2_temp: [(283, 295), (295, 289), (289, 284), (284, 283)]
2016-08-07 20:38:25,249 - DEBUG --- END 61: test the 0 edge
2016-08-07 20:38:25,250 - INFO --- END 61: Search the right edge to remove. Found: (288, 287)
2016-08-07 20:38:25,250 - INFO --- BEGIN 61: Remove an F3, F4 or F5
2016-08-07 20:38:25,250 - DEBUG --- vertex_to_join_near_v1_on_the_face: 283
2016-08-07 20:38:25,250 - DEBUG --- vertex_to_join_near_v2_on_the_face: 284
2016-08-07 20:38:25,250 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 295
2016-08-07 20:38:25,251 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 289
2016-08-07 20:38:25,251 - DEBUG --- third_face_to_update: [(295, 288), (288, 283), (283, 286), (286, 306), (306, 294), (294, 295)]
2016-08-07 20:38:25,251 - DEBUG --- fourth_face_to_update: [(277, 284), (284, 287), (287, 289), (289, 291), (291, 278), (278, 277)]
2016-08-07 20:38:25,251 - INFO --- ariadne_step: [4, 288, 287, 283, 284, 295, 289]
2016-08-07 20:38:25,252 - INFO --- END 61: Remove an F3, F4 or F5
2016-08-07 20:38:25,252 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:25,287 - DEBUG --- END: check_regularity
2016-08-07 20:38:25,288 - INFO --- END 61: Main loop
2016-08-07 20:38:25,288 - INFO --- 
2016-08-07 20:38:25,288 - INFO --- BEGIN 62: Main loop
2016-08-07 20:38:25,288 - INFO --- BEGIN 62: Search the right edge to remove
2016-08-07 20:38:25,289 - DEBUG --- BEGIN 62: test the 0 edge
2016-08-07 20:38:25,289 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:25,289 - DEBUG --- edge_to_remove: (214, 158)
2016-08-07 20:38:25,289 - DEBUG --- rotated_edge_to_remove: (158, 214)
2016-08-07 20:38:25,289 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:25,290 - DEBUG --- f1: [(214, 158), (158, 150), (150, 152), (152, 214)]
2016-08-07 20:38:25,290 - DEBUG --- f2: [(103, 92), (92, 97), (97, 215), (215, 163), (163, 156), (156, 158), (158, 214), (214, 103)]
2016-08-07 20:38:25,290 - DEBUG --- edge_to_remove_on_f1: (214, 158)
2016-08-07 20:38:25,290 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:25,291 - DEBUG --- index_of_edge_to_remove_on_f2: 6
2016-08-07 20:38:25,291 - DEBUG --- Temporary f1_plus_f2: [(214, 103), (103, 92), (92, 97), (97, 215), (215, 163), (163, 156), (156, 158), (158, 150), (150, 152), (152, 214)]
2016-08-07 20:38:25,291 - DEBUG --- f1_plus_f2: [(152, 103), (103, 92), (92, 97), (97, 215), (215, 163), (163, 156), (156, 150), (150, 152)]
2016-08-07 20:38:25,291 - DEBUG --- END: join_faces
2016-08-07 20:38:25,291 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:25,292 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:25,292 - DEBUG --- Edge to remove found :-) (214, 158)
2016-08-07 20:38:25,292 - DEBUG --- f1: [(214, 158), (158, 150), (150, 152), (152, 214)]
2016-08-07 20:38:25,292 - DEBUG --- f2: [(103, 92), (92, 97), (97, 215), (215, 163), (163, 156), (156, 158), (158, 214), (214, 103)]
2016-08-07 20:38:25,293 - DEBUG --- f1_plus_f2_temp: [(152, 103), (103, 92), (92, 97), (97, 215), (215, 163), (163, 156), (156, 150), (150, 152)]
2016-08-07 20:38:25,293 - DEBUG --- END 62: test the 0 edge
2016-08-07 20:38:25,293 - INFO --- END 62: Search the right edge to remove. Found: (214, 158)
2016-08-07 20:38:25,293 - INFO --- BEGIN 62: Remove an F3, F4 or F5
2016-08-07 20:38:25,293 - DEBUG --- vertex_to_join_near_v1_on_the_face: 152
2016-08-07 20:38:25,294 - DEBUG --- vertex_to_join_near_v2_on_the_face: 150
2016-08-07 20:38:25,294 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 103
2016-08-07 20:38:25,294 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 156
2016-08-07 20:38:25,295 - DEBUG --- third_face_to_update: [(152, 141), (141, 102), (102, 103), (103, 214), (214, 152)]
2016-08-07 20:38:25,295 - DEBUG --- fourth_face_to_update: [(153, 150), (150, 158), (158, 156), (156, 155), (155, 154), (154, 125), (125, 114), (114, 119), (119, 153)]
2016-08-07 20:38:25,295 - INFO --- ariadne_step: [4, 214, 158, 152, 150, 103, 156]
2016-08-07 20:38:25,295 - INFO --- END 62: Remove an F3, F4 or F5
2016-08-07 20:38:25,295 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:25,330 - DEBUG --- END: check_regularity
2016-08-07 20:38:25,330 - INFO --- END 62: Main loop
2016-08-07 20:38:25,331 - INFO --- 
2016-08-07 20:38:25,331 - INFO --- BEGIN 63: Main loop
2016-08-07 20:38:25,331 - INFO --- BEGIN 63: Search the right edge to remove
2016-08-07 20:38:25,331 - DEBUG --- BEGIN 63: test the 0 edge
2016-08-07 20:38:25,332 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:25,332 - DEBUG --- edge_to_remove: (76, 121)
2016-08-07 20:38:25,332 - DEBUG --- rotated_edge_to_remove: (121, 76)
2016-08-07 20:38:25,332 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:25,332 - DEBUG --- f1: [(76, 121), (121, 122), (122, 78), (78, 76)]
2016-08-07 20:38:25,333 - DEBUG --- f2: [(121, 76), (76, 75), (75, 120), (120, 121)]
2016-08-07 20:38:25,333 - DEBUG --- edge_to_remove_on_f1: (76, 121)
2016-08-07 20:38:25,333 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:25,333 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:25,333 - DEBUG --- Temporary f1_plus_f2: [(76, 75), (75, 120), (120, 121), (121, 122), (122, 78), (78, 76)]
2016-08-07 20:38:25,334 - DEBUG --- f1_plus_f2: [(78, 75), (75, 120), (120, 122), (122, 78)]
2016-08-07 20:38:25,334 - DEBUG --- END: join_faces
2016-08-07 20:38:25,334 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:25,334 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:25,335 - DEBUG --- Edge to remove found :-) (76, 121)
2016-08-07 20:38:25,335 - DEBUG --- f1: [(76, 121), (121, 122), (122, 78), (78, 76)]
2016-08-07 20:38:25,335 - DEBUG --- f2: [(121, 76), (76, 75), (75, 120), (120, 121)]
2016-08-07 20:38:25,335 - DEBUG --- f1_plus_f2_temp: [(78, 75), (75, 120), (120, 122), (122, 78)]
2016-08-07 20:38:25,335 - DEBUG --- END 63: test the 0 edge
2016-08-07 20:38:25,336 - INFO --- END 63: Search the right edge to remove. Found: (76, 121)
2016-08-07 20:38:25,336 - INFO --- BEGIN 63: Remove an F3, F4 or F5
2016-08-07 20:38:25,336 - DEBUG --- vertex_to_join_near_v1_on_the_face: 78
2016-08-07 20:38:25,336 - DEBUG --- vertex_to_join_near_v2_on_the_face: 122
2016-08-07 20:38:25,336 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 75
2016-08-07 20:38:25,337 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 120
2016-08-07 20:38:25,337 - DEBUG --- third_face_to_update: [(76, 78), (78, 77), (77, 73), (73, 65), (65, 64), (64, 74), (74, 75), (75, 76)]
2016-08-07 20:38:25,337 - DEBUG --- fourth_face_to_update: [(114, 125), (125, 123), (123, 126), (126, 122), (122, 121), (121, 120), (120, 115), (115, 114)]
2016-08-07 20:38:25,337 - INFO --- ariadne_step: [4, 76, 121, 78, 122, 75, 120]
2016-08-07 20:38:25,338 - INFO --- END 63: Remove an F3, F4 or F5
2016-08-07 20:38:25,338 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:25,372 - DEBUG --- END: check_regularity
2016-08-07 20:38:25,372 - INFO --- END 63: Main loop
2016-08-07 20:38:25,373 - INFO --- 
2016-08-07 20:38:25,373 - INFO --- BEGIN 64: Main loop
2016-08-07 20:38:25,373 - INFO --- BEGIN 64: Search the right edge to remove
2016-08-07 20:38:25,373 - DEBUG --- BEGIN 64: test the 0 edge
2016-08-07 20:38:25,373 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:25,374 - DEBUG --- edge_to_remove: (250, 241)
2016-08-07 20:38:25,374 - DEBUG --- rotated_edge_to_remove: (241, 250)
2016-08-07 20:38:25,374 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:25,374 - DEBUG --- f1: [(250, 241), (241, 234), (234, 238), (238, 250)]
2016-08-07 20:38:25,374 - DEBUG --- f2: [(241, 250), (250, 248), (248, 247), (247, 253), (253, 252), (252, 242), (242, 241)]
2016-08-07 20:38:25,375 - DEBUG --- edge_to_remove_on_f1: (250, 241)
2016-08-07 20:38:25,375 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:25,375 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:25,375 - DEBUG --- Temporary f1_plus_f2: [(250, 248), (248, 247), (247, 253), (253, 252), (252, 242), (242, 241), (241, 234), (234, 238), (238, 250)]
2016-08-07 20:38:25,375 - DEBUG --- f1_plus_f2: [(238, 248), (248, 247), (247, 253), (253, 252), (252, 242), (242, 234), (234, 238)]
2016-08-07 20:38:25,376 - DEBUG --- END: join_faces
2016-08-07 20:38:25,376 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:25,376 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:25,376 - DEBUG --- Edge to remove found :-) (250, 241)
2016-08-07 20:38:25,376 - DEBUG --- f1: [(250, 241), (241, 234), (234, 238), (238, 250)]
2016-08-07 20:38:25,377 - DEBUG --- f2: [(241, 250), (250, 248), (248, 247), (247, 253), (253, 252), (252, 242), (242, 241)]
2016-08-07 20:38:25,377 - DEBUG --- f1_plus_f2_temp: [(238, 248), (248, 247), (247, 253), (253, 252), (252, 242), (242, 234), (234, 238)]
2016-08-07 20:38:25,377 - DEBUG --- END 64: test the 0 edge
2016-08-07 20:38:25,377 - INFO --- END 64: Search the right edge to remove. Found: (250, 241)
2016-08-07 20:38:25,378 - INFO --- BEGIN 64: Remove an F3, F4 or F5
2016-08-07 20:38:25,378 - DEBUG --- vertex_to_join_near_v1_on_the_face: 238
2016-08-07 20:38:25,378 - DEBUG --- vertex_to_join_near_v2_on_the_face: 234
2016-08-07 20:38:25,378 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 248
2016-08-07 20:38:25,378 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 242
2016-08-07 20:38:25,379 - DEBUG --- third_face_to_update: [(248, 250), (250, 238), (238, 237), (237, 248)]
2016-08-07 20:38:25,379 - DEBUG --- fourth_face_to_update: [(242, 210), (210, 209), (209, 240), (240, 239), (239, 233), (233, 234), (234, 241), (241, 242)]
2016-08-07 20:38:25,379 - INFO --- ariadne_step: [4, 250, 241, 238, 234, 248, 242]
2016-08-07 20:38:25,379 - INFO --- END 64: Remove an F3, F4 or F5
2016-08-07 20:38:25,380 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:25,414 - DEBUG --- END: check_regularity
2016-08-07 20:38:25,415 - INFO --- END 64: Main loop
2016-08-07 20:38:25,415 - INFO --- 
2016-08-07 20:38:25,415 - INFO --- BEGIN 65: Main loop
2016-08-07 20:38:25,415 - INFO --- BEGIN 65: Search the right edge to remove
2016-08-07 20:38:25,416 - DEBUG --- BEGIN 65: test the 0 edge
2016-08-07 20:38:25,416 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:25,416 - DEBUG --- edge_to_remove: (248, 238)
2016-08-07 20:38:25,416 - DEBUG --- rotated_edge_to_remove: (238, 248)
2016-08-07 20:38:25,417 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:25,417 - DEBUG --- f1: [(248, 238), (238, 237), (237, 248)]
2016-08-07 20:38:25,418 - DEBUG --- f2: [(238, 248), (248, 247), (247, 253), (253, 252), (252, 242), (242, 234), (234, 238)]
2016-08-07 20:38:25,418 - DEBUG --- edge_to_remove_on_f1: (248, 238)
2016-08-07 20:38:25,418 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:25,419 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:25,419 - DEBUG --- Temporary f1_plus_f2: [(248, 247), (247, 253), (253, 252), (252, 242), (242, 234), (234, 238), (238, 237), (237, 248)]
2016-08-07 20:38:25,420 - DEBUG --- f1_plus_f2: [(237, 247), (247, 253), (253, 252), (252, 242), (242, 234), (234, 237)]
2016-08-07 20:38:25,420 - DEBUG --- END: join_faces
2016-08-07 20:38:25,421 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:25,421 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:25,422 - DEBUG --- Edge to remove found :-) (248, 238)
2016-08-07 20:38:25,422 - DEBUG --- f1: [(248, 238), (238, 237), (237, 248)]
2016-08-07 20:38:25,422 - DEBUG --- f2: [(238, 248), (248, 247), (247, 253), (253, 252), (252, 242), (242, 234), (234, 238)]
2016-08-07 20:38:25,423 - DEBUG --- f1_plus_f2_temp: [(237, 247), (247, 253), (253, 252), (252, 242), (242, 234), (234, 237)]
2016-08-07 20:38:25,423 - DEBUG --- END 65: test the 0 edge
2016-08-07 20:38:25,424 - INFO --- END 65: Search the right edge to remove. Found: (248, 238)
2016-08-07 20:38:25,424 - INFO --- BEGIN 65: Remove an F3, F4 or F5
2016-08-07 20:38:25,424 - DEBUG --- vertex_to_join_near_v1_on_the_face: 237
2016-08-07 20:38:25,425 - DEBUG --- vertex_to_join_near_v2_on_the_face: 237
2016-08-07 20:38:25,426 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 247
2016-08-07 20:38:25,426 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 234
2016-08-07 20:38:25,427 - DEBUG --- third_face_to_update: [(249, 247), (247, 248), (248, 237), (237, 236), (236, 243), (243, 249)]
2016-08-07 20:38:25,428 - DEBUG --- fourth_face_to_update: [(232, 229), (229, 228), (228, 236), (236, 237), (237, 238), (238, 234), (234, 233), (233, 232)]
2016-08-07 20:38:25,429 - INFO --- ariadne_step: [3, 248, 238, 237, 237, 247, 234]
2016-08-07 20:38:25,429 - INFO --- END 65: Remove an F3, F4 or F5
2016-08-07 20:38:25,430 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:25,507 - DEBUG --- END: check_regularity
2016-08-07 20:38:25,507 - INFO --- END 65: Main loop
2016-08-07 20:38:25,507 - INFO --- 
2016-08-07 20:38:25,508 - INFO --- BEGIN 66: Main loop
2016-08-07 20:38:25,508 - INFO --- BEGIN 66: Search the right edge to remove
2016-08-07 20:38:25,508 - DEBUG --- BEGIN 66: test the 0 edge
2016-08-07 20:38:25,508 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:25,508 - DEBUG --- edge_to_remove: (25, 393)
2016-08-07 20:38:25,509 - DEBUG --- rotated_edge_to_remove: (393, 25)
2016-08-07 20:38:25,509 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:25,509 - DEBUG --- f1: [(25, 393), (393, 394), (394, 12), (12, 25)]
2016-08-07 20:38:25,509 - DEBUG --- f2: [(20, 19), (19, 395), (395, 393), (393, 25), (25, 23), (23, 20)]
2016-08-07 20:38:25,509 - DEBUG --- edge_to_remove_on_f1: (25, 393)
2016-08-07 20:38:25,510 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:25,510 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:25,510 - DEBUG --- Temporary f1_plus_f2: [(25, 23), (23, 20), (20, 19), (19, 395), (395, 393), (393, 394), (394, 12), (12, 25)]
2016-08-07 20:38:25,510 - DEBUG --- f1_plus_f2: [(12, 23), (23, 20), (20, 19), (19, 395), (395, 394), (394, 12)]
2016-08-07 20:38:25,510 - DEBUG --- END: join_faces
2016-08-07 20:38:25,511 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:25,511 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:25,511 - DEBUG --- Edge to remove found :-) (25, 393)
2016-08-07 20:38:25,511 - DEBUG --- f1: [(25, 393), (393, 394), (394, 12), (12, 25)]
2016-08-07 20:38:25,512 - DEBUG --- f2: [(20, 19), (19, 395), (395, 393), (393, 25), (25, 23), (23, 20)]
2016-08-07 20:38:25,512 - DEBUG --- f1_plus_f2_temp: [(12, 23), (23, 20), (20, 19), (19, 395), (395, 394), (394, 12)]
2016-08-07 20:38:25,512 - DEBUG --- END 66: test the 0 edge
2016-08-07 20:38:25,512 - INFO --- END 66: Search the right edge to remove. Found: (25, 393)
2016-08-07 20:38:25,512 - INFO --- BEGIN 66: Remove an F3, F4 or F5
2016-08-07 20:38:25,513 - DEBUG --- vertex_to_join_near_v1_on_the_face: 12
2016-08-07 20:38:25,513 - DEBUG --- vertex_to_join_near_v2_on_the_face: 394
2016-08-07 20:38:25,513 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 23
2016-08-07 20:38:25,513 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 395
2016-08-07 20:38:25,514 - DEBUG --- third_face_to_update: [(25, 12), (12, 11), (11, 23), (23, 25)]
2016-08-07 20:38:25,514 - DEBUG --- fourth_face_to_update: [(366, 368), (368, 391), (391, 392), (392, 394), (394, 393), (393, 395), (395, 379), (379, 366)]
2016-08-07 20:38:25,514 - INFO --- ariadne_step: [4, 25, 393, 12, 394, 23, 395]
2016-08-07 20:38:25,515 - INFO --- END 66: Remove an F3, F4 or F5
2016-08-07 20:38:25,515 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:25,549 - DEBUG --- END: check_regularity
2016-08-07 20:38:25,549 - INFO --- END 66: Main loop
2016-08-07 20:38:25,550 - INFO --- 
2016-08-07 20:38:25,550 - INFO --- BEGIN 67: Main loop
2016-08-07 20:38:25,550 - INFO --- BEGIN 67: Search the right edge to remove
2016-08-07 20:38:25,551 - DEBUG --- BEGIN 67: test the 0 edge
2016-08-07 20:38:25,551 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:25,551 - DEBUG --- edge_to_remove: (23, 12)
2016-08-07 20:38:25,551 - DEBUG --- rotated_edge_to_remove: (12, 23)
2016-08-07 20:38:25,551 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:25,552 - DEBUG --- f1: [(23, 12), (12, 11), (11, 23)]
2016-08-07 20:38:25,552 - DEBUG --- f2: [(12, 23), (23, 20), (20, 19), (19, 395), (395, 394), (394, 12)]
2016-08-07 20:38:25,552 - DEBUG --- edge_to_remove_on_f1: (23, 12)
2016-08-07 20:38:25,552 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:25,553 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:25,553 - DEBUG --- Temporary f1_plus_f2: [(23, 20), (20, 19), (19, 395), (395, 394), (394, 12), (12, 11), (11, 23)]
2016-08-07 20:38:25,553 - DEBUG --- f1_plus_f2: [(11, 20), (20, 19), (19, 395), (395, 394), (394, 11)]
2016-08-07 20:38:25,553 - DEBUG --- END: join_faces
2016-08-07 20:38:25,553 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:25,554 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:25,554 - DEBUG --- Edge to remove found :-) (23, 12)
2016-08-07 20:38:25,554 - DEBUG --- f1: [(23, 12), (12, 11), (11, 23)]
2016-08-07 20:38:25,554 - DEBUG --- f2: [(12, 23), (23, 20), (20, 19), (19, 395), (395, 394), (394, 12)]
2016-08-07 20:38:25,554 - DEBUG --- f1_plus_f2_temp: [(11, 20), (20, 19), (19, 395), (395, 394), (394, 11)]
2016-08-07 20:38:25,555 - DEBUG --- END 67: test the 0 edge
2016-08-07 20:38:25,555 - INFO --- END 67: Search the right edge to remove. Found: (23, 12)
2016-08-07 20:38:25,555 - INFO --- BEGIN 67: Remove an F3, F4 or F5
2016-08-07 20:38:25,555 - DEBUG --- vertex_to_join_near_v1_on_the_face: 11
2016-08-07 20:38:25,555 - DEBUG --- vertex_to_join_near_v2_on_the_face: 11
2016-08-07 20:38:25,556 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 20
2016-08-07 20:38:25,556 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 394
2016-08-07 20:38:25,556 - DEBUG --- third_face_to_update: [(9, 20), (20, 23), (23, 11), (11, 9)]
2016-08-07 20:38:25,556 - DEBUG --- fourth_face_to_update: [(8, 9), (9, 11), (11, 12), (12, 394), (394, 392), (392, 3), (3, 7), (7, 8)]
2016-08-07 20:38:25,557 - INFO --- ariadne_step: [3, 23, 12, 11, 11, 20, 394]
2016-08-07 20:38:25,557 - INFO --- END 67: Remove an F3, F4 or F5
2016-08-07 20:38:25,557 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:25,593 - DEBUG --- END: check_regularity
2016-08-07 20:38:25,594 - INFO --- END 67: Main loop
2016-08-07 20:38:25,594 - INFO --- 
2016-08-07 20:38:25,594 - INFO --- BEGIN 68: Main loop
2016-08-07 20:38:25,594 - INFO --- BEGIN 68: Search the right edge to remove
2016-08-07 20:38:25,594 - DEBUG --- BEGIN 68: test the 0 edge
2016-08-07 20:38:25,595 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:25,595 - DEBUG --- edge_to_remove: (9, 20)
2016-08-07 20:38:25,595 - DEBUG --- rotated_edge_to_remove: (20, 9)
2016-08-07 20:38:25,595 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:25,596 - DEBUG --- f1: [(9, 20), (20, 11), (11, 9)]
2016-08-07 20:38:25,596 - DEBUG --- f2: [(9, 8), (8, 16), (16, 19), (19, 20), (20, 9)]
2016-08-07 20:38:25,596 - DEBUG --- edge_to_remove_on_f1: (9, 20)
2016-08-07 20:38:25,596 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:25,596 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:25,597 - DEBUG --- Temporary f1_plus_f2: [(9, 8), (8, 16), (16, 19), (19, 20), (20, 11), (11, 9)]
2016-08-07 20:38:25,597 - DEBUG --- f1_plus_f2: [(11, 8), (8, 16), (16, 19), (19, 11)]
2016-08-07 20:38:25,597 - DEBUG --- END: join_faces
2016-08-07 20:38:25,597 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:25,597 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:25,598 - DEBUG --- Edge to remove found :-) (9, 20)
2016-08-07 20:38:25,598 - DEBUG --- f1: [(9, 20), (20, 11), (11, 9)]
2016-08-07 20:38:25,598 - DEBUG --- f2: [(9, 8), (8, 16), (16, 19), (19, 20), (20, 9)]
2016-08-07 20:38:25,598 - DEBUG --- f1_plus_f2_temp: [(11, 8), (8, 16), (16, 19), (19, 11)]
2016-08-07 20:38:25,599 - DEBUG --- END 68: test the 0 edge
2016-08-07 20:38:25,599 - INFO --- END 68: Search the right edge to remove. Found: (9, 20)
2016-08-07 20:38:25,599 - INFO --- BEGIN 68: Remove an F3, F4 or F5
2016-08-07 20:38:25,599 - DEBUG --- vertex_to_join_near_v1_on_the_face: 11
2016-08-07 20:38:25,600 - DEBUG --- vertex_to_join_near_v2_on_the_face: 11
2016-08-07 20:38:25,600 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 8
2016-08-07 20:38:25,600 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 19
2016-08-07 20:38:25,601 - DEBUG --- third_face_to_update: [(8, 9), (9, 11), (11, 394), (394, 392), (392, 3), (3, 7), (7, 8)]
2016-08-07 20:38:25,601 - DEBUG --- fourth_face_to_update: [(11, 20), (20, 19), (19, 395), (395, 394), (394, 11)]
2016-08-07 20:38:25,601 - INFO --- ariadne_step: [3, 9, 20, 11, 11, 8, 19]
2016-08-07 20:38:25,601 - INFO --- END 68: Remove an F3, F4 or F5
2016-08-07 20:38:25,601 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:25,634 - DEBUG --- END: check_regularity
2016-08-07 20:38:25,635 - INFO --- END 68: Main loop
2016-08-07 20:38:25,635 - INFO --- 
2016-08-07 20:38:25,635 - INFO --- BEGIN 69: Main loop
2016-08-07 20:38:25,635 - INFO --- BEGIN 69: Search the right edge to remove
2016-08-07 20:38:25,636 - DEBUG --- BEGIN 69: test the 0 edge
2016-08-07 20:38:25,636 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:25,636 - DEBUG --- edge_to_remove: (88, 91)
2016-08-07 20:38:25,636 - DEBUG --- rotated_edge_to_remove: (91, 88)
2016-08-07 20:38:25,636 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:25,637 - DEBUG --- f1: [(88, 91), (91, 89), (89, 87), (87, 88)]
2016-08-07 20:38:25,637 - DEBUG --- f2: [(88, 81), (81, 83), (83, 91), (91, 88)]
2016-08-07 20:38:25,637 - DEBUG --- edge_to_remove_on_f1: (88, 91)
2016-08-07 20:38:25,637 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:25,638 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:25,638 - DEBUG --- Temporary f1_plus_f2: [(88, 81), (81, 83), (83, 91), (91, 89), (89, 87), (87, 88)]
2016-08-07 20:38:25,638 - DEBUG --- f1_plus_f2: [(87, 81), (81, 83), (83, 89), (89, 87)]
2016-08-07 20:38:25,638 - DEBUG --- END: join_faces
2016-08-07 20:38:25,638 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:25,639 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:25,639 - DEBUG --- Edge to remove found :-) (88, 91)
2016-08-07 20:38:25,639 - DEBUG --- f1: [(88, 91), (91, 89), (89, 87), (87, 88)]
2016-08-07 20:38:25,639 - DEBUG --- f2: [(88, 81), (81, 83), (83, 91), (91, 88)]
2016-08-07 20:38:25,639 - DEBUG --- f1_plus_f2_temp: [(87, 81), (81, 83), (83, 89), (89, 87)]
2016-08-07 20:38:25,640 - DEBUG --- END 69: test the 0 edge
2016-08-07 20:38:25,640 - INFO --- END 69: Search the right edge to remove. Found: (88, 91)
2016-08-07 20:38:25,640 - INFO --- BEGIN 69: Remove an F3, F4 or F5
2016-08-07 20:38:25,640 - DEBUG --- vertex_to_join_near_v1_on_the_face: 87
2016-08-07 20:38:25,641 - DEBUG --- vertex_to_join_near_v2_on_the_face: 89
2016-08-07 20:38:25,641 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 81
2016-08-07 20:38:25,641 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 83
2016-08-07 20:38:25,641 - DEBUG --- third_face_to_update: [(69, 81), (81, 88), (88, 87), (87, 86), (86, 66), (66, 69)]
2016-08-07 20:38:25,641 - DEBUG --- fourth_face_to_update: [(89, 91), (91, 83), (83, 84), (84, 89)]
2016-08-07 20:38:25,642 - INFO --- ariadne_step: [4, 88, 91, 87, 89, 81, 83]
2016-08-07 20:38:25,642 - INFO --- END 69: Remove an F3, F4 or F5
2016-08-07 20:38:25,642 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:25,674 - DEBUG --- END: check_regularity
2016-08-07 20:38:25,675 - INFO --- END 69: Main loop
2016-08-07 20:38:25,675 - INFO --- 
2016-08-07 20:38:25,675 - INFO --- BEGIN 70: Main loop
2016-08-07 20:38:25,675 - INFO --- BEGIN 70: Search the right edge to remove
2016-08-07 20:38:25,675 - DEBUG --- BEGIN 70: test the 0 edge
2016-08-07 20:38:25,676 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:25,676 - DEBUG --- edge_to_remove: (89, 83)
2016-08-07 20:38:25,676 - DEBUG --- rotated_edge_to_remove: (83, 89)
2016-08-07 20:38:25,676 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:25,677 - DEBUG --- f1: [(89, 83), (83, 84), (84, 89)]
2016-08-07 20:38:25,677 - DEBUG --- f2: [(87, 81), (81, 83), (83, 89), (89, 87)]
2016-08-07 20:38:25,677 - DEBUG --- edge_to_remove_on_f1: (89, 83)
2016-08-07 20:38:25,677 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:25,677 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:25,678 - DEBUG --- Temporary f1_plus_f2: [(89, 87), (87, 81), (81, 83), (83, 84), (84, 89)]
2016-08-07 20:38:25,678 - DEBUG --- f1_plus_f2: [(84, 87), (87, 81), (81, 84)]
2016-08-07 20:38:25,678 - DEBUG --- END: join_faces
2016-08-07 20:38:25,678 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:25,679 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:25,679 - DEBUG --- Edge to remove found :-) (89, 83)
2016-08-07 20:38:25,679 - DEBUG --- f1: [(89, 83), (83, 84), (84, 89)]
2016-08-07 20:38:25,679 - DEBUG --- f2: [(87, 81), (81, 83), (83, 89), (89, 87)]
2016-08-07 20:38:25,679 - DEBUG --- f1_plus_f2_temp: [(84, 87), (87, 81), (81, 84)]
2016-08-07 20:38:25,680 - DEBUG --- END 70: test the 0 edge
2016-08-07 20:38:25,680 - INFO --- END 70: Search the right edge to remove. Found: (89, 83)
2016-08-07 20:38:25,680 - INFO --- BEGIN 70: Remove an F3, F4 or F5
2016-08-07 20:38:25,680 - DEBUG --- vertex_to_join_near_v1_on_the_face: 84
2016-08-07 20:38:25,680 - DEBUG --- vertex_to_join_near_v2_on_the_face: 84
2016-08-07 20:38:25,681 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 87
2016-08-07 20:38:25,681 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 81
2016-08-07 20:38:25,681 - DEBUG --- third_face_to_update: [(82, 86), (86, 87), (87, 89), (89, 84), (84, 82)]
2016-08-07 20:38:25,681 - DEBUG --- fourth_face_to_update: [(84, 83), (83, 81), (81, 69), (69, 65), (65, 73), (73, 80), (80, 82), (82, 84)]
2016-08-07 20:38:25,682 - INFO --- ariadne_step: [3, 89, 83, 84, 84, 87, 81]
2016-08-07 20:38:25,682 - INFO --- END 70: Remove an F3, F4 or F5
2016-08-07 20:38:25,682 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:25,747 - DEBUG --- END: check_regularity
2016-08-07 20:38:25,747 - INFO --- END 70: Main loop
2016-08-07 20:38:25,748 - INFO --- 
2016-08-07 20:38:25,748 - INFO --- BEGIN 71: Main loop
2016-08-07 20:38:25,748 - INFO --- BEGIN 71: Search the right edge to remove
2016-08-07 20:38:25,748 - DEBUG --- BEGIN 71: test the 0 edge
2016-08-07 20:38:25,749 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:25,749 - DEBUG --- edge_to_remove: (84, 87)
2016-08-07 20:38:25,749 - DEBUG --- rotated_edge_to_remove: (87, 84)
2016-08-07 20:38:25,749 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:25,750 - DEBUG --- f1: [(84, 87), (87, 81), (81, 84)]
2016-08-07 20:38:25,750 - DEBUG --- f2: [(82, 86), (86, 87), (87, 84), (84, 82)]
2016-08-07 20:38:25,750 - DEBUG --- edge_to_remove_on_f1: (84, 87)
2016-08-07 20:38:25,750 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:25,751 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:25,751 - DEBUG --- Temporary f1_plus_f2: [(84, 82), (82, 86), (86, 87), (87, 81), (81, 84)]
2016-08-07 20:38:25,751 - DEBUG --- f1_plus_f2: [(81, 82), (82, 86), (86, 81)]
2016-08-07 20:38:25,751 - DEBUG --- END: join_faces
2016-08-07 20:38:25,751 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:25,752 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:25,752 - DEBUG --- Edge to remove found :-) (84, 87)
2016-08-07 20:38:25,752 - DEBUG --- f1: [(84, 87), (87, 81), (81, 84)]
2016-08-07 20:38:25,752 - DEBUG --- f2: [(82, 86), (86, 87), (87, 84), (84, 82)]
2016-08-07 20:38:25,752 - DEBUG --- f1_plus_f2_temp: [(81, 82), (82, 86), (86, 81)]
2016-08-07 20:38:25,753 - DEBUG --- END 71: test the 0 edge
2016-08-07 20:38:25,753 - INFO --- END 71: Search the right edge to remove. Found: (84, 87)
2016-08-07 20:38:25,753 - INFO --- BEGIN 71: Remove an F3, F4 or F5
2016-08-07 20:38:25,754 - DEBUG --- vertex_to_join_near_v1_on_the_face: 81
2016-08-07 20:38:25,754 - DEBUG --- vertex_to_join_near_v2_on_the_face: 81
2016-08-07 20:38:25,754 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 82
2016-08-07 20:38:25,754 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 86
2016-08-07 20:38:25,755 - DEBUG --- third_face_to_update: [(84, 81), (81, 69), (69, 65), (65, 73), (73, 80), (80, 82), (82, 84)]
2016-08-07 20:38:25,755 - DEBUG --- fourth_face_to_update: [(69, 81), (81, 87), (87, 86), (86, 66), (66, 69)]
2016-08-07 20:38:25,755 - INFO --- ariadne_step: [3, 84, 87, 81, 81, 82, 86]
2016-08-07 20:38:25,756 - INFO --- END 71: Remove an F3, F4 or F5
2016-08-07 20:38:25,756 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:25,791 - DEBUG --- END: check_regularity
2016-08-07 20:38:25,792 - INFO --- END 71: Main loop
2016-08-07 20:38:25,792 - INFO --- 
2016-08-07 20:38:25,792 - INFO --- BEGIN 72: Main loop
2016-08-07 20:38:25,793 - INFO --- BEGIN 72: Search the right edge to remove
2016-08-07 20:38:25,793 - DEBUG --- BEGIN 72: test the 0 edge
2016-08-07 20:38:25,793 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:25,793 - DEBUG --- edge_to_remove: (81, 82)
2016-08-07 20:38:25,794 - DEBUG --- rotated_edge_to_remove: (82, 81)
2016-08-07 20:38:25,794 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:25,794 - DEBUG --- f1: [(81, 82), (82, 86), (86, 81)]
2016-08-07 20:38:25,794 - DEBUG --- f2: [(82, 81), (81, 69), (69, 65), (65, 73), (73, 80), (80, 82)]
2016-08-07 20:38:25,794 - DEBUG --- edge_to_remove_on_f1: (81, 82)
2016-08-07 20:38:25,795 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:25,795 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:25,795 - DEBUG --- Temporary f1_plus_f2: [(81, 69), (69, 65), (65, 73), (73, 80), (80, 82), (82, 86), (86, 81)]
2016-08-07 20:38:25,795 - DEBUG --- f1_plus_f2: [(86, 69), (69, 65), (65, 73), (73, 80), (80, 86)]
2016-08-07 20:38:25,795 - DEBUG --- END: join_faces
2016-08-07 20:38:25,796 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:25,796 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:25,796 - DEBUG --- Edge to remove found :-) (81, 82)
2016-08-07 20:38:25,796 - DEBUG --- f1: [(81, 82), (82, 86), (86, 81)]
2016-08-07 20:38:25,796 - DEBUG --- f2: [(82, 81), (81, 69), (69, 65), (65, 73), (73, 80), (80, 82)]
2016-08-07 20:38:25,797 - DEBUG --- f1_plus_f2_temp: [(86, 69), (69, 65), (65, 73), (73, 80), (80, 86)]
2016-08-07 20:38:25,797 - DEBUG --- END 72: test the 0 edge
2016-08-07 20:38:25,797 - INFO --- END 72: Search the right edge to remove. Found: (81, 82)
2016-08-07 20:38:25,798 - INFO --- BEGIN 72: Remove an F3, F4 or F5
2016-08-07 20:38:25,798 - DEBUG --- vertex_to_join_near_v1_on_the_face: 86
2016-08-07 20:38:25,798 - DEBUG --- vertex_to_join_near_v2_on_the_face: 86
2016-08-07 20:38:25,798 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 69
2016-08-07 20:38:25,798 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 80
2016-08-07 20:38:25,799 - DEBUG --- third_face_to_update: [(69, 81), (81, 86), (86, 66), (66, 69)]
2016-08-07 20:38:25,799 - DEBUG --- fourth_face_to_update: [(82, 80), (80, 72), (72, 66), (66, 86), (86, 82)]
2016-08-07 20:38:25,799 - INFO --- ariadne_step: [3, 81, 82, 86, 86, 69, 80]
2016-08-07 20:38:25,799 - INFO --- END 72: Remove an F3, F4 or F5
2016-08-07 20:38:25,799 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:25,860 - DEBUG --- END: check_regularity
2016-08-07 20:38:25,861 - INFO --- END 72: Main loop
2016-08-07 20:38:25,872 - INFO --- 
2016-08-07 20:38:25,873 - INFO --- BEGIN 73: Main loop
2016-08-07 20:38:25,874 - INFO --- BEGIN 73: Search the right edge to remove
2016-08-07 20:38:25,874 - DEBUG --- BEGIN 73: test the 0 edge
2016-08-07 20:38:25,875 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:25,876 - DEBUG --- edge_to_remove: (69, 86)
2016-08-07 20:38:25,876 - DEBUG --- rotated_edge_to_remove: (86, 69)
2016-08-07 20:38:25,877 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:25,877 - DEBUG --- f1: [(69, 86), (86, 66), (66, 69)]
2016-08-07 20:38:25,878 - DEBUG --- f2: [(86, 69), (69, 65), (65, 73), (73, 80), (80, 86)]
2016-08-07 20:38:25,879 - DEBUG --- edge_to_remove_on_f1: (69, 86)
2016-08-07 20:38:25,879 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:25,880 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:25,880 - DEBUG --- Temporary f1_plus_f2: [(69, 65), (65, 73), (73, 80), (80, 86), (86, 66), (66, 69)]
2016-08-07 20:38:25,881 - DEBUG --- f1_plus_f2: [(66, 65), (65, 73), (73, 80), (80, 66)]
2016-08-07 20:38:25,883 - DEBUG --- END: join_faces
2016-08-07 20:38:25,884 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:25,885 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:25,885 - DEBUG --- Edge to remove found :-) (69, 86)
2016-08-07 20:38:25,886 - DEBUG --- f1: [(69, 86), (86, 66), (66, 69)]
2016-08-07 20:38:25,887 - DEBUG --- f2: [(86, 69), (69, 65), (65, 73), (73, 80), (80, 86)]
2016-08-07 20:38:25,887 - DEBUG --- f1_plus_f2_temp: [(66, 65), (65, 73), (73, 80), (80, 66)]
2016-08-07 20:38:25,890 - DEBUG --- END 73: test the 0 edge
2016-08-07 20:38:25,894 - INFO --- END 73: Search the right edge to remove. Found: (69, 86)
2016-08-07 20:38:25,895 - INFO --- BEGIN 73: Remove an F3, F4 or F5
2016-08-07 20:38:25,895 - DEBUG --- vertex_to_join_near_v1_on_the_face: 66
2016-08-07 20:38:25,896 - DEBUG --- vertex_to_join_near_v2_on_the_face: 66
2016-08-07 20:38:25,896 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 65
2016-08-07 20:38:25,896 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 80
2016-08-07 20:38:25,897 - DEBUG --- third_face_to_update: [(66, 72), (72, 71), (71, 63), (63, 59), (59, 70), (70, 64), (64, 65), (65, 69), (69, 66)]
2016-08-07 20:38:25,900 - DEBUG --- fourth_face_to_update: [(86, 80), (80, 72), (72, 66), (66, 86)]
2016-08-07 20:38:25,900 - INFO --- ariadne_step: [3, 69, 86, 66, 66, 65, 80]
2016-08-07 20:38:25,901 - INFO --- END 73: Remove an F3, F4 or F5
2016-08-07 20:38:25,901 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:25,972 - DEBUG --- END: check_regularity
2016-08-07 20:38:25,972 - INFO --- END 73: Main loop
2016-08-07 20:38:25,973 - INFO --- 
2016-08-07 20:38:25,973 - INFO --- BEGIN 74: Main loop
2016-08-07 20:38:25,973 - INFO --- BEGIN 74: Search the right edge to remove
2016-08-07 20:38:25,974 - DEBUG --- BEGIN 74: test the 0 edge
2016-08-07 20:38:25,974 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:25,974 - DEBUG --- edge_to_remove: (66, 80)
2016-08-07 20:38:25,974 - DEBUG --- rotated_edge_to_remove: (80, 66)
2016-08-07 20:38:25,975 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:25,975 - DEBUG --- f1: [(66, 80), (80, 72), (72, 66)]
2016-08-07 20:38:25,975 - DEBUG --- f2: [(66, 65), (65, 73), (73, 80), (80, 66)]
2016-08-07 20:38:25,976 - DEBUG --- edge_to_remove_on_f1: (66, 80)
2016-08-07 20:38:25,976 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:25,976 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:25,976 - DEBUG --- Temporary f1_plus_f2: [(66, 65), (65, 73), (73, 80), (80, 72), (72, 66)]
2016-08-07 20:38:25,977 - DEBUG --- f1_plus_f2: [(72, 65), (65, 73), (73, 72)]
2016-08-07 20:38:25,977 - DEBUG --- END: join_faces
2016-08-07 20:38:25,977 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:25,977 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:25,978 - DEBUG --- Edge to remove found :-) (66, 80)
2016-08-07 20:38:25,978 - DEBUG --- f1: [(66, 80), (80, 72), (72, 66)]
2016-08-07 20:38:25,978 - DEBUG --- f2: [(66, 65), (65, 73), (73, 80), (80, 66)]
2016-08-07 20:38:25,978 - DEBUG --- f1_plus_f2_temp: [(72, 65), (65, 73), (73, 72)]
2016-08-07 20:38:25,979 - DEBUG --- END 74: test the 0 edge
2016-08-07 20:38:25,979 - INFO --- END 74: Search the right edge to remove. Found: (66, 80)
2016-08-07 20:38:25,979 - INFO --- BEGIN 74: Remove an F3, F4 or F5
2016-08-07 20:38:25,979 - DEBUG --- vertex_to_join_near_v1_on_the_face: 72
2016-08-07 20:38:25,980 - DEBUG --- vertex_to_join_near_v2_on_the_face: 72
2016-08-07 20:38:25,980 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 65
2016-08-07 20:38:25,980 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 73
2016-08-07 20:38:25,980 - DEBUG --- third_face_to_update: [(66, 72), (72, 71), (71, 63), (63, 59), (59, 70), (70, 64), (64, 65), (65, 66)]
2016-08-07 20:38:25,981 - DEBUG --- fourth_face_to_update: [(72, 80), (80, 73), (73, 77), (77, 138), (138, 137), (137, 213), (213, 259), (259, 71), (71, 72)]
2016-08-07 20:38:25,981 - INFO --- ariadne_step: [3, 66, 80, 72, 72, 65, 73]
2016-08-07 20:38:25,981 - INFO --- END 74: Remove an F3, F4 or F5
2016-08-07 20:38:25,981 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,016 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,016 - INFO --- END 74: Main loop
2016-08-07 20:38:26,016 - INFO --- 
2016-08-07 20:38:26,017 - INFO --- BEGIN 75: Main loop
2016-08-07 20:38:26,017 - INFO --- BEGIN 75: Search the right edge to remove
2016-08-07 20:38:26,017 - DEBUG --- BEGIN 75: test the 0 edge
2016-08-07 20:38:26,017 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:26,017 - DEBUG --- edge_to_remove: (72, 65)
2016-08-07 20:38:26,018 - DEBUG --- rotated_edge_to_remove: (65, 72)
2016-08-07 20:38:26,018 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,018 - DEBUG --- f1: [(72, 65), (65, 73), (73, 72)]
2016-08-07 20:38:26,018 - DEBUG --- f2: [(65, 72), (72, 71), (71, 63), (63, 59), (59, 70), (70, 64), (64, 65)]
2016-08-07 20:38:26,019 - DEBUG --- edge_to_remove_on_f1: (72, 65)
2016-08-07 20:38:26,019 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,019 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:26,020 - DEBUG --- Temporary f1_plus_f2: [(72, 71), (71, 63), (63, 59), (59, 70), (70, 64), (64, 65), (65, 73), (73, 72)]
2016-08-07 20:38:26,020 - DEBUG --- f1_plus_f2: [(73, 71), (71, 63), (63, 59), (59, 70), (70, 64), (64, 73)]
2016-08-07 20:38:26,020 - DEBUG --- END: join_faces
2016-08-07 20:38:26,021 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,021 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,021 - DEBUG --- Edge to remove found :-) (72, 65)
2016-08-07 20:38:26,021 - DEBUG --- f1: [(72, 65), (65, 73), (73, 72)]
2016-08-07 20:38:26,021 - DEBUG --- f2: [(65, 72), (72, 71), (71, 63), (63, 59), (59, 70), (70, 64), (64, 65)]
2016-08-07 20:38:26,022 - DEBUG --- f1_plus_f2_temp: [(73, 71), (71, 63), (63, 59), (59, 70), (70, 64), (64, 73)]
2016-08-07 20:38:26,022 - DEBUG --- END 75: test the 0 edge
2016-08-07 20:38:26,023 - INFO --- END 75: Search the right edge to remove. Found: (72, 65)
2016-08-07 20:38:26,023 - INFO --- BEGIN 75: Remove an F3, F4 or F5
2016-08-07 20:38:26,023 - DEBUG --- vertex_to_join_near_v1_on_the_face: 73
2016-08-07 20:38:26,023 - DEBUG --- vertex_to_join_near_v2_on_the_face: 73
2016-08-07 20:38:26,023 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 71
2016-08-07 20:38:26,024 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 64
2016-08-07 20:38:26,025 - DEBUG --- third_face_to_update: [(72, 73), (73, 77), (77, 138), (138, 137), (137, 213), (213, 259), (259, 71), (71, 72)]
2016-08-07 20:38:26,025 - DEBUG --- fourth_face_to_update: [(75, 78), (78, 77), (77, 73), (73, 65), (65, 64), (64, 74), (74, 75)]
2016-08-07 20:38:26,025 - INFO --- ariadne_step: [3, 72, 65, 73, 73, 71, 64]
2016-08-07 20:38:26,025 - INFO --- END 75: Remove an F3, F4 or F5
2016-08-07 20:38:26,026 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,060 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,061 - INFO --- END 75: Main loop
2016-08-07 20:38:26,061 - INFO --- 
2016-08-07 20:38:26,062 - INFO --- BEGIN 76: Main loop
2016-08-07 20:38:26,062 - INFO --- BEGIN 76: Search the right edge to remove
2016-08-07 20:38:26,062 - DEBUG --- BEGIN 76: test the 0 edge
2016-08-07 20:38:26,062 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:26,062 - DEBUG --- edge_to_remove: (240, 167)
2016-08-07 20:38:26,063 - DEBUG --- rotated_edge_to_remove: (167, 240)
2016-08-07 20:38:26,063 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,063 - DEBUG --- f1: [(240, 167), (167, 166), (166, 239), (239, 240)]
2016-08-07 20:38:26,063 - DEBUG --- f2: [(167, 240), (240, 209), (209, 162), (162, 167)]
2016-08-07 20:38:26,063 - DEBUG --- edge_to_remove_on_f1: (240, 167)
2016-08-07 20:38:26,064 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,064 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:26,064 - DEBUG --- Temporary f1_plus_f2: [(240, 209), (209, 162), (162, 167), (167, 166), (166, 239), (239, 240)]
2016-08-07 20:38:26,064 - DEBUG --- f1_plus_f2: [(239, 209), (209, 162), (162, 166), (166, 239)]
2016-08-07 20:38:26,065 - DEBUG --- END: join_faces
2016-08-07 20:38:26,065 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,065 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,065 - DEBUG --- Edge to remove found :-) (240, 167)
2016-08-07 20:38:26,065 - DEBUG --- f1: [(240, 167), (167, 166), (166, 239), (239, 240)]
2016-08-07 20:38:26,066 - DEBUG --- f2: [(167, 240), (240, 209), (209, 162), (162, 167)]
2016-08-07 20:38:26,066 - DEBUG --- f1_plus_f2_temp: [(239, 209), (209, 162), (162, 166), (166, 239)]
2016-08-07 20:38:26,066 - DEBUG --- END 76: test the 0 edge
2016-08-07 20:38:26,066 - INFO --- END 76: Search the right edge to remove. Found: (240, 167)
2016-08-07 20:38:26,066 - INFO --- BEGIN 76: Remove an F3, F4 or F5
2016-08-07 20:38:26,067 - DEBUG --- vertex_to_join_near_v1_on_the_face: 239
2016-08-07 20:38:26,067 - DEBUG --- vertex_to_join_near_v2_on_the_face: 166
2016-08-07 20:38:26,067 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 209
2016-08-07 20:38:26,067 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 162
2016-08-07 20:38:26,068 - DEBUG --- third_face_to_update: [(242, 210), (210, 209), (209, 240), (240, 239), (239, 233), (233, 234), (234, 242)]
2016-08-07 20:38:26,068 - DEBUG --- fourth_face_to_update: [(164, 165), (165, 166), (166, 167), (167, 162), (162, 161), (161, 160), (160, 159), (159, 155), (155, 156), (156, 163), (163, 164)]
2016-08-07 20:38:26,068 - INFO --- ariadne_step: [4, 240, 167, 239, 166, 209, 162]
2016-08-07 20:38:26,068 - INFO --- END 76: Remove an F3, F4 or F5
2016-08-07 20:38:26,068 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,097 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,098 - INFO --- END 76: Main loop
2016-08-07 20:38:26,098 - INFO --- 
2016-08-07 20:38:26,098 - INFO --- BEGIN 77: Main loop
2016-08-07 20:38:26,099 - INFO --- BEGIN 77: Search the right edge to remove
2016-08-07 20:38:26,099 - DEBUG --- BEGIN 77: test the 0 edge
2016-08-07 20:38:26,099 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:26,099 - DEBUG --- edge_to_remove: (211, 210)
2016-08-07 20:38:26,100 - DEBUG --- rotated_edge_to_remove: (210, 211)
2016-08-07 20:38:26,100 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,100 - DEBUG --- f1: [(211, 210), (210, 242), (242, 252), (252, 211)]
2016-08-07 20:38:26,100 - DEBUG --- f2: [(213, 137), (137, 136), (136, 161), (161, 162), (162, 209), (209, 210), (210, 211), (211, 213)]
2016-08-07 20:38:26,101 - DEBUG --- edge_to_remove_on_f1: (211, 210)
2016-08-07 20:38:26,101 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,101 - DEBUG --- index_of_edge_to_remove_on_f2: 6
2016-08-07 20:38:26,101 - DEBUG --- Temporary f1_plus_f2: [(211, 213), (213, 137), (137, 136), (136, 161), (161, 162), (162, 209), (209, 210), (210, 242), (242, 252), (252, 211)]
2016-08-07 20:38:26,101 - DEBUG --- f1_plus_f2: [(252, 213), (213, 137), (137, 136), (136, 161), (161, 162), (162, 209), (209, 242), (242, 252)]
2016-08-07 20:38:26,102 - DEBUG --- END: join_faces
2016-08-07 20:38:26,102 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,102 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,102 - DEBUG --- Edge to remove found :-) (211, 210)
2016-08-07 20:38:26,102 - DEBUG --- f1: [(211, 210), (210, 242), (242, 252), (252, 211)]
2016-08-07 20:38:26,103 - DEBUG --- f2: [(213, 137), (137, 136), (136, 161), (161, 162), (162, 209), (209, 210), (210, 211), (211, 213)]
2016-08-07 20:38:26,103 - DEBUG --- f1_plus_f2_temp: [(252, 213), (213, 137), (137, 136), (136, 161), (161, 162), (162, 209), (209, 242), (242, 252)]
2016-08-07 20:38:26,103 - DEBUG --- END 77: test the 0 edge
2016-08-07 20:38:26,103 - INFO --- END 77: Search the right edge to remove. Found: (211, 210)
2016-08-07 20:38:26,103 - INFO --- BEGIN 77: Remove an F3, F4 or F5
2016-08-07 20:38:26,104 - DEBUG --- vertex_to_join_near_v1_on_the_face: 252
2016-08-07 20:38:26,104 - DEBUG --- vertex_to_join_near_v2_on_the_face: 242
2016-08-07 20:38:26,104 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 213
2016-08-07 20:38:26,104 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 209
2016-08-07 20:38:26,105 - DEBUG --- third_face_to_update: [(258, 259), (259, 213), (213, 211), (211, 252), (252, 253), (253, 254), (254, 255), (255, 256), (256, 258)]
2016-08-07 20:38:26,105 - DEBUG --- fourth_face_to_update: [(242, 210), (210, 209), (209, 239), (239, 233), (233, 234), (234, 242)]
2016-08-07 20:38:26,105 - INFO --- ariadne_step: [4, 211, 210, 252, 242, 213, 209]
2016-08-07 20:38:26,105 - INFO --- END 77: Remove an F3, F4 or F5
2016-08-07 20:38:26,105 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,132 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,133 - INFO --- END 77: Main loop
2016-08-07 20:38:26,133 - INFO --- 
2016-08-07 20:38:26,134 - INFO --- BEGIN 78: Main loop
2016-08-07 20:38:26,134 - INFO --- BEGIN 78: Search the right edge to remove
2016-08-07 20:38:26,134 - DEBUG --- BEGIN 78: test the 0 edge
2016-08-07 20:38:26,134 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:26,134 - DEBUG --- edge_to_remove: (333, 332)
2016-08-07 20:38:26,135 - DEBUG --- rotated_edge_to_remove: (332, 333)
2016-08-07 20:38:26,135 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,135 - DEBUG --- f1: [(333, 332), (332, 344), (344, 345), (345, 333)]
2016-08-07 20:38:26,135 - DEBUG --- f2: [(235, 135), (135, 57), (57, 68), (68, 331), (331, 332), (332, 333), (333, 235)]
2016-08-07 20:38:26,135 - DEBUG --- edge_to_remove_on_f1: (333, 332)
2016-08-07 20:38:26,136 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,136 - DEBUG --- index_of_edge_to_remove_on_f2: 5
2016-08-07 20:38:26,136 - DEBUG --- Temporary f1_plus_f2: [(333, 235), (235, 135), (135, 57), (57, 68), (68, 331), (331, 332), (332, 344), (344, 345), (345, 333)]
2016-08-07 20:38:26,136 - DEBUG --- f1_plus_f2: [(345, 235), (235, 135), (135, 57), (57, 68), (68, 331), (331, 344), (344, 345)]
2016-08-07 20:38:26,136 - DEBUG --- END: join_faces
2016-08-07 20:38:26,137 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,137 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,137 - DEBUG --- Edge to remove found :-) (333, 332)
2016-08-07 20:38:26,137 - DEBUG --- f1: [(333, 332), (332, 344), (344, 345), (345, 333)]
2016-08-07 20:38:26,137 - DEBUG --- f2: [(235, 135), (135, 57), (57, 68), (68, 331), (331, 332), (332, 333), (333, 235)]
2016-08-07 20:38:26,138 - DEBUG --- f1_plus_f2_temp: [(345, 235), (235, 135), (135, 57), (57, 68), (68, 331), (331, 344), (344, 345)]
2016-08-07 20:38:26,138 - DEBUG --- END 78: test the 0 edge
2016-08-07 20:38:26,138 - INFO --- END 78: Search the right edge to remove. Found: (333, 332)
2016-08-07 20:38:26,138 - INFO --- BEGIN 78: Remove an F3, F4 or F5
2016-08-07 20:38:26,139 - DEBUG --- vertex_to_join_near_v1_on_the_face: 345
2016-08-07 20:38:26,139 - DEBUG --- vertex_to_join_near_v2_on_the_face: 344
2016-08-07 20:38:26,139 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 235
2016-08-07 20:38:26,139 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 331
2016-08-07 20:38:26,139 - DEBUG --- third_face_to_update: [(333, 345), (345, 224), (224, 235), (235, 333)]
2016-08-07 20:38:26,139 - DEBUG --- fourth_face_to_update: [(335, 344), (344, 332), (332, 331), (331, 335)]
2016-08-07 20:38:26,140 - INFO --- ariadne_step: [4, 333, 332, 345, 344, 235, 331]
2016-08-07 20:38:26,140 - INFO --- END 78: Remove an F3, F4 or F5
2016-08-07 20:38:26,140 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,167 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,168 - INFO --- END 78: Main loop
2016-08-07 20:38:26,168 - INFO --- 
2016-08-07 20:38:26,168 - INFO --- BEGIN 79: Main loop
2016-08-07 20:38:26,168 - INFO --- BEGIN 79: Search the right edge to remove
2016-08-07 20:38:26,169 - DEBUG --- BEGIN 79: test the 0 edge
2016-08-07 20:38:26,169 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:26,169 - DEBUG --- edge_to_remove: (335, 344)
2016-08-07 20:38:26,169 - DEBUG --- rotated_edge_to_remove: (344, 335)
2016-08-07 20:38:26,169 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,170 - DEBUG --- f1: [(335, 344), (344, 331), (331, 335)]
2016-08-07 20:38:26,170 - DEBUG --- f2: [(335, 212), (212, 224), (224, 345), (345, 344), (344, 335)]
2016-08-07 20:38:26,170 - DEBUG --- edge_to_remove_on_f1: (335, 344)
2016-08-07 20:38:26,170 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,170 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:26,171 - DEBUG --- Temporary f1_plus_f2: [(335, 212), (212, 224), (224, 345), (345, 344), (344, 331), (331, 335)]
2016-08-07 20:38:26,171 - DEBUG --- f1_plus_f2: [(331, 212), (212, 224), (224, 345), (345, 331)]
2016-08-07 20:38:26,171 - DEBUG --- END: join_faces
2016-08-07 20:38:26,171 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,171 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,172 - DEBUG --- Edge to remove found :-) (335, 344)
2016-08-07 20:38:26,172 - DEBUG --- f1: [(335, 344), (344, 331), (331, 335)]
2016-08-07 20:38:26,172 - DEBUG --- f2: [(335, 212), (212, 224), (224, 345), (345, 344), (344, 335)]
2016-08-07 20:38:26,172 - DEBUG --- f1_plus_f2_temp: [(331, 212), (212, 224), (224, 345), (345, 331)]
2016-08-07 20:38:26,172 - DEBUG --- END 79: test the 0 edge
2016-08-07 20:38:26,173 - INFO --- END 79: Search the right edge to remove. Found: (335, 344)
2016-08-07 20:38:26,173 - INFO --- BEGIN 79: Remove an F3, F4 or F5
2016-08-07 20:38:26,173 - DEBUG --- vertex_to_join_near_v1_on_the_face: 331
2016-08-07 20:38:26,173 - DEBUG --- vertex_to_join_near_v2_on_the_face: 331
2016-08-07 20:38:26,174 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 212
2016-08-07 20:38:26,174 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 345
2016-08-07 20:38:26,174 - DEBUG --- third_face_to_update: [(79, 340), (340, 342), (342, 336), (336, 212), (212, 335), (335, 331), (331, 68), (68, 79)]
2016-08-07 20:38:26,174 - DEBUG --- fourth_face_to_update: [(345, 235), (235, 135), (135, 57), (57, 68), (68, 331), (331, 344), (344, 345)]
2016-08-07 20:38:26,174 - INFO --- ariadne_step: [3, 335, 344, 331, 331, 212, 345]
2016-08-07 20:38:26,175 - INFO --- END 79: Remove an F3, F4 or F5
2016-08-07 20:38:26,175 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,201 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,202 - INFO --- END 79: Main loop
2016-08-07 20:38:26,202 - INFO --- 
2016-08-07 20:38:26,202 - INFO --- BEGIN 80: Main loop
2016-08-07 20:38:26,202 - INFO --- BEGIN 80: Search the right edge to remove
2016-08-07 20:38:26,203 - DEBUG --- BEGIN 80: test the 0 edge
2016-08-07 20:38:26,203 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:26,203 - DEBUG --- edge_to_remove: (235, 345)
2016-08-07 20:38:26,203 - DEBUG --- rotated_edge_to_remove: (345, 235)
2016-08-07 20:38:26,203 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,204 - DEBUG --- f1: [(235, 345), (345, 224), (224, 235)]
2016-08-07 20:38:26,204 - DEBUG --- f2: [(345, 235), (235, 135), (135, 57), (57, 68), (68, 331), (331, 345)]
2016-08-07 20:38:26,204 - DEBUG --- edge_to_remove_on_f1: (235, 345)
2016-08-07 20:38:26,204 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,204 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:26,205 - DEBUG --- Temporary f1_plus_f2: [(235, 135), (135, 57), (57, 68), (68, 331), (331, 345), (345, 224), (224, 235)]
2016-08-07 20:38:26,205 - DEBUG --- f1_plus_f2: [(224, 135), (135, 57), (57, 68), (68, 331), (331, 224)]
2016-08-07 20:38:26,205 - DEBUG --- END: join_faces
2016-08-07 20:38:26,205 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,206 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,206 - DEBUG --- Edge to remove found :-) (235, 345)
2016-08-07 20:38:26,206 - DEBUG --- f1: [(235, 345), (345, 224), (224, 235)]
2016-08-07 20:38:26,206 - DEBUG --- f2: [(345, 235), (235, 135), (135, 57), (57, 68), (68, 331), (331, 345)]
2016-08-07 20:38:26,206 - DEBUG --- f1_plus_f2_temp: [(224, 135), (135, 57), (57, 68), (68, 331), (331, 224)]
2016-08-07 20:38:26,207 - DEBUG --- END 80: test the 0 edge
2016-08-07 20:38:26,207 - INFO --- END 80: Search the right edge to remove. Found: (235, 345)
2016-08-07 20:38:26,207 - INFO --- BEGIN 80: Remove an F3, F4 or F5
2016-08-07 20:38:26,207 - DEBUG --- vertex_to_join_near_v1_on_the_face: 224
2016-08-07 20:38:26,207 - DEBUG --- vertex_to_join_near_v2_on_the_face: 224
2016-08-07 20:38:26,208 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 135
2016-08-07 20:38:26,208 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 331
2016-08-07 20:38:26,208 - DEBUG --- third_face_to_update: [(336, 190), (190, 301), (301, 146), (146, 135), (135, 235), (235, 224), (224, 212), (212, 336)]
2016-08-07 20:38:26,208 - DEBUG --- fourth_face_to_update: [(331, 212), (212, 224), (224, 345), (345, 331)]
2016-08-07 20:38:26,209 - INFO --- ariadne_step: [3, 235, 345, 224, 224, 135, 331]
2016-08-07 20:38:26,209 - INFO --- END 80: Remove an F3, F4 or F5
2016-08-07 20:38:26,209 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,235 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,236 - INFO --- END 80: Main loop
2016-08-07 20:38:26,236 - INFO --- 
2016-08-07 20:38:26,236 - INFO --- BEGIN 81: Main loop
2016-08-07 20:38:26,237 - INFO --- BEGIN 81: Search the right edge to remove
2016-08-07 20:38:26,237 - DEBUG --- BEGIN 81: test the 0 edge
2016-08-07 20:38:26,237 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:26,237 - DEBUG --- edge_to_remove: (331, 212)
2016-08-07 20:38:26,237 - DEBUG --- rotated_edge_to_remove: (212, 331)
2016-08-07 20:38:26,238 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,238 - DEBUG --- f1: [(331, 212), (212, 224), (224, 331)]
2016-08-07 20:38:26,238 - DEBUG --- f2: [(79, 340), (340, 342), (342, 336), (336, 212), (212, 331), (331, 68), (68, 79)]
2016-08-07 20:38:26,238 - DEBUG --- edge_to_remove_on_f1: (331, 212)
2016-08-07 20:38:26,239 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,239 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:26,239 - DEBUG --- Temporary f1_plus_f2: [(331, 68), (68, 79), (79, 340), (340, 342), (342, 336), (336, 212), (212, 224), (224, 331)]
2016-08-07 20:38:26,239 - DEBUG --- f1_plus_f2: [(224, 68), (68, 79), (79, 340), (340, 342), (342, 336), (336, 224)]
2016-08-07 20:38:26,239 - DEBUG --- END: join_faces
2016-08-07 20:38:26,240 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,240 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,240 - DEBUG --- Edge to remove found :-) (331, 212)
2016-08-07 20:38:26,240 - DEBUG --- f1: [(331, 212), (212, 224), (224, 331)]
2016-08-07 20:38:26,241 - DEBUG --- f2: [(79, 340), (340, 342), (342, 336), (336, 212), (212, 331), (331, 68), (68, 79)]
2016-08-07 20:38:26,241 - DEBUG --- f1_plus_f2_temp: [(224, 68), (68, 79), (79, 340), (340, 342), (342, 336), (336, 224)]
2016-08-07 20:38:26,241 - DEBUG --- END 81: test the 0 edge
2016-08-07 20:38:26,241 - INFO --- END 81: Search the right edge to remove. Found: (331, 212)
2016-08-07 20:38:26,241 - INFO --- BEGIN 81: Remove an F3, F4 or F5
2016-08-07 20:38:26,241 - DEBUG --- vertex_to_join_near_v1_on_the_face: 224
2016-08-07 20:38:26,242 - DEBUG --- vertex_to_join_near_v2_on_the_face: 224
2016-08-07 20:38:26,242 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 68
2016-08-07 20:38:26,242 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 336
2016-08-07 20:38:26,243 - DEBUG --- third_face_to_update: [(224, 135), (135, 57), (57, 68), (68, 331), (331, 224)]
2016-08-07 20:38:26,243 - DEBUG --- fourth_face_to_update: [(336, 190), (190, 301), (301, 146), (146, 135), (135, 224), (224, 212), (212, 336)]
2016-08-07 20:38:26,243 - INFO --- ariadne_step: [3, 331, 212, 224, 224, 68, 336]
2016-08-07 20:38:26,243 - INFO --- END 81: Remove an F3, F4 or F5
2016-08-07 20:38:26,243 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,269 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,269 - INFO --- END 81: Main loop
2016-08-07 20:38:26,270 - INFO --- 
2016-08-07 20:38:26,270 - INFO --- BEGIN 82: Main loop
2016-08-07 20:38:26,270 - INFO --- BEGIN 82: Search the right edge to remove
2016-08-07 20:38:26,271 - DEBUG --- BEGIN 82: test the 0 edge
2016-08-07 20:38:26,271 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:26,271 - DEBUG --- edge_to_remove: (115, 120)
2016-08-07 20:38:26,271 - DEBUG --- rotated_edge_to_remove: (120, 115)
2016-08-07 20:38:26,271 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,272 - DEBUG --- f1: [(115, 120), (120, 75), (75, 74), (74, 115)]
2016-08-07 20:38:26,272 - DEBUG --- f2: [(114, 125), (125, 123), (123, 126), (126, 122), (122, 120), (120, 115), (115, 114)]
2016-08-07 20:38:26,272 - DEBUG --- edge_to_remove_on_f1: (115, 120)
2016-08-07 20:38:26,272 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,272 - DEBUG --- index_of_edge_to_remove_on_f2: 5
2016-08-07 20:38:26,273 - DEBUG --- Temporary f1_plus_f2: [(115, 114), (114, 125), (125, 123), (123, 126), (126, 122), (122, 120), (120, 75), (75, 74), (74, 115)]
2016-08-07 20:38:26,273 - DEBUG --- f1_plus_f2: [(74, 114), (114, 125), (125, 123), (123, 126), (126, 122), (122, 75), (75, 74)]
2016-08-07 20:38:26,273 - DEBUG --- END: join_faces
2016-08-07 20:38:26,273 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,273 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,274 - DEBUG --- Edge to remove found :-) (115, 120)
2016-08-07 20:38:26,274 - DEBUG --- f1: [(115, 120), (120, 75), (75, 74), (74, 115)]
2016-08-07 20:38:26,274 - DEBUG --- f2: [(114, 125), (125, 123), (123, 126), (126, 122), (122, 120), (120, 115), (115, 114)]
2016-08-07 20:38:26,274 - DEBUG --- f1_plus_f2_temp: [(74, 114), (114, 125), (125, 123), (123, 126), (126, 122), (122, 75), (75, 74)]
2016-08-07 20:38:26,274 - DEBUG --- END 82: test the 0 edge
2016-08-07 20:38:26,275 - INFO --- END 82: Search the right edge to remove. Found: (115, 120)
2016-08-07 20:38:26,275 - INFO --- BEGIN 82: Remove an F3, F4 or F5
2016-08-07 20:38:26,275 - DEBUG --- vertex_to_join_near_v1_on_the_face: 74
2016-08-07 20:38:26,275 - DEBUG --- vertex_to_join_near_v2_on_the_face: 75
2016-08-07 20:38:26,275 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 114
2016-08-07 20:38:26,276 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 122
2016-08-07 20:38:26,276 - DEBUG --- third_face_to_update: [(70, 107), (107, 116), (116, 117), (117, 118), (118, 119), (119, 114), (114, 115), (115, 74), (74, 64), (64, 70)]
2016-08-07 20:38:26,276 - DEBUG --- fourth_face_to_update: [(78, 75), (75, 120), (120, 122), (122, 78)]
2016-08-07 20:38:26,276 - INFO --- ariadne_step: [4, 115, 120, 74, 75, 114, 122]
2016-08-07 20:38:26,277 - INFO --- END 82: Remove an F3, F4 or F5
2016-08-07 20:38:26,277 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,302 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,302 - INFO --- END 82: Main loop
2016-08-07 20:38:26,302 - INFO --- 
2016-08-07 20:38:26,302 - INFO --- BEGIN 83: Main loop
2016-08-07 20:38:26,303 - INFO --- BEGIN 83: Search the right edge to remove
2016-08-07 20:38:26,303 - DEBUG --- BEGIN 83: test the 0 edge
2016-08-07 20:38:26,303 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:26,303 - DEBUG --- edge_to_remove: (78, 75)
2016-08-07 20:38:26,304 - DEBUG --- rotated_edge_to_remove: (75, 78)
2016-08-07 20:38:26,304 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,304 - DEBUG --- f1: [(78, 75), (75, 122), (122, 78)]
2016-08-07 20:38:26,304 - DEBUG --- f2: [(75, 78), (78, 77), (77, 73), (73, 64), (64, 74), (74, 75)]
2016-08-07 20:38:26,305 - DEBUG --- edge_to_remove_on_f1: (78, 75)
2016-08-07 20:38:26,305 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,305 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:26,305 - DEBUG --- Temporary f1_plus_f2: [(78, 77), (77, 73), (73, 64), (64, 74), (74, 75), (75, 122), (122, 78)]
2016-08-07 20:38:26,306 - DEBUG --- f1_plus_f2: [(122, 77), (77, 73), (73, 64), (64, 74), (74, 122)]
2016-08-07 20:38:26,306 - DEBUG --- END: join_faces
2016-08-07 20:38:26,306 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,306 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,306 - DEBUG --- Edge to remove found :-) (78, 75)
2016-08-07 20:38:26,307 - DEBUG --- f1: [(78, 75), (75, 122), (122, 78)]
2016-08-07 20:38:26,307 - DEBUG --- f2: [(75, 78), (78, 77), (77, 73), (73, 64), (64, 74), (74, 75)]
2016-08-07 20:38:26,307 - DEBUG --- f1_plus_f2_temp: [(122, 77), (77, 73), (73, 64), (64, 74), (74, 122)]
2016-08-07 20:38:26,307 - DEBUG --- END 83: test the 0 edge
2016-08-07 20:38:26,307 - INFO --- END 83: Search the right edge to remove. Found: (78, 75)
2016-08-07 20:38:26,308 - INFO --- BEGIN 83: Remove an F3, F4 or F5
2016-08-07 20:38:26,308 - DEBUG --- vertex_to_join_near_v1_on_the_face: 122
2016-08-07 20:38:26,309 - DEBUG --- vertex_to_join_near_v2_on_the_face: 122
2016-08-07 20:38:26,309 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 77
2016-08-07 20:38:26,309 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 74
2016-08-07 20:38:26,309 - DEBUG --- third_face_to_update: [(77, 78), (78, 122), (122, 126), (126, 138), (138, 77)]
2016-08-07 20:38:26,310 - DEBUG --- fourth_face_to_update: [(74, 114), (114, 125), (125, 123), (123, 126), (126, 122), (122, 75), (75, 74)]
2016-08-07 20:38:26,310 - INFO --- ariadne_step: [3, 78, 75, 122, 122, 77, 74]
2016-08-07 20:38:26,310 - INFO --- END 83: Remove an F3, F4 or F5
2016-08-07 20:38:26,310 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,335 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,335 - INFO --- END 83: Main loop
2016-08-07 20:38:26,336 - INFO --- 
2016-08-07 20:38:26,336 - INFO --- BEGIN 84: Main loop
2016-08-07 20:38:26,336 - INFO --- BEGIN 84: Search the right edge to remove
2016-08-07 20:38:26,336 - DEBUG --- BEGIN 84: test the 0 edge
2016-08-07 20:38:26,336 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:26,337 - DEBUG --- edge_to_remove: (142, 145)
2016-08-07 20:38:26,337 - DEBUG --- rotated_edge_to_remove: (145, 142)
2016-08-07 20:38:26,337 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,337 - DEBUG --- f1: [(142, 145), (145, 144), (144, 139), (139, 142)]
2016-08-07 20:38:26,337 - DEBUG --- f2: [(153, 148), (148, 147), (147, 145), (145, 142), (142, 141), (141, 152), (152, 150), (150, 153)]
2016-08-07 20:38:26,338 - DEBUG --- edge_to_remove_on_f1: (142, 145)
2016-08-07 20:38:26,338 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,338 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:26,338 - DEBUG --- Temporary f1_plus_f2: [(142, 141), (141, 152), (152, 150), (150, 153), (153, 148), (148, 147), (147, 145), (145, 144), (144, 139), (139, 142)]
2016-08-07 20:38:26,338 - DEBUG --- f1_plus_f2: [(139, 141), (141, 152), (152, 150), (150, 153), (153, 148), (148, 147), (147, 144), (144, 139)]
2016-08-07 20:38:26,339 - DEBUG --- END: join_faces
2016-08-07 20:38:26,339 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,339 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,339 - DEBUG --- Edge to remove found :-) (142, 145)
2016-08-07 20:38:26,339 - DEBUG --- f1: [(142, 145), (145, 144), (144, 139), (139, 142)]
2016-08-07 20:38:26,340 - DEBUG --- f2: [(153, 148), (148, 147), (147, 145), (145, 142), (142, 141), (141, 152), (152, 150), (150, 153)]
2016-08-07 20:38:26,340 - DEBUG --- f1_plus_f2_temp: [(139, 141), (141, 152), (152, 150), (150, 153), (153, 148), (148, 147), (147, 144), (144, 139)]
2016-08-07 20:38:26,340 - DEBUG --- END 84: test the 0 edge
2016-08-07 20:38:26,340 - INFO --- END 84: Search the right edge to remove. Found: (142, 145)
2016-08-07 20:38:26,341 - INFO --- BEGIN 84: Remove an F3, F4 or F5
2016-08-07 20:38:26,341 - DEBUG --- vertex_to_join_near_v1_on_the_face: 139
2016-08-07 20:38:26,341 - DEBUG --- vertex_to_join_near_v2_on_the_face: 144
2016-08-07 20:38:26,341 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 141
2016-08-07 20:38:26,341 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 147
2016-08-07 20:38:26,342 - DEBUG --- third_face_to_update: [(98, 102), (102, 141), (141, 142), (142, 139), (139, 140), (140, 106), (106, 98)]
2016-08-07 20:38:26,342 - DEBUG --- fourth_face_to_update: [(144, 145), (145, 147), (147, 117), (117, 116), (116, 144)]
2016-08-07 20:38:26,342 - INFO --- ariadne_step: [4, 142, 145, 139, 144, 141, 147]
2016-08-07 20:38:26,342 - INFO --- END 84: Remove an F3, F4 or F5
2016-08-07 20:38:26,343 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,366 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,367 - INFO --- END 84: Main loop
2016-08-07 20:38:26,367 - INFO --- 
2016-08-07 20:38:26,367 - INFO --- BEGIN 85: Main loop
2016-08-07 20:38:26,368 - INFO --- BEGIN 85: Search the right edge to remove
2016-08-07 20:38:26,368 - DEBUG --- BEGIN 85: test the 0 edge
2016-08-07 20:38:26,368 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:26,368 - DEBUG --- edge_to_remove: (260, 261)
2016-08-07 20:38:26,369 - DEBUG --- rotated_edge_to_remove: (261, 260)
2016-08-07 20:38:26,369 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,369 - DEBUG --- f1: [(260, 261), (261, 255), (255, 254), (254, 260)]
2016-08-07 20:38:26,369 - DEBUG --- f2: [(243, 244), (244, 261), (261, 260), (260, 249), (249, 243)]
2016-08-07 20:38:26,370 - DEBUG --- edge_to_remove_on_f1: (260, 261)
2016-08-07 20:38:26,370 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,370 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:26,370 - DEBUG --- Temporary f1_plus_f2: [(260, 249), (249, 243), (243, 244), (244, 261), (261, 255), (255, 254), (254, 260)]
2016-08-07 20:38:26,371 - DEBUG --- f1_plus_f2: [(254, 249), (249, 243), (243, 244), (244, 255), (255, 254)]
2016-08-07 20:38:26,371 - DEBUG --- END: join_faces
2016-08-07 20:38:26,371 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,371 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,371 - DEBUG --- Edge to remove found :-) (260, 261)
2016-08-07 20:38:26,372 - DEBUG --- f1: [(260, 261), (261, 255), (255, 254), (254, 260)]
2016-08-07 20:38:26,372 - DEBUG --- f2: [(243, 244), (244, 261), (261, 260), (260, 249), (249, 243)]
2016-08-07 20:38:26,372 - DEBUG --- f1_plus_f2_temp: [(254, 249), (249, 243), (243, 244), (244, 255), (255, 254)]
2016-08-07 20:38:26,372 - DEBUG --- END 85: test the 0 edge
2016-08-07 20:38:26,372 - INFO --- END 85: Search the right edge to remove. Found: (260, 261)
2016-08-07 20:38:26,373 - INFO --- BEGIN 85: Remove an F3, F4 or F5
2016-08-07 20:38:26,373 - DEBUG --- vertex_to_join_near_v1_on_the_face: 254
2016-08-07 20:38:26,373 - DEBUG --- vertex_to_join_near_v2_on_the_face: 255
2016-08-07 20:38:26,373 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 249
2016-08-07 20:38:26,373 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 244
2016-08-07 20:38:26,374 - DEBUG --- third_face_to_update: [(254, 253), (253, 247), (247, 249), (249, 260), (260, 254)]
2016-08-07 20:38:26,374 - DEBUG --- fourth_face_to_update: [(255, 261), (261, 244), (244, 230), (230, 231), (231, 256), (256, 255)]
2016-08-07 20:38:26,374 - INFO --- ariadne_step: [4, 260, 261, 254, 255, 249, 244]
2016-08-07 20:38:26,374 - INFO --- END 85: Remove an F3, F4 or F5
2016-08-07 20:38:26,375 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,398 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,399 - INFO --- END 85: Main loop
2016-08-07 20:38:26,399 - INFO --- 
2016-08-07 20:38:26,400 - INFO --- BEGIN 86: Main loop
2016-08-07 20:38:26,400 - INFO --- BEGIN 86: Search the right edge to remove
2016-08-07 20:38:26,400 - DEBUG --- BEGIN 86: test the 0 edge
2016-08-07 20:38:26,400 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:26,400 - DEBUG --- edge_to_remove: (34, 382)
2016-08-07 20:38:26,401 - DEBUG --- rotated_edge_to_remove: (382, 34)
2016-08-07 20:38:26,401 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,401 - DEBUG --- f1: [(34, 382), (382, 381), (381, 29), (29, 34)]
2016-08-07 20:38:26,401 - DEBUG --- f2: [(342, 365), (365, 382), (382, 34), (34, 37), (37, 217), (217, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 323), (323, 190), (190, 336), (336, 342)]
2016-08-07 20:38:26,401 - DEBUG --- edge_to_remove_on_f1: (34, 382)
2016-08-07 20:38:26,402 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,402 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:26,402 - DEBUG --- Temporary f1_plus_f2: [(34, 37), (37, 217), (217, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 323), (323, 190), (190, 336), (336, 342), (342, 365), (365, 382), (382, 381), (381, 29), (29, 34)]
2016-08-07 20:38:26,402 - DEBUG --- f1_plus_f2: [(29, 37), (37, 217), (217, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 323), (323, 190), (190, 336), (336, 342), (342, 365), (365, 381), (381, 29)]
2016-08-07 20:38:26,402 - DEBUG --- END: join_faces
2016-08-07 20:38:26,403 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,403 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,403 - DEBUG --- Edge to remove found :-) (34, 382)
2016-08-07 20:38:26,403 - DEBUG --- f1: [(34, 382), (382, 381), (381, 29), (29, 34)]
2016-08-07 20:38:26,403 - DEBUG --- f2: [(342, 365), (365, 382), (382, 34), (34, 37), (37, 217), (217, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 323), (323, 190), (190, 336), (336, 342)]
2016-08-07 20:38:26,404 - DEBUG --- f1_plus_f2_temp: [(29, 37), (37, 217), (217, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 323), (323, 190), (190, 336), (336, 342), (342, 365), (365, 381), (381, 29)]
2016-08-07 20:38:26,404 - DEBUG --- END 86: test the 0 edge
2016-08-07 20:38:26,404 - INFO --- END 86: Search the right edge to remove. Found: (34, 382)
2016-08-07 20:38:26,404 - INFO --- BEGIN 86: Remove an F3, F4 or F5
2016-08-07 20:38:26,405 - DEBUG --- vertex_to_join_near_v1_on_the_face: 29
2016-08-07 20:38:26,405 - DEBUG --- vertex_to_join_near_v2_on_the_face: 381
2016-08-07 20:38:26,405 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 37
2016-08-07 20:38:26,405 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 365
2016-08-07 20:38:26,405 - DEBUG --- third_face_to_update: [(38, 37), (37, 34), (34, 29), (29, 30), (30, 38)]
2016-08-07 20:38:26,406 - DEBUG --- fourth_face_to_update: [(365, 367), (367, 366), (366, 379), (379, 380), (380, 381), (381, 382), (382, 365)]
2016-08-07 20:38:26,406 - INFO --- ariadne_step: [4, 34, 382, 29, 381, 37, 365]
2016-08-07 20:38:26,406 - INFO --- END 86: Remove an F3, F4 or F5
2016-08-07 20:38:26,406 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,430 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,431 - INFO --- END 86: Main loop
2016-08-07 20:38:26,431 - INFO --- 
2016-08-07 20:38:26,431 - INFO --- BEGIN 87: Main loop
2016-08-07 20:38:26,432 - INFO --- BEGIN 87: Search the right edge to remove
2016-08-07 20:38:26,432 - DEBUG --- BEGIN 87: test the 0 edge
2016-08-07 20:38:26,432 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:26,432 - DEBUG --- edge_to_remove: (195, 171)
2016-08-07 20:38:26,432 - DEBUG --- rotated_edge_to_remove: (171, 195)
2016-08-07 20:38:26,433 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,433 - DEBUG --- f1: [(195, 171), (171, 170), (170, 189), (189, 195)]
2016-08-07 20:38:26,433 - DEBUG --- f2: [(195, 194), (194, 191), (191, 193), (193, 132), (132, 131), (131, 171), (171, 195)]
2016-08-07 20:38:26,433 - DEBUG --- edge_to_remove_on_f1: (195, 171)
2016-08-07 20:38:26,434 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,434 - DEBUG --- index_of_edge_to_remove_on_f2: 6
2016-08-07 20:38:26,434 - DEBUG --- Temporary f1_plus_f2: [(195, 194), (194, 191), (191, 193), (193, 132), (132, 131), (131, 171), (171, 170), (170, 189), (189, 195)]
2016-08-07 20:38:26,434 - DEBUG --- f1_plus_f2: [(189, 194), (194, 191), (191, 193), (193, 132), (132, 131), (131, 170), (170, 189)]
2016-08-07 20:38:26,434 - DEBUG --- END: join_faces
2016-08-07 20:38:26,435 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,435 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,435 - DEBUG --- Edge to remove found :-) (195, 171)
2016-08-07 20:38:26,435 - DEBUG --- f1: [(195, 171), (171, 170), (170, 189), (189, 195)]
2016-08-07 20:38:26,435 - DEBUG --- f2: [(195, 194), (194, 191), (191, 193), (193, 132), (132, 131), (131, 171), (171, 195)]
2016-08-07 20:38:26,436 - DEBUG --- f1_plus_f2_temp: [(189, 194), (194, 191), (191, 193), (193, 132), (132, 131), (131, 170), (170, 189)]
2016-08-07 20:38:26,436 - DEBUG --- END 87: test the 0 edge
2016-08-07 20:38:26,436 - INFO --- END 87: Search the right edge to remove. Found: (195, 171)
2016-08-07 20:38:26,436 - INFO --- BEGIN 87: Remove an F3, F4 or F5
2016-08-07 20:38:26,436 - DEBUG --- vertex_to_join_near_v1_on_the_face: 189
2016-08-07 20:38:26,437 - DEBUG --- vertex_to_join_near_v2_on_the_face: 170
2016-08-07 20:38:26,437 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 194
2016-08-07 20:38:26,437 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 131
2016-08-07 20:38:26,437 - DEBUG --- third_face_to_update: [(188, 194), (194, 195), (195, 189), (189, 188)]
2016-08-07 20:38:26,437 - DEBUG --- fourth_face_to_update: [(131, 128), (128, 159), (159, 160), (160, 169), (169, 170), (170, 171), (171, 131)]
2016-08-07 20:38:26,438 - INFO --- ariadne_step: [4, 195, 171, 189, 170, 194, 131]
2016-08-07 20:38:26,438 - INFO --- END 87: Remove an F3, F4 or F5
2016-08-07 20:38:26,438 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,461 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,462 - INFO --- END 87: Main loop
2016-08-07 20:38:26,462 - INFO --- 
2016-08-07 20:38:26,462 - INFO --- BEGIN 88: Main loop
2016-08-07 20:38:26,462 - INFO --- BEGIN 88: Search the right edge to remove
2016-08-07 20:38:26,462 - DEBUG --- BEGIN 88: test the 0 edge
2016-08-07 20:38:26,463 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:26,463 - DEBUG --- edge_to_remove: (188, 194)
2016-08-07 20:38:26,463 - DEBUG --- rotated_edge_to_remove: (194, 188)
2016-08-07 20:38:26,463 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,464 - DEBUG --- f1: [(188, 194), (194, 189), (189, 188)]
2016-08-07 20:38:26,464 - DEBUG --- f2: [(187, 191), (191, 194), (194, 188), (188, 187)]
2016-08-07 20:38:26,464 - DEBUG --- edge_to_remove_on_f1: (188, 194)
2016-08-07 20:38:26,464 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,464 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:26,465 - DEBUG --- Temporary f1_plus_f2: [(188, 187), (187, 191), (191, 194), (194, 189), (189, 188)]
2016-08-07 20:38:26,465 - DEBUG --- f1_plus_f2: [(189, 187), (187, 191), (191, 189)]
2016-08-07 20:38:26,465 - DEBUG --- END: join_faces
2016-08-07 20:38:26,465 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,466 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,466 - DEBUG --- Edge to remove found :-) (188, 194)
2016-08-07 20:38:26,466 - DEBUG --- f1: [(188, 194), (194, 189), (189, 188)]
2016-08-07 20:38:26,466 - DEBUG --- f2: [(187, 191), (191, 194), (194, 188), (188, 187)]
2016-08-07 20:38:26,466 - DEBUG --- f1_plus_f2_temp: [(189, 187), (187, 191), (191, 189)]
2016-08-07 20:38:26,467 - DEBUG --- END 88: test the 0 edge
2016-08-07 20:38:26,467 - INFO --- END 88: Search the right edge to remove. Found: (188, 194)
2016-08-07 20:38:26,467 - INFO --- BEGIN 88: Remove an F3, F4 or F5
2016-08-07 20:38:26,467 - DEBUG --- vertex_to_join_near_v1_on_the_face: 189
2016-08-07 20:38:26,467 - DEBUG --- vertex_to_join_near_v2_on_the_face: 189
2016-08-07 20:38:26,468 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 187
2016-08-07 20:38:26,468 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 191
2016-08-07 20:38:26,468 - DEBUG --- third_face_to_update: [(173, 181), (181, 187), (187, 188), (188, 189), (189, 170), (170, 169), (169, 173)]
2016-08-07 20:38:26,468 - DEBUG --- fourth_face_to_update: [(189, 194), (194, 191), (191, 193), (193, 132), (132, 131), (131, 170), (170, 189)]
2016-08-07 20:38:26,469 - INFO --- ariadne_step: [3, 188, 194, 189, 189, 187, 191]
2016-08-07 20:38:26,469 - INFO --- END 88: Remove an F3, F4 or F5
2016-08-07 20:38:26,469 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,492 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,492 - INFO --- END 88: Main loop
2016-08-07 20:38:26,493 - INFO --- 
2016-08-07 20:38:26,493 - INFO --- BEGIN 89: Main loop
2016-08-07 20:38:26,493 - INFO --- BEGIN 89: Search the right edge to remove
2016-08-07 20:38:26,494 - DEBUG --- BEGIN 89: test the 0 edge
2016-08-07 20:38:26,494 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:26,494 - DEBUG --- edge_to_remove: (189, 187)
2016-08-07 20:38:26,494 - DEBUG --- rotated_edge_to_remove: (187, 189)
2016-08-07 20:38:26,494 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,495 - DEBUG --- f1: [(189, 187), (187, 191), (191, 189)]
2016-08-07 20:38:26,495 - DEBUG --- f2: [(173, 181), (181, 187), (187, 189), (189, 170), (170, 169), (169, 173)]
2016-08-07 20:38:26,495 - DEBUG --- edge_to_remove_on_f1: (189, 187)
2016-08-07 20:38:26,495 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,496 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:26,496 - DEBUG --- Temporary f1_plus_f2: [(189, 170), (170, 169), (169, 173), (173, 181), (181, 187), (187, 191), (191, 189)]
2016-08-07 20:38:26,496 - DEBUG --- f1_plus_f2: [(191, 170), (170, 169), (169, 173), (173, 181), (181, 191)]
2016-08-07 20:38:26,496 - DEBUG --- END: join_faces
2016-08-07 20:38:26,496 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,497 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,497 - DEBUG --- Edge to remove found :-) (189, 187)
2016-08-07 20:38:26,497 - DEBUG --- f1: [(189, 187), (187, 191), (191, 189)]
2016-08-07 20:38:26,497 - DEBUG --- f2: [(173, 181), (181, 187), (187, 189), (189, 170), (170, 169), (169, 173)]
2016-08-07 20:38:26,497 - DEBUG --- f1_plus_f2_temp: [(191, 170), (170, 169), (169, 173), (173, 181), (181, 191)]
2016-08-07 20:38:26,498 - DEBUG --- END 89: test the 0 edge
2016-08-07 20:38:26,498 - INFO --- END 89: Search the right edge to remove. Found: (189, 187)
2016-08-07 20:38:26,498 - INFO --- BEGIN 89: Remove an F3, F4 or F5
2016-08-07 20:38:26,498 - DEBUG --- vertex_to_join_near_v1_on_the_face: 191
2016-08-07 20:38:26,499 - DEBUG --- vertex_to_join_near_v2_on_the_face: 191
2016-08-07 20:38:26,499 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 170
2016-08-07 20:38:26,499 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 181
2016-08-07 20:38:26,499 - DEBUG --- third_face_to_update: [(189, 191), (191, 193), (193, 132), (132, 131), (131, 170), (170, 189)]
2016-08-07 20:38:26,499 - DEBUG --- fourth_face_to_update: [(181, 182), (182, 193), (193, 191), (191, 187), (187, 181)]
2016-08-07 20:38:26,500 - INFO --- ariadne_step: [3, 189, 187, 191, 191, 170, 181]
2016-08-07 20:38:26,500 - INFO --- END 89: Remove an F3, F4 or F5
2016-08-07 20:38:26,500 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,522 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,523 - INFO --- END 89: Main loop
2016-08-07 20:38:26,523 - INFO --- 
2016-08-07 20:38:26,523 - INFO --- BEGIN 90: Main loop
2016-08-07 20:38:26,523 - INFO --- BEGIN 90: Search the right edge to remove
2016-08-07 20:38:26,524 - DEBUG --- BEGIN 90: test the 0 edge
2016-08-07 20:38:26,524 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:26,524 - DEBUG --- edge_to_remove: (154, 127)
2016-08-07 20:38:26,524 - DEBUG --- rotated_edge_to_remove: (127, 154)
2016-08-07 20:38:26,524 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,525 - DEBUG --- f1: [(154, 127), (127, 123), (123, 125), (125, 154)]
2016-08-07 20:38:26,525 - DEBUG --- f2: [(159, 128), (128, 127), (127, 154), (154, 155), (155, 159)]
2016-08-07 20:38:26,525 - DEBUG --- edge_to_remove_on_f1: (154, 127)
2016-08-07 20:38:26,525 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,525 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:26,526 - DEBUG --- Temporary f1_plus_f2: [(154, 155), (155, 159), (159, 128), (128, 127), (127, 123), (123, 125), (125, 154)]
2016-08-07 20:38:26,526 - DEBUG --- f1_plus_f2: [(125, 155), (155, 159), (159, 128), (128, 123), (123, 125)]
2016-08-07 20:38:26,526 - DEBUG --- END: join_faces
2016-08-07 20:38:26,526 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,527 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,527 - DEBUG --- Edge to remove found :-) (154, 127)
2016-08-07 20:38:26,527 - DEBUG --- f1: [(154, 127), (127, 123), (123, 125), (125, 154)]
2016-08-07 20:38:26,527 - DEBUG --- f2: [(159, 128), (128, 127), (127, 154), (154, 155), (155, 159)]
2016-08-07 20:38:26,527 - DEBUG --- f1_plus_f2_temp: [(125, 155), (155, 159), (159, 128), (128, 123), (123, 125)]
2016-08-07 20:38:26,528 - DEBUG --- END 90: test the 0 edge
2016-08-07 20:38:26,528 - INFO --- END 90: Search the right edge to remove. Found: (154, 127)
2016-08-07 20:38:26,528 - INFO --- BEGIN 90: Remove an F3, F4 or F5
2016-08-07 20:38:26,528 - DEBUG --- vertex_to_join_near_v1_on_the_face: 125
2016-08-07 20:38:26,529 - DEBUG --- vertex_to_join_near_v2_on_the_face: 123
2016-08-07 20:38:26,529 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 155
2016-08-07 20:38:26,529 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 128
2016-08-07 20:38:26,529 - DEBUG --- third_face_to_update: [(153, 150), (150, 156), (156, 155), (155, 154), (154, 125), (125, 114), (114, 119), (119, 153)]
2016-08-07 20:38:26,530 - DEBUG --- fourth_face_to_update: [(183, 134), (134, 129), (129, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 127), (127, 128), (128, 131), (131, 132), (132, 183)]
2016-08-07 20:38:26,530 - INFO --- ariadne_step: [4, 154, 127, 125, 123, 155, 128]
2016-08-07 20:38:26,530 - INFO --- END 90: Remove an F3, F4 or F5
2016-08-07 20:38:26,530 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,552 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,553 - INFO --- END 90: Main loop
2016-08-07 20:38:26,553 - INFO --- 
2016-08-07 20:38:26,553 - INFO --- BEGIN 91: Main loop
2016-08-07 20:38:26,553 - INFO --- BEGIN 91: Search the right edge to remove
2016-08-07 20:38:26,553 - DEBUG --- BEGIN 91: test the 0 edge
2016-08-07 20:38:26,554 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:26,554 - DEBUG --- edge_to_remove: (322, 321)
2016-08-07 20:38:26,554 - DEBUG --- rotated_edge_to_remove: (321, 322)
2016-08-07 20:38:26,554 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,554 - DEBUG --- f1: [(322, 321), (321, 353), (353, 355), (355, 322)]
2016-08-07 20:38:26,555 - DEBUG --- f2: [(322, 309), (309, 308), (308, 320), (320, 321), (321, 322)]
2016-08-07 20:38:26,555 - DEBUG --- edge_to_remove_on_f1: (322, 321)
2016-08-07 20:38:26,555 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,555 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:26,556 - DEBUG --- Temporary f1_plus_f2: [(322, 309), (309, 308), (308, 320), (320, 321), (321, 353), (353, 355), (355, 322)]
2016-08-07 20:38:26,556 - DEBUG --- f1_plus_f2: [(355, 309), (309, 308), (308, 320), (320, 353), (353, 355)]
2016-08-07 20:38:26,556 - DEBUG --- END: join_faces
2016-08-07 20:38:26,556 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,556 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,557 - DEBUG --- Edge to remove found :-) (322, 321)
2016-08-07 20:38:26,557 - DEBUG --- f1: [(322, 321), (321, 353), (353, 355), (355, 322)]
2016-08-07 20:38:26,557 - DEBUG --- f2: [(322, 309), (309, 308), (308, 320), (320, 321), (321, 322)]
2016-08-07 20:38:26,557 - DEBUG --- f1_plus_f2_temp: [(355, 309), (309, 308), (308, 320), (320, 353), (353, 355)]
2016-08-07 20:38:26,557 - DEBUG --- END 91: test the 0 edge
2016-08-07 20:38:26,558 - INFO --- END 91: Search the right edge to remove. Found: (322, 321)
2016-08-07 20:38:26,558 - INFO --- BEGIN 91: Remove an F3, F4 or F5
2016-08-07 20:38:26,558 - DEBUG --- vertex_to_join_near_v1_on_the_face: 355
2016-08-07 20:38:26,558 - DEBUG --- vertex_to_join_near_v2_on_the_face: 353
2016-08-07 20:38:26,558 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 309
2016-08-07 20:38:26,559 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 320
2016-08-07 20:38:26,559 - DEBUG --- third_face_to_update: [(322, 355), (355, 354), (354, 309), (309, 322)]
2016-08-07 20:38:26,559 - DEBUG --- fourth_face_to_update: [(320, 319), (319, 316), (316, 356), (356, 353), (353, 321), (321, 320)]
2016-08-07 20:38:26,559 - INFO --- ariadne_step: [4, 322, 321, 355, 353, 309, 320]
2016-08-07 20:38:26,560 - INFO --- END 91: Remove an F3, F4 or F5
2016-08-07 20:38:26,560 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,581 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,581 - INFO --- END 91: Main loop
2016-08-07 20:38:26,582 - INFO --- 
2016-08-07 20:38:26,582 - INFO --- BEGIN 92: Main loop
2016-08-07 20:38:26,582 - INFO --- BEGIN 92: Search the right edge to remove
2016-08-07 20:38:26,582 - DEBUG --- BEGIN 92: test the 0 edge
2016-08-07 20:38:26,583 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:26,583 - DEBUG --- edge_to_remove: (309, 355)
2016-08-07 20:38:26,583 - DEBUG --- rotated_edge_to_remove: (355, 309)
2016-08-07 20:38:26,583 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,583 - DEBUG --- f1: [(309, 355), (355, 354), (354, 309)]
2016-08-07 20:38:26,584 - DEBUG --- f2: [(355, 309), (309, 308), (308, 320), (320, 353), (353, 355)]
2016-08-07 20:38:26,584 - DEBUG --- edge_to_remove_on_f1: (309, 355)
2016-08-07 20:38:26,584 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,584 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:26,585 - DEBUG --- Temporary f1_plus_f2: [(309, 308), (308, 320), (320, 353), (353, 355), (355, 354), (354, 309)]
2016-08-07 20:38:26,585 - DEBUG --- f1_plus_f2: [(354, 308), (308, 320), (320, 353), (353, 354)]
2016-08-07 20:38:26,585 - DEBUG --- END: join_faces
2016-08-07 20:38:26,585 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,585 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,586 - DEBUG --- Edge to remove found :-) (309, 355)
2016-08-07 20:38:26,586 - DEBUG --- f1: [(309, 355), (355, 354), (354, 309)]
2016-08-07 20:38:26,586 - DEBUG --- f2: [(355, 309), (309, 308), (308, 320), (320, 353), (353, 355)]
2016-08-07 20:38:26,586 - DEBUG --- f1_plus_f2_temp: [(354, 308), (308, 320), (320, 353), (353, 354)]
2016-08-07 20:38:26,586 - DEBUG --- END 92: test the 0 edge
2016-08-07 20:38:26,587 - INFO --- END 92: Search the right edge to remove. Found: (309, 355)
2016-08-07 20:38:26,587 - INFO --- BEGIN 92: Remove an F3, F4 or F5
2016-08-07 20:38:26,587 - DEBUG --- vertex_to_join_near_v1_on_the_face: 354
2016-08-07 20:38:26,587 - DEBUG --- vertex_to_join_near_v2_on_the_face: 354
2016-08-07 20:38:26,587 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 308
2016-08-07 20:38:26,588 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 353
2016-08-07 20:38:26,588 - DEBUG --- third_face_to_update: [(307, 308), (308, 309), (309, 354), (354, 351), (351, 267), (267, 306), (306, 286), (286, 275), (275, 282), (282, 307)]
2016-08-07 20:38:26,588 - DEBUG --- fourth_face_to_update: [(79, 124), (124, 351), (351, 354), (354, 355), (355, 353), (353, 356), (356, 349), (349, 348), (348, 340), (340, 79)]
2016-08-07 20:38:26,588 - INFO --- ariadne_step: [3, 309, 355, 354, 354, 308, 353]
2016-08-07 20:38:26,589 - INFO --- END 92: Remove an F3, F4 or F5
2016-08-07 20:38:26,589 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,610 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,610 - INFO --- END 92: Main loop
2016-08-07 20:38:26,611 - INFO --- 
2016-08-07 20:38:26,611 - INFO --- BEGIN 93: Main loop
2016-08-07 20:38:26,611 - INFO --- BEGIN 93: Search the right edge to remove
2016-08-07 20:38:26,611 - DEBUG --- BEGIN 93: test the 0 edge
2016-08-07 20:38:26,612 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:26,612 - DEBUG --- edge_to_remove: (232, 226)
2016-08-07 20:38:26,612 - DEBUG --- rotated_edge_to_remove: (226, 232)
2016-08-07 20:38:26,612 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,613 - DEBUG --- f1: [(232, 226), (226, 225), (225, 229), (229, 232)]
2016-08-07 20:38:26,613 - DEBUG --- f2: [(226, 232), (232, 233), (233, 239), (239, 166), (166, 165), (165, 226)]
2016-08-07 20:38:26,613 - DEBUG --- edge_to_remove_on_f1: (232, 226)
2016-08-07 20:38:26,613 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,613 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:26,614 - DEBUG --- Temporary f1_plus_f2: [(232, 233), (233, 239), (239, 166), (166, 165), (165, 226), (226, 225), (225, 229), (229, 232)]
2016-08-07 20:38:26,614 - DEBUG --- f1_plus_f2: [(229, 233), (233, 239), (239, 166), (166, 165), (165, 225), (225, 229)]
2016-08-07 20:38:26,614 - DEBUG --- END: join_faces
2016-08-07 20:38:26,614 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,615 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,615 - DEBUG --- Edge to remove found :-) (232, 226)
2016-08-07 20:38:26,615 - DEBUG --- f1: [(232, 226), (226, 225), (225, 229), (229, 232)]
2016-08-07 20:38:26,615 - DEBUG --- f2: [(226, 232), (232, 233), (233, 239), (239, 166), (166, 165), (165, 226)]
2016-08-07 20:38:26,615 - DEBUG --- f1_plus_f2_temp: [(229, 233), (233, 239), (239, 166), (166, 165), (165, 225), (225, 229)]
2016-08-07 20:38:26,616 - DEBUG --- END 93: test the 0 edge
2016-08-07 20:38:26,616 - INFO --- END 93: Search the right edge to remove. Found: (232, 226)
2016-08-07 20:38:26,616 - INFO --- BEGIN 93: Remove an F3, F4 or F5
2016-08-07 20:38:26,616 - DEBUG --- vertex_to_join_near_v1_on_the_face: 229
2016-08-07 20:38:26,616 - DEBUG --- vertex_to_join_near_v2_on_the_face: 225
2016-08-07 20:38:26,617 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 233
2016-08-07 20:38:26,617 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 165
2016-08-07 20:38:26,617 - DEBUG --- third_face_to_update: [(232, 229), (229, 228), (228, 236), (236, 237), (237, 234), (234, 233), (233, 232)]
2016-08-07 20:38:26,617 - DEBUG --- fourth_face_to_update: [(216, 217), (217, 225), (225, 226), (226, 165), (165, 164), (164, 216)]
2016-08-07 20:38:26,618 - INFO --- ariadne_step: [4, 232, 226, 229, 225, 233, 165]
2016-08-07 20:38:26,618 - INFO --- END 93: Remove an F3, F4 or F5
2016-08-07 20:38:26,618 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,640 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,640 - INFO --- END 93: Main loop
2016-08-07 20:38:26,640 - INFO --- 
2016-08-07 20:38:26,640 - INFO --- BEGIN 94: Main loop
2016-08-07 20:38:26,641 - INFO --- BEGIN 94: Search the right edge to remove
2016-08-07 20:38:26,641 - DEBUG --- BEGIN 94: test the 0 edge
2016-08-07 20:38:26,641 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:26,641 - DEBUG --- edge_to_remove: (148, 118)
2016-08-07 20:38:26,642 - DEBUG --- rotated_edge_to_remove: (118, 148)
2016-08-07 20:38:26,642 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,642 - DEBUG --- f1: [(148, 118), (118, 117), (117, 147), (147, 148)]
2016-08-07 20:38:26,642 - DEBUG --- f2: [(118, 148), (148, 153), (153, 119), (119, 118)]
2016-08-07 20:38:26,642 - DEBUG --- edge_to_remove_on_f1: (148, 118)
2016-08-07 20:38:26,643 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,643 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:26,643 - DEBUG --- Temporary f1_plus_f2: [(148, 153), (153, 119), (119, 118), (118, 117), (117, 147), (147, 148)]
2016-08-07 20:38:26,643 - DEBUG --- f1_plus_f2: [(147, 153), (153, 119), (119, 117), (117, 147)]
2016-08-07 20:38:26,643 - DEBUG --- END: join_faces
2016-08-07 20:38:26,644 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,644 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,644 - DEBUG --- Edge to remove found :-) (148, 118)
2016-08-07 20:38:26,644 - DEBUG --- f1: [(148, 118), (118, 117), (117, 147), (147, 148)]
2016-08-07 20:38:26,644 - DEBUG --- f2: [(118, 148), (148, 153), (153, 119), (119, 118)]
2016-08-07 20:38:26,645 - DEBUG --- f1_plus_f2_temp: [(147, 153), (153, 119), (119, 117), (117, 147)]
2016-08-07 20:38:26,645 - DEBUG --- END 94: test the 0 edge
2016-08-07 20:38:26,645 - INFO --- END 94: Search the right edge to remove. Found: (148, 118)
2016-08-07 20:38:26,645 - INFO --- BEGIN 94: Remove an F3, F4 or F5
2016-08-07 20:38:26,645 - DEBUG --- vertex_to_join_near_v1_on_the_face: 147
2016-08-07 20:38:26,646 - DEBUG --- vertex_to_join_near_v2_on_the_face: 117
2016-08-07 20:38:26,646 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 153
2016-08-07 20:38:26,646 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 119
2016-08-07 20:38:26,647 - DEBUG --- third_face_to_update: [(139, 141), (141, 152), (152, 150), (150, 153), (153, 148), (148, 147), (147, 144), (144, 139)]
2016-08-07 20:38:26,647 - DEBUG --- fourth_face_to_update: [(70, 107), (107, 116), (116, 117), (117, 118), (118, 119), (119, 114), (114, 74), (74, 64), (64, 70)]
2016-08-07 20:38:26,647 - INFO --- ariadne_step: [4, 148, 118, 147, 117, 153, 119]
2016-08-07 20:38:26,647 - INFO --- END 94: Remove an F3, F4 or F5
2016-08-07 20:38:26,647 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,667 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,668 - INFO --- END 94: Main loop
2016-08-07 20:38:26,668 - INFO --- 
2016-08-07 20:38:26,668 - INFO --- BEGIN 95: Main loop
2016-08-07 20:38:26,668 - INFO --- BEGIN 95: Search the right edge to remove
2016-08-07 20:38:26,669 - DEBUG --- BEGIN 95: test the 0 edge
2016-08-07 20:38:26,669 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:26,669 - DEBUG --- edge_to_remove: (172, 180)
2016-08-07 20:38:26,669 - DEBUG --- rotated_edge_to_remove: (180, 172)
2016-08-07 20:38:26,670 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,670 - DEBUG --- f1: [(172, 180), (180, 198), (198, 185), (185, 172)]
2016-08-07 20:38:26,670 - DEBUG --- f2: [(176, 180), (180, 172), (172, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 174), (174, 176)]
2016-08-07 20:38:26,670 - DEBUG --- edge_to_remove_on_f1: (172, 180)
2016-08-07 20:38:26,670 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,671 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:26,671 - DEBUG --- Temporary f1_plus_f2: [(172, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 174), (174, 176), (176, 180), (180, 198), (198, 185), (185, 172)]
2016-08-07 20:38:26,671 - DEBUG --- f1_plus_f2: [(185, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 174), (174, 176), (176, 198), (198, 185)]
2016-08-07 20:38:26,671 - DEBUG --- END: join_faces
2016-08-07 20:38:26,671 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,672 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,672 - DEBUG --- Edge to remove found :-) (172, 180)
2016-08-07 20:38:26,672 - DEBUG --- f1: [(172, 180), (180, 198), (198, 185), (185, 172)]
2016-08-07 20:38:26,672 - DEBUG --- f2: [(176, 180), (180, 172), (172, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 174), (174, 176)]
2016-08-07 20:38:26,672 - DEBUG --- f1_plus_f2_temp: [(185, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 174), (174, 176), (176, 198), (198, 185)]
2016-08-07 20:38:26,673 - DEBUG --- END 95: test the 0 edge
2016-08-07 20:38:26,673 - INFO --- END 95: Search the right edge to remove. Found: (172, 180)
2016-08-07 20:38:26,673 - INFO --- BEGIN 95: Remove an F3, F4 or F5
2016-08-07 20:38:26,673 - DEBUG --- vertex_to_join_near_v1_on_the_face: 185
2016-08-07 20:38:26,673 - DEBUG --- vertex_to_join_near_v2_on_the_face: 198
2016-08-07 20:38:26,674 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 173
2016-08-07 20:38:26,674 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 176
2016-08-07 20:38:26,674 - DEBUG --- third_face_to_update: [(181, 173), (173, 172), (172, 185), (185, 184), (184, 134), (134, 183), (183, 182), (182, 181)]
2016-08-07 20:38:26,674 - DEBUG --- fourth_face_to_update: [(176, 197), (197, 198), (198, 180), (180, 176)]
2016-08-07 20:38:26,675 - INFO --- ariadne_step: [4, 172, 180, 185, 198, 173, 176]
2016-08-07 20:38:26,675 - INFO --- END 95: Remove an F3, F4 or F5
2016-08-07 20:38:26,675 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,695 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,695 - INFO --- END 95: Main loop
2016-08-07 20:38:26,696 - INFO --- 
2016-08-07 20:38:26,696 - INFO --- BEGIN 96: Main loop
2016-08-07 20:38:26,696 - INFO --- BEGIN 96: Search the right edge to remove
2016-08-07 20:38:26,696 - DEBUG --- BEGIN 96: test the 0 edge
2016-08-07 20:38:26,697 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:26,697 - DEBUG --- edge_to_remove: (176, 197)
2016-08-07 20:38:26,697 - DEBUG --- rotated_edge_to_remove: (197, 176)
2016-08-07 20:38:26,697 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,697 - DEBUG --- f1: [(176, 197), (197, 198), (198, 176)]
2016-08-07 20:38:26,698 - DEBUG --- f2: [(174, 196), (196, 197), (197, 176), (176, 174)]
2016-08-07 20:38:26,698 - DEBUG --- edge_to_remove_on_f1: (176, 197)
2016-08-07 20:38:26,698 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,698 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:26,698 - DEBUG --- Temporary f1_plus_f2: [(176, 174), (174, 196), (196, 197), (197, 198), (198, 176)]
2016-08-07 20:38:26,699 - DEBUG --- f1_plus_f2: [(198, 174), (174, 196), (196, 198)]
2016-08-07 20:38:26,699 - DEBUG --- END: join_faces
2016-08-07 20:38:26,699 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,699 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,700 - DEBUG --- Edge to remove found :-) (176, 197)
2016-08-07 20:38:26,700 - DEBUG --- f1: [(176, 197), (197, 198), (198, 176)]
2016-08-07 20:38:26,700 - DEBUG --- f2: [(174, 196), (196, 197), (197, 176), (176, 174)]
2016-08-07 20:38:26,700 - DEBUG --- f1_plus_f2_temp: [(198, 174), (174, 196), (196, 198)]
2016-08-07 20:38:26,701 - DEBUG --- END 96: test the 0 edge
2016-08-07 20:38:26,701 - INFO --- END 96: Search the right edge to remove. Found: (176, 197)
2016-08-07 20:38:26,701 - INFO --- BEGIN 96: Remove an F3, F4 or F5
2016-08-07 20:38:26,701 - DEBUG --- vertex_to_join_near_v1_on_the_face: 198
2016-08-07 20:38:26,702 - DEBUG --- vertex_to_join_near_v2_on_the_face: 198
2016-08-07 20:38:26,702 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 174
2016-08-07 20:38:26,702 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 196
2016-08-07 20:38:26,703 - DEBUG --- third_face_to_update: [(185, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 174), (174, 176), (176, 198), (198, 185)]
2016-08-07 20:38:26,703 - DEBUG --- fourth_face_to_update: [(197, 196), (196, 184), (184, 185), (185, 198), (198, 197)]
2016-08-07 20:38:26,703 - INFO --- ariadne_step: [3, 176, 197, 198, 198, 174, 196]
2016-08-07 20:38:26,703 - INFO --- END 96: Remove an F3, F4 or F5
2016-08-07 20:38:26,703 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,723 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,724 - INFO --- END 96: Main loop
2016-08-07 20:38:26,724 - INFO --- 
2016-08-07 20:38:26,724 - INFO --- BEGIN 97: Main loop
2016-08-07 20:38:26,724 - INFO --- BEGIN 97: Search the right edge to remove
2016-08-07 20:38:26,725 - DEBUG --- BEGIN 97: test the 0 edge
2016-08-07 20:38:26,725 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:26,725 - DEBUG --- edge_to_remove: (198, 174)
2016-08-07 20:38:26,725 - DEBUG --- rotated_edge_to_remove: (174, 198)
2016-08-07 20:38:26,725 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,726 - DEBUG --- f1: [(198, 174), (174, 196), (196, 198)]
2016-08-07 20:38:26,726 - DEBUG --- f2: [(185, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 174), (174, 198), (198, 185)]
2016-08-07 20:38:26,726 - DEBUG --- edge_to_remove_on_f1: (198, 174)
2016-08-07 20:38:26,726 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,727 - DEBUG --- index_of_edge_to_remove_on_f2: 7
2016-08-07 20:38:26,727 - DEBUG --- Temporary f1_plus_f2: [(198, 185), (185, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 174), (174, 196), (196, 198)]
2016-08-07 20:38:26,727 - DEBUG --- f1_plus_f2: [(196, 185), (185, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 196)]
2016-08-07 20:38:26,727 - DEBUG --- END: join_faces
2016-08-07 20:38:26,727 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,728 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,728 - DEBUG --- Edge to remove found :-) (198, 174)
2016-08-07 20:38:26,728 - DEBUG --- f1: [(198, 174), (174, 196), (196, 198)]
2016-08-07 20:38:26,728 - DEBUG --- f2: [(185, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 174), (174, 198), (198, 185)]
2016-08-07 20:38:26,728 - DEBUG --- f1_plus_f2_temp: [(196, 185), (185, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 196)]
2016-08-07 20:38:26,729 - DEBUG --- END 97: test the 0 edge
2016-08-07 20:38:26,729 - INFO --- END 97: Search the right edge to remove. Found: (198, 174)
2016-08-07 20:38:26,729 - INFO --- BEGIN 97: Remove an F3, F4 or F5
2016-08-07 20:38:26,729 - DEBUG --- vertex_to_join_near_v1_on_the_face: 196
2016-08-07 20:38:26,729 - DEBUG --- vertex_to_join_near_v2_on_the_face: 196
2016-08-07 20:38:26,730 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 185
2016-08-07 20:38:26,730 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 129
2016-08-07 20:38:26,730 - DEBUG --- third_face_to_update: [(198, 196), (196, 184), (184, 185), (185, 198)]
2016-08-07 20:38:26,730 - DEBUG --- fourth_face_to_update: [(129, 134), (134, 184), (184, 196), (196, 174), (174, 129)]
2016-08-07 20:38:26,731 - INFO --- ariadne_step: [3, 198, 174, 196, 196, 185, 129]
2016-08-07 20:38:26,731 - INFO --- END 97: Remove an F3, F4 or F5
2016-08-07 20:38:26,731 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,750 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,751 - INFO --- END 97: Main loop
2016-08-07 20:38:26,751 - INFO --- 
2016-08-07 20:38:26,751 - INFO --- BEGIN 98: Main loop
2016-08-07 20:38:26,752 - INFO --- BEGIN 98: Search the right edge to remove
2016-08-07 20:38:26,752 - DEBUG --- BEGIN 98: test the 0 edge
2016-08-07 20:38:26,752 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:26,752 - DEBUG --- edge_to_remove: (185, 196)
2016-08-07 20:38:26,752 - DEBUG --- rotated_edge_to_remove: (196, 185)
2016-08-07 20:38:26,753 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,753 - DEBUG --- f1: [(185, 196), (196, 184), (184, 185)]
2016-08-07 20:38:26,753 - DEBUG --- f2: [(196, 185), (185, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 196)]
2016-08-07 20:38:26,753 - DEBUG --- edge_to_remove_on_f1: (185, 196)
2016-08-07 20:38:26,753 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,754 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:26,754 - DEBUG --- Temporary f1_plus_f2: [(185, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 196), (196, 184), (184, 185)]
2016-08-07 20:38:26,754 - DEBUG --- f1_plus_f2: [(184, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 184)]
2016-08-07 20:38:26,754 - DEBUG --- END: join_faces
2016-08-07 20:38:26,755 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,755 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,755 - DEBUG --- Edge to remove found :-) (185, 196)
2016-08-07 20:38:26,755 - DEBUG --- f1: [(185, 196), (196, 184), (184, 185)]
2016-08-07 20:38:26,755 - DEBUG --- f2: [(196, 185), (185, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 196)]
2016-08-07 20:38:26,756 - DEBUG --- f1_plus_f2_temp: [(184, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 184)]
2016-08-07 20:38:26,756 - DEBUG --- END 98: test the 0 edge
2016-08-07 20:38:26,756 - INFO --- END 98: Search the right edge to remove. Found: (185, 196)
2016-08-07 20:38:26,756 - INFO --- BEGIN 98: Remove an F3, F4 or F5
2016-08-07 20:38:26,756 - DEBUG --- vertex_to_join_near_v1_on_the_face: 184
2016-08-07 20:38:26,757 - DEBUG --- vertex_to_join_near_v2_on_the_face: 184
2016-08-07 20:38:26,757 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 173
2016-08-07 20:38:26,757 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 129
2016-08-07 20:38:26,757 - DEBUG --- third_face_to_update: [(181, 173), (173, 185), (185, 184), (184, 134), (134, 183), (183, 182), (182, 181)]
2016-08-07 20:38:26,758 - DEBUG --- fourth_face_to_update: [(129, 134), (134, 184), (184, 196), (196, 129)]
2016-08-07 20:38:26,758 - INFO --- ariadne_step: [3, 185, 196, 184, 184, 173, 129]
2016-08-07 20:38:26,758 - INFO --- END 98: Remove an F3, F4 or F5
2016-08-07 20:38:26,758 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,777 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,777 - INFO --- END 98: Main loop
2016-08-07 20:38:26,778 - INFO --- 
2016-08-07 20:38:26,778 - INFO --- BEGIN 99: Main loop
2016-08-07 20:38:26,778 - INFO --- BEGIN 99: Search the right edge to remove
2016-08-07 20:38:26,779 - DEBUG --- BEGIN 99: test the 0 edge
2016-08-07 20:38:26,779 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:26,779 - DEBUG --- edge_to_remove: (129, 134)
2016-08-07 20:38:26,779 - DEBUG --- rotated_edge_to_remove: (134, 129)
2016-08-07 20:38:26,779 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,780 - DEBUG --- f1: [(129, 134), (134, 184), (184, 129)]
2016-08-07 20:38:26,780 - DEBUG --- f2: [(183, 134), (134, 129), (129, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 128), (128, 131), (131, 132), (132, 183)]
2016-08-07 20:38:26,780 - DEBUG --- edge_to_remove_on_f1: (129, 134)
2016-08-07 20:38:26,780 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,780 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:26,781 - DEBUG --- Temporary f1_plus_f2: [(129, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 128), (128, 131), (131, 132), (132, 183), (183, 134), (134, 184), (184, 129)]
2016-08-07 20:38:26,781 - DEBUG --- f1_plus_f2: [(184, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 128), (128, 131), (131, 132), (132, 183), (183, 184)]
2016-08-07 20:38:26,781 - DEBUG --- END: join_faces
2016-08-07 20:38:26,781 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,781 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,782 - DEBUG --- Edge to remove found :-) (129, 134)
2016-08-07 20:38:26,782 - DEBUG --- f1: [(129, 134), (134, 184), (184, 129)]
2016-08-07 20:38:26,782 - DEBUG --- f2: [(183, 134), (134, 129), (129, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 128), (128, 131), (131, 132), (132, 183)]
2016-08-07 20:38:26,782 - DEBUG --- f1_plus_f2_temp: [(184, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 128), (128, 131), (131, 132), (132, 183), (183, 184)]
2016-08-07 20:38:26,782 - DEBUG --- END 99: test the 0 edge
2016-08-07 20:38:26,783 - INFO --- END 99: Search the right edge to remove. Found: (129, 134)
2016-08-07 20:38:26,783 - INFO --- BEGIN 99: Remove an F3, F4 or F5
2016-08-07 20:38:26,783 - DEBUG --- vertex_to_join_near_v1_on_the_face: 184
2016-08-07 20:38:26,783 - DEBUG --- vertex_to_join_near_v2_on_the_face: 184
2016-08-07 20:38:26,783 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 136
2016-08-07 20:38:26,784 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 183
2016-08-07 20:38:26,784 - DEBUG --- third_face_to_update: [(184, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 129), (129, 184)]
2016-08-07 20:38:26,784 - DEBUG --- fourth_face_to_update: [(181, 173), (173, 184), (184, 134), (134, 183), (183, 182), (182, 181)]
2016-08-07 20:38:26,784 - INFO --- ariadne_step: [3, 129, 134, 184, 184, 136, 183]
2016-08-07 20:38:26,785 - INFO --- END 99: Remove an F3, F4 or F5
2016-08-07 20:38:26,785 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,803 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,804 - INFO --- END 99: Main loop
2016-08-07 20:38:26,804 - INFO --- 
2016-08-07 20:38:26,804 - INFO --- BEGIN 100: Main loop
2016-08-07 20:38:26,804 - INFO --- BEGIN 100: Search the right edge to remove
2016-08-07 20:38:26,804 - DEBUG --- BEGIN 100: test the 0 edge
2016-08-07 20:38:26,805 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:26,805 - DEBUG --- edge_to_remove: (112, 1)
2016-08-07 20:38:26,805 - DEBUG --- rotated_edge_to_remove: (1, 112)
2016-08-07 20:38:26,805 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,806 - DEBUG --- f1: [(112, 1), (1, 0), (0, 223), (223, 112)]
2016-08-07 20:38:26,806 - DEBUG --- f2: [(310, 274), (274, 1), (1, 112), (112, 326), (326, 317), (317, 310)]
2016-08-07 20:38:26,806 - DEBUG --- edge_to_remove_on_f1: (112, 1)
2016-08-07 20:38:26,806 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,806 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:26,807 - DEBUG --- Temporary f1_plus_f2: [(112, 326), (326, 317), (317, 310), (310, 274), (274, 1), (1, 0), (0, 223), (223, 112)]
2016-08-07 20:38:26,807 - DEBUG --- f1_plus_f2: [(223, 326), (326, 317), (317, 310), (310, 274), (274, 0), (0, 223)]
2016-08-07 20:38:26,807 - DEBUG --- END: join_faces
2016-08-07 20:38:26,807 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,808 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,808 - DEBUG --- Edge to remove found :-) (112, 1)
2016-08-07 20:38:26,808 - DEBUG --- f1: [(112, 1), (1, 0), (0, 223), (223, 112)]
2016-08-07 20:38:26,808 - DEBUG --- f2: [(310, 274), (274, 1), (1, 112), (112, 326), (326, 317), (317, 310)]
2016-08-07 20:38:26,808 - DEBUG --- f1_plus_f2_temp: [(223, 326), (326, 317), (317, 310), (310, 274), (274, 0), (0, 223)]
2016-08-07 20:38:26,809 - DEBUG --- END 100: test the 0 edge
2016-08-07 20:38:26,809 - INFO --- END 100: Search the right edge to remove. Found: (112, 1)
2016-08-07 20:38:26,809 - INFO --- BEGIN 100: Remove an F3, F4 or F5
2016-08-07 20:38:26,809 - DEBUG --- vertex_to_join_near_v1_on_the_face: 223
2016-08-07 20:38:26,809 - DEBUG --- vertex_to_join_near_v2_on_the_face: 0
2016-08-07 20:38:26,810 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 326
2016-08-07 20:38:26,810 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 274
2016-08-07 20:38:26,810 - DEBUG --- third_face_to_update: [(46, 327), (327, 326), (326, 112), (112, 223), (223, 46)]
2016-08-07 20:38:26,810 - DEBUG --- fourth_face_to_update: [(374, 0), (0, 1), (1, 274), (274, 269), (269, 374)]
2016-08-07 20:38:26,811 - INFO --- ariadne_step: [4, 112, 1, 223, 0, 326, 274]
2016-08-07 20:38:26,811 - INFO --- END 100: Remove an F3, F4 or F5
2016-08-07 20:38:26,811 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,829 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,830 - INFO --- END 100: Main loop
2016-08-07 20:38:26,830 - INFO --- 
2016-08-07 20:38:26,831 - INFO --- BEGIN 101: Main loop
2016-08-07 20:38:26,831 - INFO --- BEGIN 101: Search the right edge to remove
2016-08-07 20:38:26,831 - DEBUG --- BEGIN 101: test the 0 edge
2016-08-07 20:38:26,831 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:26,832 - DEBUG --- edge_to_remove: (146, 301)
2016-08-07 20:38:26,832 - DEBUG --- rotated_edge_to_remove: (301, 146)
2016-08-07 20:38:26,832 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,832 - DEBUG --- f1: [(146, 301), (301, 312), (312, 168), (168, 146)]
2016-08-07 20:38:26,833 - DEBUG --- f2: [(336, 190), (190, 301), (301, 146), (146, 135), (135, 224), (224, 336)]
2016-08-07 20:38:26,833 - DEBUG --- edge_to_remove_on_f1: (146, 301)
2016-08-07 20:38:26,833 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,833 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:26,833 - DEBUG --- Temporary f1_plus_f2: [(146, 135), (135, 224), (224, 336), (336, 190), (190, 301), (301, 312), (312, 168), (168, 146)]
2016-08-07 20:38:26,834 - DEBUG --- f1_plus_f2: [(168, 135), (135, 224), (224, 336), (336, 190), (190, 312), (312, 168)]
2016-08-07 20:38:26,834 - DEBUG --- END: join_faces
2016-08-07 20:38:26,834 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,834 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,834 - DEBUG --- Edge to remove found :-) (146, 301)
2016-08-07 20:38:26,835 - DEBUG --- f1: [(146, 301), (301, 312), (312, 168), (168, 146)]
2016-08-07 20:38:26,835 - DEBUG --- f2: [(336, 190), (190, 301), (301, 146), (146, 135), (135, 224), (224, 336)]
2016-08-07 20:38:26,835 - DEBUG --- f1_plus_f2_temp: [(168, 135), (135, 224), (224, 336), (336, 190), (190, 312), (312, 168)]
2016-08-07 20:38:26,835 - DEBUG --- END 101: test the 0 edge
2016-08-07 20:38:26,835 - INFO --- END 101: Search the right edge to remove. Found: (146, 301)
2016-08-07 20:38:26,836 - INFO --- BEGIN 101: Remove an F3, F4 or F5
2016-08-07 20:38:26,836 - DEBUG --- vertex_to_join_near_v1_on_the_face: 168
2016-08-07 20:38:26,836 - DEBUG --- vertex_to_join_near_v2_on_the_face: 312
2016-08-07 20:38:26,836 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 135
2016-08-07 20:38:26,836 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 190
2016-08-07 20:38:26,837 - DEBUG --- third_face_to_update: [(113, 57), (57, 135), (135, 146), (146, 168), (168, 157), (157, 113)]
2016-08-07 20:38:26,837 - DEBUG --- fourth_face_to_update: [(190, 323), (323, 312), (312, 301), (301, 190)]
2016-08-07 20:38:26,837 - INFO --- ariadne_step: [4, 146, 301, 168, 312, 135, 190]
2016-08-07 20:38:26,837 - INFO --- END 101: Remove an F3, F4 or F5
2016-08-07 20:38:26,837 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,855 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,856 - INFO --- END 101: Main loop
2016-08-07 20:38:26,856 - INFO --- 
2016-08-07 20:38:26,856 - INFO --- BEGIN 102: Main loop
2016-08-07 20:38:26,856 - INFO --- BEGIN 102: Search the right edge to remove
2016-08-07 20:38:26,856 - DEBUG --- BEGIN 102: test the 0 edge
2016-08-07 20:38:26,857 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:26,857 - DEBUG --- edge_to_remove: (190, 323)
2016-08-07 20:38:26,857 - DEBUG --- rotated_edge_to_remove: (323, 190)
2016-08-07 20:38:26,857 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,858 - DEBUG --- f1: [(190, 323), (323, 312), (312, 190)]
2016-08-07 20:38:26,858 - DEBUG --- f2: [(29, 37), (37, 217), (217, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 323), (323, 190), (190, 336), (336, 342), (342, 365), (365, 381), (381, 29)]
2016-08-07 20:38:26,858 - DEBUG --- edge_to_remove_on_f1: (190, 323)
2016-08-07 20:38:26,858 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,858 - DEBUG --- index_of_edge_to_remove_on_f2: 8
2016-08-07 20:38:26,859 - DEBUG --- Temporary f1_plus_f2: [(190, 336), (336, 342), (342, 365), (365, 381), (381, 29), (29, 37), (37, 217), (217, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 323), (323, 312), (312, 190)]
2016-08-07 20:38:26,859 - DEBUG --- f1_plus_f2: [(312, 336), (336, 342), (342, 365), (365, 381), (381, 29), (29, 37), (37, 217), (217, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 312)]
2016-08-07 20:38:26,859 - DEBUG --- END: join_faces
2016-08-07 20:38:26,859 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,859 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,859 - DEBUG --- Edge to remove found :-) (190, 323)
2016-08-07 20:38:26,860 - DEBUG --- f1: [(190, 323), (323, 312), (312, 190)]
2016-08-07 20:38:26,860 - DEBUG --- f2: [(29, 37), (37, 217), (217, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 323), (323, 190), (190, 336), (336, 342), (342, 365), (365, 381), (381, 29)]
2016-08-07 20:38:26,860 - DEBUG --- f1_plus_f2_temp: [(312, 336), (336, 342), (342, 365), (365, 381), (381, 29), (29, 37), (37, 217), (217, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 312)]
2016-08-07 20:38:26,860 - DEBUG --- END 102: test the 0 edge
2016-08-07 20:38:26,860 - INFO --- END 102: Search the right edge to remove. Found: (190, 323)
2016-08-07 20:38:26,861 - INFO --- BEGIN 102: Remove an F3, F4 or F5
2016-08-07 20:38:26,861 - DEBUG --- vertex_to_join_near_v1_on_the_face: 312
2016-08-07 20:38:26,861 - DEBUG --- vertex_to_join_near_v2_on_the_face: 312
2016-08-07 20:38:26,861 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 336
2016-08-07 20:38:26,862 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 51
2016-08-07 20:38:26,862 - DEBUG --- third_face_to_update: [(168, 135), (135, 224), (224, 336), (336, 190), (190, 312), (312, 168)]
2016-08-07 20:38:26,862 - DEBUG --- fourth_face_to_update: [(55, 370), (370, 157), (157, 168), (168, 312), (312, 323), (323, 51), (51, 55)]
2016-08-07 20:38:26,862 - INFO --- ariadne_step: [3, 190, 323, 312, 312, 336, 51]
2016-08-07 20:38:26,862 - INFO --- END 102: Remove an F3, F4 or F5
2016-08-07 20:38:26,863 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,880 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,880 - INFO --- END 102: Main loop
2016-08-07 20:38:26,881 - INFO --- 
2016-08-07 20:38:26,881 - INFO --- BEGIN 103: Main loop
2016-08-07 20:38:26,881 - INFO --- BEGIN 103: Search the right edge to remove
2016-08-07 20:38:26,881 - DEBUG --- BEGIN 103: test the 0 edge
2016-08-07 20:38:26,882 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:26,882 - DEBUG --- edge_to_remove: (132, 193)
2016-08-07 20:38:26,882 - DEBUG --- rotated_edge_to_remove: (193, 132)
2016-08-07 20:38:26,882 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,882 - DEBUG --- f1: [(132, 193), (193, 182), (182, 183), (183, 132)]
2016-08-07 20:38:26,883 - DEBUG --- f2: [(170, 191), (191, 193), (193, 132), (132, 131), (131, 170)]
2016-08-07 20:38:26,883 - DEBUG --- edge_to_remove_on_f1: (132, 193)
2016-08-07 20:38:26,883 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,884 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:26,884 - DEBUG --- Temporary f1_plus_f2: [(132, 131), (131, 170), (170, 191), (191, 193), (193, 182), (182, 183), (183, 132)]
2016-08-07 20:38:26,884 - DEBUG --- f1_plus_f2: [(183, 131), (131, 170), (170, 191), (191, 182), (182, 183)]
2016-08-07 20:38:26,884 - DEBUG --- END: join_faces
2016-08-07 20:38:26,885 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,885 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,885 - DEBUG --- Edge to remove found :-) (132, 193)
2016-08-07 20:38:26,885 - DEBUG --- f1: [(132, 193), (193, 182), (182, 183), (183, 132)]
2016-08-07 20:38:26,886 - DEBUG --- f2: [(170, 191), (191, 193), (193, 132), (132, 131), (131, 170)]
2016-08-07 20:38:26,886 - DEBUG --- f1_plus_f2_temp: [(183, 131), (131, 170), (170, 191), (191, 182), (182, 183)]
2016-08-07 20:38:26,886 - DEBUG --- END 103: test the 0 edge
2016-08-07 20:38:26,886 - INFO --- END 103: Search the right edge to remove. Found: (132, 193)
2016-08-07 20:38:26,886 - INFO --- BEGIN 103: Remove an F3, F4 or F5
2016-08-07 20:38:26,887 - DEBUG --- vertex_to_join_near_v1_on_the_face: 183
2016-08-07 20:38:26,887 - DEBUG --- vertex_to_join_near_v2_on_the_face: 182
2016-08-07 20:38:26,887 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 131
2016-08-07 20:38:26,887 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 191
2016-08-07 20:38:26,888 - DEBUG --- third_face_to_update: [(184, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 128), (128, 131), (131, 132), (132, 183), (183, 184)]
2016-08-07 20:38:26,888 - DEBUG --- fourth_face_to_update: [(181, 182), (182, 193), (193, 191), (191, 181)]
2016-08-07 20:38:26,888 - INFO --- ariadne_step: [4, 132, 193, 183, 182, 131, 191]
2016-08-07 20:38:26,888 - INFO --- END 103: Remove an F3, F4 or F5
2016-08-07 20:38:26,888 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,907 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,908 - INFO --- END 103: Main loop
2016-08-07 20:38:26,908 - INFO --- 
2016-08-07 20:38:26,908 - INFO --- BEGIN 104: Main loop
2016-08-07 20:38:26,909 - INFO --- BEGIN 104: Search the right edge to remove
2016-08-07 20:38:26,909 - DEBUG --- BEGIN 104: test the 0 edge
2016-08-07 20:38:26,909 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:26,909 - DEBUG --- edge_to_remove: (181, 182)
2016-08-07 20:38:26,909 - DEBUG --- rotated_edge_to_remove: (182, 181)
2016-08-07 20:38:26,910 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,910 - DEBUG --- f1: [(181, 182), (182, 191), (191, 181)]
2016-08-07 20:38:26,910 - DEBUG --- f2: [(181, 173), (173, 184), (184, 183), (183, 182), (182, 181)]
2016-08-07 20:38:26,910 - DEBUG --- edge_to_remove_on_f1: (181, 182)
2016-08-07 20:38:26,910 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,911 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:26,911 - DEBUG --- Temporary f1_plus_f2: [(181, 173), (173, 184), (184, 183), (183, 182), (182, 191), (191, 181)]
2016-08-07 20:38:26,911 - DEBUG --- f1_plus_f2: [(191, 173), (173, 184), (184, 183), (183, 191)]
2016-08-07 20:38:26,911 - DEBUG --- END: join_faces
2016-08-07 20:38:26,911 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,912 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,912 - DEBUG --- Edge to remove found :-) (181, 182)
2016-08-07 20:38:26,912 - DEBUG --- f1: [(181, 182), (182, 191), (191, 181)]
2016-08-07 20:38:26,912 - DEBUG --- f2: [(181, 173), (173, 184), (184, 183), (183, 182), (182, 181)]
2016-08-07 20:38:26,913 - DEBUG --- f1_plus_f2_temp: [(191, 173), (173, 184), (184, 183), (183, 191)]
2016-08-07 20:38:26,913 - DEBUG --- END 104: test the 0 edge
2016-08-07 20:38:26,913 - INFO --- END 104: Search the right edge to remove. Found: (181, 182)
2016-08-07 20:38:26,913 - INFO --- BEGIN 104: Remove an F3, F4 or F5
2016-08-07 20:38:26,913 - DEBUG --- vertex_to_join_near_v1_on_the_face: 191
2016-08-07 20:38:26,914 - DEBUG --- vertex_to_join_near_v2_on_the_face: 191
2016-08-07 20:38:26,914 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 173
2016-08-07 20:38:26,914 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 183
2016-08-07 20:38:26,914 - DEBUG --- third_face_to_update: [(191, 170), (170, 169), (169, 173), (173, 181), (181, 191)]
2016-08-07 20:38:26,914 - DEBUG --- fourth_face_to_update: [(183, 131), (131, 170), (170, 191), (191, 182), (182, 183)]
2016-08-07 20:38:26,915 - INFO --- ariadne_step: [3, 181, 182, 191, 191, 173, 183]
2016-08-07 20:38:26,915 - INFO --- END 104: Remove an F3, F4 or F5
2016-08-07 20:38:26,915 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,932 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,932 - INFO --- END 104: Main loop
2016-08-07 20:38:26,933 - INFO --- 
2016-08-07 20:38:26,933 - INFO --- BEGIN 105: Main loop
2016-08-07 20:38:26,933 - INFO --- BEGIN 105: Search the right edge to remove
2016-08-07 20:38:26,933 - DEBUG --- BEGIN 105: test the 0 edge
2016-08-07 20:38:26,934 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:26,934 - DEBUG --- edge_to_remove: (216, 164)
2016-08-07 20:38:26,934 - DEBUG --- rotated_edge_to_remove: (164, 216)
2016-08-07 20:38:26,934 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,934 - DEBUG --- f1: [(216, 164), (164, 163), (163, 215), (215, 216)]
2016-08-07 20:38:26,935 - DEBUG --- f2: [(216, 217), (217, 225), (225, 165), (165, 164), (164, 216)]
2016-08-07 20:38:26,935 - DEBUG --- edge_to_remove_on_f1: (216, 164)
2016-08-07 20:38:26,935 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,935 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:26,936 - DEBUG --- Temporary f1_plus_f2: [(216, 217), (217, 225), (225, 165), (165, 164), (164, 163), (163, 215), (215, 216)]
2016-08-07 20:38:26,936 - DEBUG --- f1_plus_f2: [(215, 217), (217, 225), (225, 165), (165, 163), (163, 215)]
2016-08-07 20:38:26,936 - DEBUG --- END: join_faces
2016-08-07 20:38:26,936 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,937 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,937 - DEBUG --- Edge to remove found :-) (216, 164)
2016-08-07 20:38:26,937 - DEBUG --- f1: [(216, 164), (164, 163), (163, 215), (215, 216)]
2016-08-07 20:38:26,937 - DEBUG --- f2: [(216, 217), (217, 225), (225, 165), (165, 164), (164, 216)]
2016-08-07 20:38:26,937 - DEBUG --- f1_plus_f2_temp: [(215, 217), (217, 225), (225, 165), (165, 163), (163, 215)]
2016-08-07 20:38:26,938 - DEBUG --- END 105: test the 0 edge
2016-08-07 20:38:26,938 - INFO --- END 105: Search the right edge to remove. Found: (216, 164)
2016-08-07 20:38:26,938 - INFO --- BEGIN 105: Remove an F3, F4 or F5
2016-08-07 20:38:26,938 - DEBUG --- vertex_to_join_near_v1_on_the_face: 215
2016-08-07 20:38:26,938 - DEBUG --- vertex_to_join_near_v2_on_the_face: 163
2016-08-07 20:38:26,939 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 217
2016-08-07 20:38:26,939 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 165
2016-08-07 20:38:26,939 - DEBUG --- third_face_to_update: [(312, 336), (336, 342), (342, 365), (365, 381), (381, 29), (29, 37), (37, 217), (217, 216), (216, 215), (215, 97), (97, 50), (50, 51), (51, 312)]
2016-08-07 20:38:26,939 - DEBUG --- fourth_face_to_update: [(164, 165), (165, 166), (166, 162), (162, 161), (161, 160), (160, 159), (159, 155), (155, 156), (156, 163), (163, 164)]
2016-08-07 20:38:26,940 - INFO --- ariadne_step: [4, 216, 164, 215, 163, 217, 165]
2016-08-07 20:38:26,940 - INFO --- END 105: Remove an F3, F4 or F5
2016-08-07 20:38:26,940 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,957 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,957 - INFO --- END 105: Main loop
2016-08-07 20:38:26,957 - INFO --- 
2016-08-07 20:38:26,957 - INFO --- BEGIN 106: Main loop
2016-08-07 20:38:26,958 - INFO --- BEGIN 106: Search the right edge to remove
2016-08-07 20:38:26,958 - DEBUG --- BEGIN 106: test the 0 edge
2016-08-07 20:38:26,958 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:26,959 - DEBUG --- edge_to_remove: (263, 28)
2016-08-07 20:38:26,959 - DEBUG --- rotated_edge_to_remove: (28, 263)
2016-08-07 20:38:26,959 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,959 - DEBUG --- f1: [(263, 28), (28, 17), (17, 18), (18, 263)]
2016-08-07 20:38:26,959 - DEBUG --- f2: [(263, 33), (33, 27), (27, 28), (28, 263)]
2016-08-07 20:38:26,960 - DEBUG --- edge_to_remove_on_f1: (263, 28)
2016-08-07 20:38:26,960 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,960 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:26,960 - DEBUG --- Temporary f1_plus_f2: [(263, 33), (33, 27), (27, 28), (28, 17), (17, 18), (18, 263)]
2016-08-07 20:38:26,960 - DEBUG --- f1_plus_f2: [(18, 33), (33, 27), (27, 17), (17, 18)]
2016-08-07 20:38:26,961 - DEBUG --- END: join_faces
2016-08-07 20:38:26,961 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,961 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,961 - DEBUG --- Edge to remove found :-) (263, 28)
2016-08-07 20:38:26,961 - DEBUG --- f1: [(263, 28), (28, 17), (17, 18), (18, 263)]
2016-08-07 20:38:26,962 - DEBUG --- f2: [(263, 33), (33, 27), (27, 28), (28, 263)]
2016-08-07 20:38:26,962 - DEBUG --- f1_plus_f2_temp: [(18, 33), (33, 27), (27, 17), (17, 18)]
2016-08-07 20:38:26,962 - DEBUG --- END 106: test the 0 edge
2016-08-07 20:38:26,962 - INFO --- END 106: Search the right edge to remove. Found: (263, 28)
2016-08-07 20:38:26,962 - INFO --- BEGIN 106: Remove an F3, F4 or F5
2016-08-07 20:38:26,963 - DEBUG --- vertex_to_join_near_v1_on_the_face: 18
2016-08-07 20:38:26,963 - DEBUG --- vertex_to_join_near_v2_on_the_face: 17
2016-08-07 20:38:26,963 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 33
2016-08-07 20:38:26,963 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 27
2016-08-07 20:38:26,964 - DEBUG --- third_face_to_update: [(3, 5), (5, 32), (32, 33), (33, 263), (263, 18), (18, 7), (7, 3)]
2016-08-07 20:38:26,964 - DEBUG --- fourth_face_to_update: [(28, 27), (27, 380), (380, 379), (379, 395), (395, 19), (19, 16), (16, 17), (17, 28)]
2016-08-07 20:38:26,964 - INFO --- ariadne_step: [4, 263, 28, 18, 17, 33, 27]
2016-08-07 20:38:26,964 - INFO --- END 106: Remove an F3, F4 or F5
2016-08-07 20:38:26,964 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:26,981 - DEBUG --- END: check_regularity
2016-08-07 20:38:26,981 - INFO --- END 106: Main loop
2016-08-07 20:38:26,982 - INFO --- 
2016-08-07 20:38:26,982 - INFO --- BEGIN 107: Main loop
2016-08-07 20:38:26,982 - INFO --- BEGIN 107: Search the right edge to remove
2016-08-07 20:38:26,982 - DEBUG --- BEGIN 107: test the 0 edge
2016-08-07 20:38:26,983 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:26,983 - DEBUG --- edge_to_remove: (13, 281)
2016-08-07 20:38:26,983 - DEBUG --- rotated_edge_to_remove: (281, 13)
2016-08-07 20:38:26,983 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:26,983 - DEBUG --- f1: [(13, 281), (281, 302), (302, 35), (35, 13)]
2016-08-07 20:38:26,984 - DEBUG --- f2: [(281, 13), (13, 374), (374, 269), (269, 282), (282, 275), (275, 277), (277, 278), (278, 280), (280, 281)]
2016-08-07 20:38:26,984 - DEBUG --- edge_to_remove_on_f1: (13, 281)
2016-08-07 20:38:26,984 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:26,984 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:26,984 - DEBUG --- Temporary f1_plus_f2: [(13, 374), (374, 269), (269, 282), (282, 275), (275, 277), (277, 278), (278, 280), (280, 281), (281, 302), (302, 35), (35, 13)]
2016-08-07 20:38:26,985 - DEBUG --- f1_plus_f2: [(35, 374), (374, 269), (269, 282), (282, 275), (275, 277), (277, 278), (278, 280), (280, 302), (302, 35)]
2016-08-07 20:38:26,985 - DEBUG --- END: join_faces
2016-08-07 20:38:26,985 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:26,985 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:26,985 - DEBUG --- Edge to remove found :-) (13, 281)
2016-08-07 20:38:26,986 - DEBUG --- f1: [(13, 281), (281, 302), (302, 35), (35, 13)]
2016-08-07 20:38:26,986 - DEBUG --- f2: [(281, 13), (13, 374), (374, 269), (269, 282), (282, 275), (275, 277), (277, 278), (278, 280), (280, 281)]
2016-08-07 20:38:26,986 - DEBUG --- f1_plus_f2_temp: [(35, 374), (374, 269), (269, 282), (282, 275), (275, 277), (277, 278), (278, 280), (280, 302), (302, 35)]
2016-08-07 20:38:26,986 - DEBUG --- END 107: test the 0 edge
2016-08-07 20:38:26,986 - INFO --- END 107: Search the right edge to remove. Found: (13, 281)
2016-08-07 20:38:26,987 - INFO --- BEGIN 107: Remove an F3, F4 or F5
2016-08-07 20:38:26,987 - DEBUG --- vertex_to_join_near_v1_on_the_face: 35
2016-08-07 20:38:26,987 - DEBUG --- vertex_to_join_near_v2_on_the_face: 302
2016-08-07 20:38:26,987 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 374
2016-08-07 20:38:26,987 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 280
2016-08-07 20:38:26,988 - DEBUG --- third_face_to_update: [(363, 341), (341, 352), (352, 46), (46, 223), (223, 0), (0, 374), (374, 13), (13, 35), (35, 363)]
2016-08-07 20:38:26,988 - DEBUG --- fourth_face_to_update: [(302, 281), (281, 280), (280, 296), (296, 298), (298, 302)]
2016-08-07 20:38:26,988 - INFO --- ariadne_step: [4, 13, 281, 35, 302, 374, 280]
2016-08-07 20:38:26,988 - INFO --- END 107: Remove an F3, F4 or F5
2016-08-07 20:38:26,989 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,005 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,006 - INFO --- END 107: Main loop
2016-08-07 20:38:27,006 - INFO --- 
2016-08-07 20:38:27,006 - INFO --- BEGIN 108: Main loop
2016-08-07 20:38:27,006 - INFO --- BEGIN 108: Search the right edge to remove
2016-08-07 20:38:27,006 - DEBUG --- BEGIN 108: test the 0 edge
2016-08-07 20:38:27,007 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,007 - DEBUG --- edge_to_remove: (283, 295)
2016-08-07 20:38:27,007 - DEBUG --- rotated_edge_to_remove: (295, 283)
2016-08-07 20:38:27,007 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,008 - DEBUG --- f1: [(283, 295), (295, 289), (289, 284), (284, 283)]
2016-08-07 20:38:27,008 - DEBUG --- f2: [(295, 283), (283, 286), (286, 306), (306, 294), (294, 295)]
2016-08-07 20:38:27,008 - DEBUG --- edge_to_remove_on_f1: (283, 295)
2016-08-07 20:38:27,008 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,009 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:27,009 - DEBUG --- Temporary f1_plus_f2: [(283, 286), (286, 306), (306, 294), (294, 295), (295, 289), (289, 284), (284, 283)]
2016-08-07 20:38:27,009 - DEBUG --- f1_plus_f2: [(284, 286), (286, 306), (306, 294), (294, 289), (289, 284)]
2016-08-07 20:38:27,010 - DEBUG --- END: join_faces
2016-08-07 20:38:27,013 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,014 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,014 - DEBUG --- Edge to remove found :-) (283, 295)
2016-08-07 20:38:27,015 - DEBUG --- f1: [(283, 295), (295, 289), (289, 284), (284, 283)]
2016-08-07 20:38:27,015 - DEBUG --- f2: [(295, 283), (283, 286), (286, 306), (306, 294), (294, 295)]
2016-08-07 20:38:27,015 - DEBUG --- f1_plus_f2_temp: [(284, 286), (286, 306), (306, 294), (294, 289), (289, 284)]
2016-08-07 20:38:27,015 - DEBUG --- END 108: test the 0 edge
2016-08-07 20:38:27,015 - INFO --- END 108: Search the right edge to remove. Found: (283, 295)
2016-08-07 20:38:27,016 - INFO --- BEGIN 108: Remove an F3, F4 or F5
2016-08-07 20:38:27,016 - DEBUG --- vertex_to_join_near_v1_on_the_face: 284
2016-08-07 20:38:27,016 - DEBUG --- vertex_to_join_near_v2_on_the_face: 289
2016-08-07 20:38:27,016 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 286
2016-08-07 20:38:27,016 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 294
2016-08-07 20:38:27,017 - DEBUG --- third_face_to_update: [(283, 284), (284, 277), (277, 275), (275, 286), (286, 283)]
2016-08-07 20:38:27,017 - DEBUG --- fourth_face_to_update: [(294, 293), (293, 292), (292, 291), (291, 289), (289, 295), (295, 294)]
2016-08-07 20:38:27,017 - INFO --- ariadne_step: [4, 283, 295, 284, 289, 286, 294]
2016-08-07 20:38:27,017 - INFO --- END 108: Remove an F3, F4 or F5
2016-08-07 20:38:27,018 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,035 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,036 - INFO --- END 108: Main loop
2016-08-07 20:38:27,036 - INFO --- 
2016-08-07 20:38:27,036 - INFO --- BEGIN 109: Main loop
2016-08-07 20:38:27,036 - INFO --- BEGIN 109: Search the right edge to remove
2016-08-07 20:38:27,036 - DEBUG --- BEGIN 109: test the 0 edge
2016-08-07 20:38:27,037 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,037 - DEBUG --- edge_to_remove: (152, 141)
2016-08-07 20:38:27,037 - DEBUG --- rotated_edge_to_remove: (141, 152)
2016-08-07 20:38:27,037 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,037 - DEBUG --- f1: [(152, 141), (141, 102), (102, 103), (103, 152)]
2016-08-07 20:38:27,038 - DEBUG --- f2: [(139, 141), (141, 152), (152, 150), (150, 153), (153, 147), (147, 144), (144, 139)]
2016-08-07 20:38:27,038 - DEBUG --- edge_to_remove_on_f1: (152, 141)
2016-08-07 20:38:27,038 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,038 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:27,038 - DEBUG --- Temporary f1_plus_f2: [(152, 150), (150, 153), (153, 147), (147, 144), (144, 139), (139, 141), (141, 102), (102, 103), (103, 152)]
2016-08-07 20:38:27,039 - DEBUG --- f1_plus_f2: [(103, 150), (150, 153), (153, 147), (147, 144), (144, 139), (139, 102), (102, 103)]
2016-08-07 20:38:27,039 - DEBUG --- END: join_faces
2016-08-07 20:38:27,039 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,039 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,040 - DEBUG --- Edge to remove found :-) (152, 141)
2016-08-07 20:38:27,040 - DEBUG --- f1: [(152, 141), (141, 102), (102, 103), (103, 152)]
2016-08-07 20:38:27,040 - DEBUG --- f2: [(139, 141), (141, 152), (152, 150), (150, 153), (153, 147), (147, 144), (144, 139)]
2016-08-07 20:38:27,040 - DEBUG --- f1_plus_f2_temp: [(103, 150), (150, 153), (153, 147), (147, 144), (144, 139), (139, 102), (102, 103)]
2016-08-07 20:38:27,041 - DEBUG --- END 109: test the 0 edge
2016-08-07 20:38:27,041 - INFO --- END 109: Search the right edge to remove. Found: (152, 141)
2016-08-07 20:38:27,041 - INFO --- BEGIN 109: Remove an F3, F4 or F5
2016-08-07 20:38:27,041 - DEBUG --- vertex_to_join_near_v1_on_the_face: 103
2016-08-07 20:38:27,041 - DEBUG --- vertex_to_join_near_v2_on_the_face: 102
2016-08-07 20:38:27,042 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 150
2016-08-07 20:38:27,042 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 139
2016-08-07 20:38:27,042 - DEBUG --- third_face_to_update: [(152, 103), (103, 92), (92, 97), (97, 215), (215, 163), (163, 156), (156, 150), (150, 152)]
2016-08-07 20:38:27,042 - DEBUG --- fourth_face_to_update: [(98, 102), (102, 141), (141, 139), (139, 140), (140, 106), (106, 98)]
2016-08-07 20:38:27,043 - INFO --- ariadne_step: [4, 152, 141, 103, 102, 150, 139]
2016-08-07 20:38:27,043 - INFO --- END 109: Remove an F3, F4 or F5
2016-08-07 20:38:27,043 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,059 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,059 - INFO --- END 109: Main loop
2016-08-07 20:38:27,060 - INFO --- 
2016-08-07 20:38:27,060 - INFO --- BEGIN 110: Main loop
2016-08-07 20:38:27,060 - INFO --- BEGIN 110: Search the right edge to remove
2016-08-07 20:38:27,061 - DEBUG --- BEGIN 110: test the 0 edge
2016-08-07 20:38:27,061 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,061 - DEBUG --- edge_to_remove: (11, 19)
2016-08-07 20:38:27,061 - DEBUG --- rotated_edge_to_remove: (19, 11)
2016-08-07 20:38:27,061 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,062 - DEBUG --- f1: [(11, 19), (19, 395), (395, 394), (394, 11)]
2016-08-07 20:38:27,062 - DEBUG --- f2: [(11, 8), (8, 16), (16, 19), (19, 11)]
2016-08-07 20:38:27,062 - DEBUG --- edge_to_remove_on_f1: (11, 19)
2016-08-07 20:38:27,062 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,062 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:27,063 - DEBUG --- Temporary f1_plus_f2: [(11, 8), (8, 16), (16, 19), (19, 395), (395, 394), (394, 11)]
2016-08-07 20:38:27,063 - DEBUG --- f1_plus_f2: [(394, 8), (8, 16), (16, 395), (395, 394)]
2016-08-07 20:38:27,063 - DEBUG --- END: join_faces
2016-08-07 20:38:27,063 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,064 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,064 - DEBUG --- Edge to remove found :-) (11, 19)
2016-08-07 20:38:27,064 - DEBUG --- f1: [(11, 19), (19, 395), (395, 394), (394, 11)]
2016-08-07 20:38:27,064 - DEBUG --- f2: [(11, 8), (8, 16), (16, 19), (19, 11)]
2016-08-07 20:38:27,064 - DEBUG --- f1_plus_f2_temp: [(394, 8), (8, 16), (16, 395), (395, 394)]
2016-08-07 20:38:27,065 - DEBUG --- END 110: test the 0 edge
2016-08-07 20:38:27,065 - INFO --- END 110: Search the right edge to remove. Found: (11, 19)
2016-08-07 20:38:27,065 - INFO --- BEGIN 110: Remove an F3, F4 or F5
2016-08-07 20:38:27,065 - DEBUG --- vertex_to_join_near_v1_on_the_face: 394
2016-08-07 20:38:27,066 - DEBUG --- vertex_to_join_near_v2_on_the_face: 395
2016-08-07 20:38:27,066 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 8
2016-08-07 20:38:27,066 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 16
2016-08-07 20:38:27,066 - DEBUG --- third_face_to_update: [(8, 11), (11, 394), (394, 392), (392, 3), (3, 7), (7, 8)]
2016-08-07 20:38:27,067 - DEBUG --- fourth_face_to_update: [(17, 27), (27, 380), (380, 379), (379, 395), (395, 19), (19, 16), (16, 17)]
2016-08-07 20:38:27,067 - INFO --- ariadne_step: [4, 11, 19, 394, 395, 8, 16]
2016-08-07 20:38:27,067 - INFO --- END 110: Remove an F3, F4 or F5
2016-08-07 20:38:27,067 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,083 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,083 - INFO --- END 110: Main loop
2016-08-07 20:38:27,083 - INFO --- 
2016-08-07 20:38:27,084 - INFO --- BEGIN 111: Main loop
2016-08-07 20:38:27,084 - INFO --- BEGIN 111: Search the right edge to remove
2016-08-07 20:38:27,084 - DEBUG --- BEGIN 111: test the 0 edge
2016-08-07 20:38:27,084 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,085 - DEBUG --- edge_to_remove: (239, 209)
2016-08-07 20:38:27,085 - DEBUG --- rotated_edge_to_remove: (209, 239)
2016-08-07 20:38:27,085 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,085 - DEBUG --- f1: [(239, 209), (209, 162), (162, 166), (166, 239)]
2016-08-07 20:38:27,085 - DEBUG --- f2: [(242, 209), (209, 239), (239, 233), (233, 234), (234, 242)]
2016-08-07 20:38:27,086 - DEBUG --- edge_to_remove_on_f1: (239, 209)
2016-08-07 20:38:27,086 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,086 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:27,086 - DEBUG --- Temporary f1_plus_f2: [(239, 233), (233, 234), (234, 242), (242, 209), (209, 162), (162, 166), (166, 239)]
2016-08-07 20:38:27,086 - DEBUG --- f1_plus_f2: [(166, 233), (233, 234), (234, 242), (242, 162), (162, 166)]
2016-08-07 20:38:27,087 - DEBUG --- END: join_faces
2016-08-07 20:38:27,087 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,087 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,087 - DEBUG --- Edge to remove found :-) (239, 209)
2016-08-07 20:38:27,088 - DEBUG --- f1: [(239, 209), (209, 162), (162, 166), (166, 239)]
2016-08-07 20:38:27,088 - DEBUG --- f2: [(242, 209), (209, 239), (239, 233), (233, 234), (234, 242)]
2016-08-07 20:38:27,088 - DEBUG --- f1_plus_f2_temp: [(166, 233), (233, 234), (234, 242), (242, 162), (162, 166)]
2016-08-07 20:38:27,088 - DEBUG --- END 111: test the 0 edge
2016-08-07 20:38:27,088 - INFO --- END 111: Search the right edge to remove. Found: (239, 209)
2016-08-07 20:38:27,089 - INFO --- BEGIN 111: Remove an F3, F4 or F5
2016-08-07 20:38:27,089 - DEBUG --- vertex_to_join_near_v1_on_the_face: 166
2016-08-07 20:38:27,089 - DEBUG --- vertex_to_join_near_v2_on_the_face: 162
2016-08-07 20:38:27,089 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 233
2016-08-07 20:38:27,090 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 242
2016-08-07 20:38:27,090 - DEBUG --- third_face_to_update: [(229, 233), (233, 239), (239, 166), (166, 165), (165, 225), (225, 229)]
2016-08-07 20:38:27,090 - DEBUG --- fourth_face_to_update: [(252, 213), (213, 137), (137, 136), (136, 161), (161, 162), (162, 209), (209, 242), (242, 252)]
2016-08-07 20:38:27,090 - INFO --- ariadne_step: [4, 239, 209, 166, 162, 233, 242]
2016-08-07 20:38:27,091 - INFO --- END 111: Remove an F3, F4 or F5
2016-08-07 20:38:27,091 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,106 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,106 - INFO --- END 111: Main loop
2016-08-07 20:38:27,107 - INFO --- 
2016-08-07 20:38:27,107 - INFO --- BEGIN 112: Main loop
2016-08-07 20:38:27,107 - INFO --- BEGIN 112: Search the right edge to remove
2016-08-07 20:38:27,107 - DEBUG --- BEGIN 112: test the 0 edge
2016-08-07 20:38:27,108 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,108 - DEBUG --- edge_to_remove: (224, 135)
2016-08-07 20:38:27,108 - DEBUG --- rotated_edge_to_remove: (135, 224)
2016-08-07 20:38:27,108 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,109 - DEBUG --- f1: [(224, 135), (135, 57), (57, 68), (68, 224)]
2016-08-07 20:38:27,109 - DEBUG --- f2: [(168, 135), (135, 224), (224, 336), (336, 312), (312, 168)]
2016-08-07 20:38:27,109 - DEBUG --- edge_to_remove_on_f1: (224, 135)
2016-08-07 20:38:27,109 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,110 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:27,110 - DEBUG --- Temporary f1_plus_f2: [(224, 336), (336, 312), (312, 168), (168, 135), (135, 57), (57, 68), (68, 224)]
2016-08-07 20:38:27,110 - DEBUG --- f1_plus_f2: [(68, 336), (336, 312), (312, 168), (168, 57), (57, 68)]
2016-08-07 20:38:27,110 - DEBUG --- END: join_faces
2016-08-07 20:38:27,110 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,111 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,111 - DEBUG --- Edge to remove found :-) (224, 135)
2016-08-07 20:38:27,111 - DEBUG --- f1: [(224, 135), (135, 57), (57, 68), (68, 224)]
2016-08-07 20:38:27,111 - DEBUG --- f2: [(168, 135), (135, 224), (224, 336), (336, 312), (312, 168)]
2016-08-07 20:38:27,112 - DEBUG --- f1_plus_f2_temp: [(68, 336), (336, 312), (312, 168), (168, 57), (57, 68)]
2016-08-07 20:38:27,112 - DEBUG --- END 112: test the 0 edge
2016-08-07 20:38:27,112 - INFO --- END 112: Search the right edge to remove. Found: (224, 135)
2016-08-07 20:38:27,112 - INFO --- BEGIN 112: Remove an F3, F4 or F5
2016-08-07 20:38:27,112 - DEBUG --- vertex_to_join_near_v1_on_the_face: 68
2016-08-07 20:38:27,113 - DEBUG --- vertex_to_join_near_v2_on_the_face: 57
2016-08-07 20:38:27,113 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 336
2016-08-07 20:38:27,113 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 168
2016-08-07 20:38:27,113 - DEBUG --- third_face_to_update: [(224, 68), (68, 79), (79, 340), (340, 342), (342, 336), (336, 224)]
2016-08-07 20:38:27,114 - DEBUG --- fourth_face_to_update: [(113, 57), (57, 135), (135, 168), (168, 157), (157, 113)]
2016-08-07 20:38:27,114 - INFO --- ariadne_step: [4, 224, 135, 68, 57, 336, 168]
2016-08-07 20:38:27,114 - INFO --- END 112: Remove an F3, F4 or F5
2016-08-07 20:38:27,114 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,129 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,130 - INFO --- END 112: Main loop
2016-08-07 20:38:27,130 - INFO --- 
2016-08-07 20:38:27,130 - INFO --- BEGIN 113: Main loop
2016-08-07 20:38:27,131 - INFO --- BEGIN 113: Search the right edge to remove
2016-08-07 20:38:27,131 - DEBUG --- BEGIN 113: test the 0 edge
2016-08-07 20:38:27,131 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,131 - DEBUG --- edge_to_remove: (77, 122)
2016-08-07 20:38:27,131 - DEBUG --- rotated_edge_to_remove: (122, 77)
2016-08-07 20:38:27,132 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,132 - DEBUG --- f1: [(77, 122), (122, 126), (126, 138), (138, 77)]
2016-08-07 20:38:27,132 - DEBUG --- f2: [(122, 77), (77, 73), (73, 64), (64, 74), (74, 122)]
2016-08-07 20:38:27,132 - DEBUG --- edge_to_remove_on_f1: (77, 122)
2016-08-07 20:38:27,133 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,133 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:27,133 - DEBUG --- Temporary f1_plus_f2: [(77, 73), (73, 64), (64, 74), (74, 122), (122, 126), (126, 138), (138, 77)]
2016-08-07 20:38:27,134 - DEBUG --- f1_plus_f2: [(138, 73), (73, 64), (64, 74), (74, 126), (126, 138)]
2016-08-07 20:38:27,134 - DEBUG --- END: join_faces
2016-08-07 20:38:27,134 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,134 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,135 - DEBUG --- Edge to remove found :-) (77, 122)
2016-08-07 20:38:27,135 - DEBUG --- f1: [(77, 122), (122, 126), (126, 138), (138, 77)]
2016-08-07 20:38:27,135 - DEBUG --- f2: [(122, 77), (77, 73), (73, 64), (64, 74), (74, 122)]
2016-08-07 20:38:27,135 - DEBUG --- f1_plus_f2_temp: [(138, 73), (73, 64), (64, 74), (74, 126), (126, 138)]
2016-08-07 20:38:27,135 - DEBUG --- END 113: test the 0 edge
2016-08-07 20:38:27,136 - INFO --- END 113: Search the right edge to remove. Found: (77, 122)
2016-08-07 20:38:27,136 - INFO --- BEGIN 113: Remove an F3, F4 or F5
2016-08-07 20:38:27,136 - DEBUG --- vertex_to_join_near_v1_on_the_face: 138
2016-08-07 20:38:27,136 - DEBUG --- vertex_to_join_near_v2_on_the_face: 126
2016-08-07 20:38:27,137 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 73
2016-08-07 20:38:27,137 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 74
2016-08-07 20:38:27,137 - DEBUG --- third_face_to_update: [(71, 73), (73, 77), (77, 138), (138, 137), (137, 213), (213, 259), (259, 71)]
2016-08-07 20:38:27,137 - DEBUG --- fourth_face_to_update: [(74, 114), (114, 125), (125, 123), (123, 126), (126, 122), (122, 74)]
2016-08-07 20:38:27,138 - INFO --- ariadne_step: [4, 77, 122, 138, 126, 73, 74]
2016-08-07 20:38:27,138 - INFO --- END 113: Remove an F3, F4 or F5
2016-08-07 20:38:27,138 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,152 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,153 - INFO --- END 113: Main loop
2016-08-07 20:38:27,153 - INFO --- 
2016-08-07 20:38:27,153 - INFO --- BEGIN 114: Main loop
2016-08-07 20:38:27,153 - INFO --- BEGIN 114: Search the right edge to remove
2016-08-07 20:38:27,154 - DEBUG --- BEGIN 114: test the 0 edge
2016-08-07 20:38:27,154 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,154 - DEBUG --- edge_to_remove: (144, 147)
2016-08-07 20:38:27,154 - DEBUG --- rotated_edge_to_remove: (147, 144)
2016-08-07 20:38:27,154 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,155 - DEBUG --- f1: [(144, 147), (147, 117), (117, 116), (116, 144)]
2016-08-07 20:38:27,155 - DEBUG --- f2: [(103, 150), (150, 153), (153, 147), (147, 144), (144, 139), (139, 102), (102, 103)]
2016-08-07 20:38:27,155 - DEBUG --- edge_to_remove_on_f1: (144, 147)
2016-08-07 20:38:27,155 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,156 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:27,156 - DEBUG --- Temporary f1_plus_f2: [(144, 139), (139, 102), (102, 103), (103, 150), (150, 153), (153, 147), (147, 117), (117, 116), (116, 144)]
2016-08-07 20:38:27,156 - DEBUG --- f1_plus_f2: [(116, 139), (139, 102), (102, 103), (103, 150), (150, 153), (153, 117), (117, 116)]
2016-08-07 20:38:27,156 - DEBUG --- END: join_faces
2016-08-07 20:38:27,156 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,157 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,157 - DEBUG --- Edge to remove found :-) (144, 147)
2016-08-07 20:38:27,157 - DEBUG --- f1: [(144, 147), (147, 117), (117, 116), (116, 144)]
2016-08-07 20:38:27,157 - DEBUG --- f2: [(103, 150), (150, 153), (153, 147), (147, 144), (144, 139), (139, 102), (102, 103)]
2016-08-07 20:38:27,158 - DEBUG --- f1_plus_f2_temp: [(116, 139), (139, 102), (102, 103), (103, 150), (150, 153), (153, 117), (117, 116)]
2016-08-07 20:38:27,158 - DEBUG --- END 114: test the 0 edge
2016-08-07 20:38:27,158 - INFO --- END 114: Search the right edge to remove. Found: (144, 147)
2016-08-07 20:38:27,158 - INFO --- BEGIN 114: Remove an F3, F4 or F5
2016-08-07 20:38:27,159 - DEBUG --- vertex_to_join_near_v1_on_the_face: 116
2016-08-07 20:38:27,159 - DEBUG --- vertex_to_join_near_v2_on_the_face: 117
2016-08-07 20:38:27,159 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 139
2016-08-07 20:38:27,159 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 153
2016-08-07 20:38:27,159 - DEBUG --- third_face_to_update: [(144, 116), (116, 107), (107, 140), (140, 139), (139, 144)]
2016-08-07 20:38:27,160 - DEBUG --- fourth_face_to_update: [(147, 153), (153, 119), (119, 117), (117, 147)]
2016-08-07 20:38:27,160 - INFO --- ariadne_step: [4, 144, 147, 116, 117, 139, 153]
2016-08-07 20:38:27,160 - INFO --- END 114: Remove an F3, F4 or F5
2016-08-07 20:38:27,160 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,175 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,175 - INFO --- END 114: Main loop
2016-08-07 20:38:27,175 - INFO --- 
2016-08-07 20:38:27,176 - INFO --- BEGIN 115: Main loop
2016-08-07 20:38:27,176 - INFO --- BEGIN 115: Search the right edge to remove
2016-08-07 20:38:27,176 - DEBUG --- BEGIN 115: test the 0 edge
2016-08-07 20:38:27,176 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:27,177 - DEBUG --- edge_to_remove: (117, 153)
2016-08-07 20:38:27,177 - DEBUG --- rotated_edge_to_remove: (153, 117)
2016-08-07 20:38:27,177 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,177 - DEBUG --- f1: [(117, 153), (153, 119), (119, 117)]
2016-08-07 20:38:27,178 - DEBUG --- f2: [(116, 139), (139, 102), (102, 103), (103, 150), (150, 153), (153, 117), (117, 116)]
2016-08-07 20:38:27,178 - DEBUG --- edge_to_remove_on_f1: (117, 153)
2016-08-07 20:38:27,178 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,178 - DEBUG --- index_of_edge_to_remove_on_f2: 5
2016-08-07 20:38:27,178 - DEBUG --- Temporary f1_plus_f2: [(117, 116), (116, 139), (139, 102), (102, 103), (103, 150), (150, 153), (153, 119), (119, 117)]
2016-08-07 20:38:27,179 - DEBUG --- f1_plus_f2: [(119, 116), (116, 139), (139, 102), (102, 103), (103, 150), (150, 119)]
2016-08-07 20:38:27,179 - DEBUG --- END: join_faces
2016-08-07 20:38:27,179 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,179 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,179 - DEBUG --- Edge to remove found :-) (117, 153)
2016-08-07 20:38:27,180 - DEBUG --- f1: [(117, 153), (153, 119), (119, 117)]
2016-08-07 20:38:27,180 - DEBUG --- f2: [(116, 139), (139, 102), (102, 103), (103, 150), (150, 153), (153, 117), (117, 116)]
2016-08-07 20:38:27,180 - DEBUG --- f1_plus_f2_temp: [(119, 116), (116, 139), (139, 102), (102, 103), (103, 150), (150, 119)]
2016-08-07 20:38:27,180 - DEBUG --- END 115: test the 0 edge
2016-08-07 20:38:27,180 - INFO --- END 115: Search the right edge to remove. Found: (117, 153)
2016-08-07 20:38:27,181 - INFO --- BEGIN 115: Remove an F3, F4 or F5
2016-08-07 20:38:27,181 - DEBUG --- vertex_to_join_near_v1_on_the_face: 119
2016-08-07 20:38:27,181 - DEBUG --- vertex_to_join_near_v2_on_the_face: 119
2016-08-07 20:38:27,181 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 116
2016-08-07 20:38:27,181 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 150
2016-08-07 20:38:27,182 - DEBUG --- third_face_to_update: [(70, 107), (107, 116), (116, 117), (117, 119), (119, 114), (114, 74), (74, 64), (64, 70)]
2016-08-07 20:38:27,182 - DEBUG --- fourth_face_to_update: [(153, 150), (150, 156), (156, 155), (155, 125), (125, 114), (114, 119), (119, 153)]
2016-08-07 20:38:27,182 - INFO --- ariadne_step: [3, 117, 153, 119, 119, 116, 150]
2016-08-07 20:38:27,183 - INFO --- END 115: Remove an F3, F4 or F5
2016-08-07 20:38:27,183 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,197 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,197 - INFO --- END 115: Main loop
2016-08-07 20:38:27,198 - INFO --- 
2016-08-07 20:38:27,198 - INFO --- BEGIN 116: Main loop
2016-08-07 20:38:27,198 - INFO --- BEGIN 116: Search the right edge to remove
2016-08-07 20:38:27,198 - DEBUG --- BEGIN 116: test the 0 edge
2016-08-07 20:38:27,199 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,199 - DEBUG --- edge_to_remove: (254, 253)
2016-08-07 20:38:27,199 - DEBUG --- rotated_edge_to_remove: (253, 254)
2016-08-07 20:38:27,199 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,199 - DEBUG --- f1: [(254, 253), (253, 247), (247, 249), (249, 254)]
2016-08-07 20:38:27,200 - DEBUG --- f2: [(258, 259), (259, 213), (213, 252), (252, 253), (253, 254), (254, 255), (255, 256), (256, 258)]
2016-08-07 20:38:27,200 - DEBUG --- edge_to_remove_on_f1: (254, 253)
2016-08-07 20:38:27,200 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,200 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:27,200 - DEBUG --- Temporary f1_plus_f2: [(254, 255), (255, 256), (256, 258), (258, 259), (259, 213), (213, 252), (252, 253), (253, 247), (247, 249), (249, 254)]
2016-08-07 20:38:27,201 - DEBUG --- f1_plus_f2: [(249, 255), (255, 256), (256, 258), (258, 259), (259, 213), (213, 252), (252, 247), (247, 249)]
2016-08-07 20:38:27,201 - DEBUG --- END: join_faces
2016-08-07 20:38:27,201 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,201 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,201 - DEBUG --- Edge to remove found :-) (254, 253)
2016-08-07 20:38:27,202 - DEBUG --- f1: [(254, 253), (253, 247), (247, 249), (249, 254)]
2016-08-07 20:38:27,202 - DEBUG --- f2: [(258, 259), (259, 213), (213, 252), (252, 253), (253, 254), (254, 255), (255, 256), (256, 258)]
2016-08-07 20:38:27,202 - DEBUG --- f1_plus_f2_temp: [(249, 255), (255, 256), (256, 258), (258, 259), (259, 213), (213, 252), (252, 247), (247, 249)]
2016-08-07 20:38:27,202 - DEBUG --- END 116: test the 0 edge
2016-08-07 20:38:27,202 - INFO --- END 116: Search the right edge to remove. Found: (254, 253)
2016-08-07 20:38:27,203 - INFO --- BEGIN 116: Remove an F3, F4 or F5
2016-08-07 20:38:27,203 - DEBUG --- vertex_to_join_near_v1_on_the_face: 249
2016-08-07 20:38:27,203 - DEBUG --- vertex_to_join_near_v2_on_the_face: 247
2016-08-07 20:38:27,203 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 255
2016-08-07 20:38:27,203 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 252
2016-08-07 20:38:27,204 - DEBUG --- third_face_to_update: [(254, 249), (249, 243), (243, 244), (244, 255), (255, 254)]
2016-08-07 20:38:27,204 - DEBUG --- fourth_face_to_update: [(237, 247), (247, 253), (253, 252), (252, 242), (242, 234), (234, 237)]
2016-08-07 20:38:27,204 - INFO --- ariadne_step: [4, 254, 253, 249, 247, 255, 252]
2016-08-07 20:38:27,204 - INFO --- END 116: Remove an F3, F4 or F5
2016-08-07 20:38:27,204 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,218 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,219 - INFO --- END 116: Main loop
2016-08-07 20:38:27,219 - INFO --- 
2016-08-07 20:38:27,219 - INFO --- BEGIN 117: Main loop
2016-08-07 20:38:27,220 - INFO --- BEGIN 117: Search the right edge to remove
2016-08-07 20:38:27,220 - DEBUG --- BEGIN 117: test the 0 edge
2016-08-07 20:38:27,220 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,220 - DEBUG --- edge_to_remove: (38, 37)
2016-08-07 20:38:27,220 - DEBUG --- rotated_edge_to_remove: (37, 38)
2016-08-07 20:38:27,221 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,221 - DEBUG --- f1: [(38, 37), (37, 29), (29, 30), (30, 38)]
2016-08-07 20:38:27,221 - DEBUG --- f2: [(217, 37), (37, 38), (38, 43), (43, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 217)]
2016-08-07 20:38:27,221 - DEBUG --- edge_to_remove_on_f1: (38, 37)
2016-08-07 20:38:27,222 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,222 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:27,222 - DEBUG --- Temporary f1_plus_f2: [(38, 43), (43, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 217), (217, 37), (37, 29), (29, 30), (30, 38)]
2016-08-07 20:38:27,222 - DEBUG --- f1_plus_f2: [(30, 43), (43, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 217), (217, 29), (29, 30)]
2016-08-07 20:38:27,222 - DEBUG --- END: join_faces
2016-08-07 20:38:27,223 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,223 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,223 - DEBUG --- Edge to remove found :-) (38, 37)
2016-08-07 20:38:27,223 - DEBUG --- f1: [(38, 37), (37, 29), (29, 30), (30, 38)]
2016-08-07 20:38:27,223 - DEBUG --- f2: [(217, 37), (37, 38), (38, 43), (43, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 217)]
2016-08-07 20:38:27,224 - DEBUG --- f1_plus_f2_temp: [(30, 43), (43, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 217), (217, 29), (29, 30)]
2016-08-07 20:38:27,224 - DEBUG --- END 117: test the 0 edge
2016-08-07 20:38:27,224 - INFO --- END 117: Search the right edge to remove. Found: (38, 37)
2016-08-07 20:38:27,224 - INFO --- BEGIN 117: Remove an F3, F4 or F5
2016-08-07 20:38:27,225 - DEBUG --- vertex_to_join_near_v1_on_the_face: 30
2016-08-07 20:38:27,225 - DEBUG --- vertex_to_join_near_v2_on_the_face: 29
2016-08-07 20:38:27,225 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 43
2016-08-07 20:38:27,226 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 217
2016-08-07 20:38:27,226 - DEBUG --- third_face_to_update: [(38, 30), (30, 31), (31, 40), (40, 43), (43, 38)]
2016-08-07 20:38:27,226 - DEBUG --- fourth_face_to_update: [(312, 336), (336, 342), (342, 365), (365, 381), (381, 29), (29, 37), (37, 217), (217, 215), (215, 97), (97, 50), (50, 51), (51, 312)]
2016-08-07 20:38:27,226 - INFO --- ariadne_step: [4, 38, 37, 30, 29, 43, 217]
2016-08-07 20:38:27,227 - INFO --- END 117: Remove an F3, F4 or F5
2016-08-07 20:38:27,227 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,240 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,240 - INFO --- END 117: Main loop
2016-08-07 20:38:27,241 - INFO --- 
2016-08-07 20:38:27,241 - INFO --- BEGIN 118: Main loop
2016-08-07 20:38:27,241 - INFO --- BEGIN 118: Search the right edge to remove
2016-08-07 20:38:27,242 - DEBUG --- BEGIN 118: test the 0 edge
2016-08-07 20:38:27,242 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,242 - DEBUG --- edge_to_remove: (354, 308)
2016-08-07 20:38:27,243 - DEBUG --- rotated_edge_to_remove: (308, 354)
2016-08-07 20:38:27,243 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,243 - DEBUG --- f1: [(354, 308), (308, 320), (320, 353), (353, 354)]
2016-08-07 20:38:27,243 - DEBUG --- f2: [(307, 308), (308, 354), (354, 351), (351, 267), (267, 306), (306, 286), (286, 275), (275, 282), (282, 307)]
2016-08-07 20:38:27,244 - DEBUG --- edge_to_remove_on_f1: (354, 308)
2016-08-07 20:38:27,244 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,244 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:27,244 - DEBUG --- Temporary f1_plus_f2: [(354, 351), (351, 267), (267, 306), (306, 286), (286, 275), (275, 282), (282, 307), (307, 308), (308, 320), (320, 353), (353, 354)]
2016-08-07 20:38:27,245 - DEBUG --- f1_plus_f2: [(353, 351), (351, 267), (267, 306), (306, 286), (286, 275), (275, 282), (282, 307), (307, 320), (320, 353)]
2016-08-07 20:38:27,245 - DEBUG --- END: join_faces
2016-08-07 20:38:27,245 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,245 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,246 - DEBUG --- Edge to remove found :-) (354, 308)
2016-08-07 20:38:27,246 - DEBUG --- f1: [(354, 308), (308, 320), (320, 353), (353, 354)]
2016-08-07 20:38:27,246 - DEBUG --- f2: [(307, 308), (308, 354), (354, 351), (351, 267), (267, 306), (306, 286), (286, 275), (275, 282), (282, 307)]
2016-08-07 20:38:27,246 - DEBUG --- f1_plus_f2_temp: [(353, 351), (351, 267), (267, 306), (306, 286), (286, 275), (275, 282), (282, 307), (307, 320), (320, 353)]
2016-08-07 20:38:27,246 - DEBUG --- END 118: test the 0 edge
2016-08-07 20:38:27,247 - INFO --- END 118: Search the right edge to remove. Found: (354, 308)
2016-08-07 20:38:27,247 - INFO --- BEGIN 118: Remove an F3, F4 or F5
2016-08-07 20:38:27,247 - DEBUG --- vertex_to_join_near_v1_on_the_face: 353
2016-08-07 20:38:27,247 - DEBUG --- vertex_to_join_near_v2_on_the_face: 320
2016-08-07 20:38:27,248 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 351
2016-08-07 20:38:27,248 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 307
2016-08-07 20:38:27,248 - DEBUG --- third_face_to_update: [(79, 124), (124, 351), (351, 354), (354, 353), (353, 356), (356, 349), (349, 348), (348, 340), (340, 79)]
2016-08-07 20:38:27,248 - DEBUG --- fourth_face_to_update: [(308, 307), (307, 311), (311, 319), (319, 320), (320, 308)]
2016-08-07 20:38:27,249 - INFO --- ariadne_step: [4, 354, 308, 353, 320, 351, 307]
2016-08-07 20:38:27,249 - INFO --- END 118: Remove an F3, F4 or F5
2016-08-07 20:38:27,249 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,262 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,263 - INFO --- END 118: Main loop
2016-08-07 20:38:27,263 - INFO --- 
2016-08-07 20:38:27,263 - INFO --- BEGIN 119: Main loop
2016-08-07 20:38:27,263 - INFO --- BEGIN 119: Search the right edge to remove
2016-08-07 20:38:27,263 - DEBUG --- BEGIN 119: test the 0 edge
2016-08-07 20:38:27,264 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,264 - DEBUG --- edge_to_remove: (46, 327)
2016-08-07 20:38:27,264 - DEBUG --- rotated_edge_to_remove: (327, 46)
2016-08-07 20:38:27,264 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,265 - DEBUG --- f1: [(46, 327), (327, 326), (326, 223), (223, 46)]
2016-08-07 20:38:27,265 - DEBUG --- f2: [(327, 46), (46, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 366), (366, 367), (367, 348), (348, 349), (349, 327)]
2016-08-07 20:38:27,265 - DEBUG --- edge_to_remove_on_f1: (46, 327)
2016-08-07 20:38:27,265 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,265 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:27,266 - DEBUG --- Temporary f1_plus_f2: [(46, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 366), (366, 367), (367, 348), (348, 349), (349, 327), (327, 326), (326, 223), (223, 46)]
2016-08-07 20:38:27,266 - DEBUG --- f1_plus_f2: [(223, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 366), (366, 367), (367, 348), (348, 349), (349, 326), (326, 223)]
2016-08-07 20:38:27,266 - DEBUG --- END: join_faces
2016-08-07 20:38:27,266 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,266 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,267 - DEBUG --- Edge to remove found :-) (46, 327)
2016-08-07 20:38:27,267 - DEBUG --- f1: [(46, 327), (327, 326), (326, 223), (223, 46)]
2016-08-07 20:38:27,267 - DEBUG --- f2: [(327, 46), (46, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 366), (366, 367), (367, 348), (348, 349), (349, 327)]
2016-08-07 20:38:27,267 - DEBUG --- f1_plus_f2_temp: [(223, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 366), (366, 367), (367, 348), (348, 349), (349, 326), (326, 223)]
2016-08-07 20:38:27,267 - DEBUG --- END 119: test the 0 edge
2016-08-07 20:38:27,268 - INFO --- END 119: Search the right edge to remove. Found: (46, 327)
2016-08-07 20:38:27,268 - INFO --- BEGIN 119: Remove an F3, F4 or F5
2016-08-07 20:38:27,268 - DEBUG --- vertex_to_join_near_v1_on_the_face: 223
2016-08-07 20:38:27,268 - DEBUG --- vertex_to_join_near_v2_on_the_face: 326
2016-08-07 20:38:27,269 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 352
2016-08-07 20:38:27,269 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 349
2016-08-07 20:38:27,269 - DEBUG --- third_face_to_update: [(363, 341), (341, 352), (352, 46), (46, 223), (223, 0), (0, 374), (374, 35), (35, 363)]
2016-08-07 20:38:27,269 - DEBUG --- fourth_face_to_update: [(349, 356), (356, 316), (316, 317), (317, 326), (326, 327), (327, 349)]
2016-08-07 20:38:27,270 - INFO --- ariadne_step: [4, 46, 327, 223, 326, 352, 349]
2016-08-07 20:38:27,270 - INFO --- END 119: Remove an F3, F4 or F5
2016-08-07 20:38:27,270 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,282 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,283 - INFO --- END 119: Main loop
2016-08-07 20:38:27,283 - INFO --- 
2016-08-07 20:38:27,284 - INFO --- BEGIN 120: Main loop
2016-08-07 20:38:27,284 - INFO --- BEGIN 120: Search the right edge to remove
2016-08-07 20:38:27,284 - DEBUG --- BEGIN 120: test the 0 edge
2016-08-07 20:38:27,284 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,284 - DEBUG --- edge_to_remove: (374, 0)
2016-08-07 20:38:27,285 - DEBUG --- rotated_edge_to_remove: (0, 374)
2016-08-07 20:38:27,285 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,285 - DEBUG --- f1: [(374, 0), (0, 274), (274, 269), (269, 374)]
2016-08-07 20:38:27,285 - DEBUG --- f2: [(363, 341), (341, 352), (352, 223), (223, 0), (0, 374), (374, 35), (35, 363)]
2016-08-07 20:38:27,286 - DEBUG --- edge_to_remove_on_f1: (374, 0)
2016-08-07 20:38:27,286 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,286 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:27,286 - DEBUG --- Temporary f1_plus_f2: [(374, 35), (35, 363), (363, 341), (341, 352), (352, 223), (223, 0), (0, 274), (274, 269), (269, 374)]
2016-08-07 20:38:27,286 - DEBUG --- f1_plus_f2: [(269, 35), (35, 363), (363, 341), (341, 352), (352, 223), (223, 274), (274, 269)]
2016-08-07 20:38:27,287 - DEBUG --- END: join_faces
2016-08-07 20:38:27,287 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,287 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,287 - DEBUG --- Edge to remove found :-) (374, 0)
2016-08-07 20:38:27,287 - DEBUG --- f1: [(374, 0), (0, 274), (274, 269), (269, 374)]
2016-08-07 20:38:27,288 - DEBUG --- f2: [(363, 341), (341, 352), (352, 223), (223, 0), (0, 374), (374, 35), (35, 363)]
2016-08-07 20:38:27,288 - DEBUG --- f1_plus_f2_temp: [(269, 35), (35, 363), (363, 341), (341, 352), (352, 223), (223, 274), (274, 269)]
2016-08-07 20:38:27,288 - DEBUG --- END 120: test the 0 edge
2016-08-07 20:38:27,288 - INFO --- END 120: Search the right edge to remove. Found: (374, 0)
2016-08-07 20:38:27,288 - INFO --- BEGIN 120: Remove an F3, F4 or F5
2016-08-07 20:38:27,289 - DEBUG --- vertex_to_join_near_v1_on_the_face: 269
2016-08-07 20:38:27,289 - DEBUG --- vertex_to_join_near_v2_on_the_face: 274
2016-08-07 20:38:27,289 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 35
2016-08-07 20:38:27,289 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 223
2016-08-07 20:38:27,290 - DEBUG --- third_face_to_update: [(35, 374), (374, 269), (269, 282), (282, 275), (275, 277), (277, 278), (278, 280), (280, 302), (302, 35)]
2016-08-07 20:38:27,290 - DEBUG --- fourth_face_to_update: [(223, 326), (326, 317), (317, 310), (310, 274), (274, 0), (0, 223)]
2016-08-07 20:38:27,290 - INFO --- ariadne_step: [4, 374, 0, 269, 274, 35, 223]
2016-08-07 20:38:27,291 - INFO --- END 120: Remove an F3, F4 or F5
2016-08-07 20:38:27,291 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,303 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,304 - INFO --- END 120: Main loop
2016-08-07 20:38:27,304 - INFO --- 
2016-08-07 20:38:27,304 - INFO --- BEGIN 121: Main loop
2016-08-07 20:38:27,304 - INFO --- BEGIN 121: Search the right edge to remove
2016-08-07 20:38:27,305 - DEBUG --- BEGIN 121: test the 0 edge
2016-08-07 20:38:27,305 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,305 - DEBUG --- edge_to_remove: (191, 170)
2016-08-07 20:38:27,305 - DEBUG --- rotated_edge_to_remove: (170, 191)
2016-08-07 20:38:27,305 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,306 - DEBUG --- f1: [(191, 170), (170, 169), (169, 173), (173, 191)]
2016-08-07 20:38:27,306 - DEBUG --- f2: [(183, 131), (131, 170), (170, 191), (191, 183)]
2016-08-07 20:38:27,306 - DEBUG --- edge_to_remove_on_f1: (191, 170)
2016-08-07 20:38:27,306 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,306 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:27,307 - DEBUG --- Temporary f1_plus_f2: [(191, 183), (183, 131), (131, 170), (170, 169), (169, 173), (173, 191)]
2016-08-07 20:38:27,307 - DEBUG --- f1_plus_f2: [(173, 183), (183, 131), (131, 169), (169, 173)]
2016-08-07 20:38:27,307 - DEBUG --- END: join_faces
2016-08-07 20:38:27,307 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,308 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,308 - DEBUG --- Edge to remove found :-) (191, 170)
2016-08-07 20:38:27,308 - DEBUG --- f1: [(191, 170), (170, 169), (169, 173), (173, 191)]
2016-08-07 20:38:27,308 - DEBUG --- f2: [(183, 131), (131, 170), (170, 191), (191, 183)]
2016-08-07 20:38:27,309 - DEBUG --- f1_plus_f2_temp: [(173, 183), (183, 131), (131, 169), (169, 173)]
2016-08-07 20:38:27,309 - DEBUG --- END 121: test the 0 edge
2016-08-07 20:38:27,309 - INFO --- END 121: Search the right edge to remove. Found: (191, 170)
2016-08-07 20:38:27,309 - INFO --- BEGIN 121: Remove an F3, F4 or F5
2016-08-07 20:38:27,310 - DEBUG --- vertex_to_join_near_v1_on_the_face: 173
2016-08-07 20:38:27,310 - DEBUG --- vertex_to_join_near_v2_on_the_face: 169
2016-08-07 20:38:27,310 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 183
2016-08-07 20:38:27,310 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 131
2016-08-07 20:38:27,310 - DEBUG --- third_face_to_update: [(191, 173), (173, 184), (184, 183), (183, 191)]
2016-08-07 20:38:27,311 - DEBUG --- fourth_face_to_update: [(131, 128), (128, 159), (159, 160), (160, 169), (169, 170), (170, 131)]
2016-08-07 20:38:27,311 - INFO --- ariadne_step: [4, 191, 170, 173, 169, 183, 131]
2016-08-07 20:38:27,311 - INFO --- END 121: Remove an F3, F4 or F5
2016-08-07 20:38:27,311 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,323 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,323 - INFO --- END 121: Main loop
2016-08-07 20:38:27,324 - INFO --- 
2016-08-07 20:38:27,324 - INFO --- BEGIN 122: Main loop
2016-08-07 20:38:27,324 - INFO --- BEGIN 122: Search the right edge to remove
2016-08-07 20:38:27,324 - DEBUG --- BEGIN 122: test the 0 edge
2016-08-07 20:38:27,325 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:27,325 - DEBUG --- edge_to_remove: (183, 173)
2016-08-07 20:38:27,325 - DEBUG --- rotated_edge_to_remove: (173, 183)
2016-08-07 20:38:27,326 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,326 - DEBUG --- f1: [(183, 173), (173, 184), (184, 183)]
2016-08-07 20:38:27,326 - DEBUG --- f2: [(173, 183), (183, 131), (131, 169), (169, 173)]
2016-08-07 20:38:27,327 - DEBUG --- edge_to_remove_on_f1: (183, 173)
2016-08-07 20:38:27,327 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,327 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:27,327 - DEBUG --- Temporary f1_plus_f2: [(183, 131), (131, 169), (169, 173), (173, 184), (184, 183)]
2016-08-07 20:38:27,327 - DEBUG --- f1_plus_f2: [(184, 131), (131, 169), (169, 184)]
2016-08-07 20:38:27,328 - DEBUG --- END: join_faces
2016-08-07 20:38:27,328 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,328 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,328 - DEBUG --- Edge to remove found :-) (183, 173)
2016-08-07 20:38:27,329 - DEBUG --- f1: [(183, 173), (173, 184), (184, 183)]
2016-08-07 20:38:27,329 - DEBUG --- f2: [(173, 183), (183, 131), (131, 169), (169, 173)]
2016-08-07 20:38:27,329 - DEBUG --- f1_plus_f2_temp: [(184, 131), (131, 169), (169, 184)]
2016-08-07 20:38:27,329 - DEBUG --- END 122: test the 0 edge
2016-08-07 20:38:27,329 - INFO --- END 122: Search the right edge to remove. Found: (183, 173)
2016-08-07 20:38:27,330 - INFO --- BEGIN 122: Remove an F3, F4 or F5
2016-08-07 20:38:27,330 - DEBUG --- vertex_to_join_near_v1_on_the_face: 184
2016-08-07 20:38:27,330 - DEBUG --- vertex_to_join_near_v2_on_the_face: 184
2016-08-07 20:38:27,330 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 131
2016-08-07 20:38:27,330 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 169
2016-08-07 20:38:27,331 - DEBUG --- third_face_to_update: [(184, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 128), (128, 131), (131, 183), (183, 184)]
2016-08-07 20:38:27,331 - DEBUG --- fourth_face_to_update: [(184, 173), (173, 169), (169, 160), (160, 161), (161, 136), (136, 184)]
2016-08-07 20:38:27,331 - INFO --- ariadne_step: [3, 183, 173, 184, 184, 131, 169]
2016-08-07 20:38:27,331 - INFO --- END 122: Remove an F3, F4 or F5
2016-08-07 20:38:27,332 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,343 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,344 - INFO --- END 122: Main loop
2016-08-07 20:38:27,344 - INFO --- 
2016-08-07 20:38:27,344 - INFO --- BEGIN 123: Main loop
2016-08-07 20:38:27,344 - INFO --- BEGIN 123: Search the right edge to remove
2016-08-07 20:38:27,345 - DEBUG --- BEGIN 123: test the 0 edge
2016-08-07 20:38:27,345 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:27,345 - DEBUG --- edge_to_remove: (184, 131)
2016-08-07 20:38:27,345 - DEBUG --- rotated_edge_to_remove: (131, 184)
2016-08-07 20:38:27,346 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,346 - DEBUG --- f1: [(184, 131), (131, 169), (169, 184)]
2016-08-07 20:38:27,346 - DEBUG --- f2: [(184, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 128), (128, 131), (131, 184)]
2016-08-07 20:38:27,346 - DEBUG --- edge_to_remove_on_f1: (184, 131)
2016-08-07 20:38:27,346 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,347 - DEBUG --- index_of_edge_to_remove_on_f2: 7
2016-08-07 20:38:27,347 - DEBUG --- Temporary f1_plus_f2: [(184, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 128), (128, 131), (131, 169), (169, 184)]
2016-08-07 20:38:27,347 - DEBUG --- f1_plus_f2: [(169, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 128), (128, 169)]
2016-08-07 20:38:27,347 - DEBUG --- END: join_faces
2016-08-07 20:38:27,348 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,348 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,348 - DEBUG --- Edge to remove found :-) (184, 131)
2016-08-07 20:38:27,348 - DEBUG --- f1: [(184, 131), (131, 169), (169, 184)]
2016-08-07 20:38:27,348 - DEBUG --- f2: [(184, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 128), (128, 131), (131, 184)]
2016-08-07 20:38:27,349 - DEBUG --- f1_plus_f2_temp: [(169, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 128), (128, 169)]
2016-08-07 20:38:27,349 - DEBUG --- END 123: test the 0 edge
2016-08-07 20:38:27,349 - INFO --- END 123: Search the right edge to remove. Found: (184, 131)
2016-08-07 20:38:27,349 - INFO --- BEGIN 123: Remove an F3, F4 or F5
2016-08-07 20:38:27,350 - DEBUG --- vertex_to_join_near_v1_on_the_face: 169
2016-08-07 20:38:27,350 - DEBUG --- vertex_to_join_near_v2_on_the_face: 169
2016-08-07 20:38:27,350 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 136
2016-08-07 20:38:27,350 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 128
2016-08-07 20:38:27,351 - DEBUG --- third_face_to_update: [(184, 169), (169, 160), (160, 161), (161, 136), (136, 184)]
2016-08-07 20:38:27,351 - DEBUG --- fourth_face_to_update: [(131, 128), (128, 159), (159, 160), (160, 169), (169, 131)]
2016-08-07 20:38:27,351 - INFO --- ariadne_step: [3, 184, 131, 169, 169, 136, 128]
2016-08-07 20:38:27,351 - INFO --- END 123: Remove an F3, F4 or F5
2016-08-07 20:38:27,351 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,363 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,363 - INFO --- END 123: Main loop
2016-08-07 20:38:27,364 - INFO --- 
2016-08-07 20:38:27,364 - INFO --- BEGIN 124: Main loop
2016-08-07 20:38:27,364 - INFO --- BEGIN 124: Search the right edge to remove
2016-08-07 20:38:27,364 - DEBUG --- BEGIN 124: test the 0 edge
2016-08-07 20:38:27,365 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,365 - DEBUG --- edge_to_remove: (18, 33)
2016-08-07 20:38:27,365 - DEBUG --- rotated_edge_to_remove: (33, 18)
2016-08-07 20:38:27,365 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,365 - DEBUG --- f1: [(18, 33), (33, 27), (27, 17), (17, 18)]
2016-08-07 20:38:27,366 - DEBUG --- f2: [(3, 5), (5, 32), (32, 33), (33, 18), (18, 7), (7, 3)]
2016-08-07 20:38:27,366 - DEBUG --- edge_to_remove_on_f1: (18, 33)
2016-08-07 20:38:27,366 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,367 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:27,367 - DEBUG --- Temporary f1_plus_f2: [(18, 7), (7, 3), (3, 5), (5, 32), (32, 33), (33, 27), (27, 17), (17, 18)]
2016-08-07 20:38:27,367 - DEBUG --- f1_plus_f2: [(17, 7), (7, 3), (3, 5), (5, 32), (32, 27), (27, 17)]
2016-08-07 20:38:27,367 - DEBUG --- END: join_faces
2016-08-07 20:38:27,368 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,368 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,368 - DEBUG --- Edge to remove found :-) (18, 33)
2016-08-07 20:38:27,368 - DEBUG --- f1: [(18, 33), (33, 27), (27, 17), (17, 18)]
2016-08-07 20:38:27,368 - DEBUG --- f2: [(3, 5), (5, 32), (32, 33), (33, 18), (18, 7), (7, 3)]
2016-08-07 20:38:27,369 - DEBUG --- f1_plus_f2_temp: [(17, 7), (7, 3), (3, 5), (5, 32), (32, 27), (27, 17)]
2016-08-07 20:38:27,369 - DEBUG --- END 124: test the 0 edge
2016-08-07 20:38:27,369 - INFO --- END 124: Search the right edge to remove. Found: (18, 33)
2016-08-07 20:38:27,369 - INFO --- BEGIN 124: Remove an F3, F4 or F5
2016-08-07 20:38:27,369 - DEBUG --- vertex_to_join_near_v1_on_the_face: 17
2016-08-07 20:38:27,370 - DEBUG --- vertex_to_join_near_v2_on_the_face: 27
2016-08-07 20:38:27,370 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 7
2016-08-07 20:38:27,370 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 32
2016-08-07 20:38:27,370 - DEBUG --- third_face_to_update: [(8, 7), (7, 18), (18, 17), (17, 16), (16, 8)]
2016-08-07 20:38:27,371 - DEBUG --- fourth_face_to_update: [(32, 31), (31, 30), (30, 29), (29, 381), (381, 380), (380, 27), (27, 33), (33, 32)]
2016-08-07 20:38:27,371 - INFO --- ariadne_step: [4, 18, 33, 17, 27, 7, 32]
2016-08-07 20:38:27,371 - INFO --- END 124: Remove an F3, F4 or F5
2016-08-07 20:38:27,371 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,382 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,383 - INFO --- END 124: Main loop
2016-08-07 20:38:27,383 - INFO --- 
2016-08-07 20:38:27,383 - INFO --- BEGIN 125: Main loop
2016-08-07 20:38:27,384 - INFO --- BEGIN 125: Search the right edge to remove
2016-08-07 20:38:27,384 - DEBUG --- BEGIN 125: test the 0 edge
2016-08-07 20:38:27,384 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,384 - DEBUG --- edge_to_remove: (302, 280)
2016-08-07 20:38:27,385 - DEBUG --- rotated_edge_to_remove: (280, 302)
2016-08-07 20:38:27,385 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,385 - DEBUG --- f1: [(302, 280), (280, 296), (296, 298), (298, 302)]
2016-08-07 20:38:27,385 - DEBUG --- f2: [(35, 269), (269, 282), (282, 275), (275, 277), (277, 278), (278, 280), (280, 302), (302, 35)]
2016-08-07 20:38:27,385 - DEBUG --- edge_to_remove_on_f1: (302, 280)
2016-08-07 20:38:27,386 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,386 - DEBUG --- index_of_edge_to_remove_on_f2: 6
2016-08-07 20:38:27,386 - DEBUG --- Temporary f1_plus_f2: [(302, 35), (35, 269), (269, 282), (282, 275), (275, 277), (277, 278), (278, 280), (280, 296), (296, 298), (298, 302)]
2016-08-07 20:38:27,386 - DEBUG --- f1_plus_f2: [(298, 35), (35, 269), (269, 282), (282, 275), (275, 277), (277, 278), (278, 296), (296, 298)]
2016-08-07 20:38:27,386 - DEBUG --- END: join_faces
2016-08-07 20:38:27,387 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,387 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,387 - DEBUG --- Edge to remove found :-) (302, 280)
2016-08-07 20:38:27,387 - DEBUG --- f1: [(302, 280), (280, 296), (296, 298), (298, 302)]
2016-08-07 20:38:27,388 - DEBUG --- f2: [(35, 269), (269, 282), (282, 275), (275, 277), (277, 278), (278, 280), (280, 302), (302, 35)]
2016-08-07 20:38:27,388 - DEBUG --- f1_plus_f2_temp: [(298, 35), (35, 269), (269, 282), (282, 275), (275, 277), (277, 278), (278, 296), (296, 298)]
2016-08-07 20:38:27,388 - DEBUG --- END 125: test the 0 edge
2016-08-07 20:38:27,388 - INFO --- END 125: Search the right edge to remove. Found: (302, 280)
2016-08-07 20:38:27,389 - INFO --- BEGIN 125: Remove an F3, F4 or F5
2016-08-07 20:38:27,389 - DEBUG --- vertex_to_join_near_v1_on_the_face: 298
2016-08-07 20:38:27,389 - DEBUG --- vertex_to_join_near_v2_on_the_face: 296
2016-08-07 20:38:27,390 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 35
2016-08-07 20:38:27,390 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 278
2016-08-07 20:38:27,390 - DEBUG --- third_face_to_update: [(35, 302), (302, 298), (298, 305), (305, 266), (266, 363), (363, 35)]
2016-08-07 20:38:27,390 - DEBUG --- fourth_face_to_update: [(291, 292), (292, 296), (296, 280), (280, 278), (278, 291)]
2016-08-07 20:38:27,391 - INFO --- ariadne_step: [4, 302, 280, 298, 296, 35, 278]
2016-08-07 20:38:27,391 - INFO --- END 125: Remove an F3, F4 or F5
2016-08-07 20:38:27,391 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,401 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,402 - INFO --- END 125: Main loop
2016-08-07 20:38:27,402 - INFO --- 
2016-08-07 20:38:27,402 - INFO --- BEGIN 126: Main loop
2016-08-07 20:38:27,402 - INFO --- BEGIN 126: Search the right edge to remove
2016-08-07 20:38:27,403 - DEBUG --- BEGIN 126: test the 0 edge
2016-08-07 20:38:27,403 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,403 - DEBUG --- edge_to_remove: (286, 284)
2016-08-07 20:38:27,403 - DEBUG --- rotated_edge_to_remove: (284, 286)
2016-08-07 20:38:27,404 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,404 - DEBUG --- f1: [(286, 284), (284, 277), (277, 275), (275, 286)]
2016-08-07 20:38:27,404 - DEBUG --- f2: [(284, 286), (286, 306), (306, 294), (294, 289), (289, 284)]
2016-08-07 20:38:27,404 - DEBUG --- edge_to_remove_on_f1: (286, 284)
2016-08-07 20:38:27,404 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,405 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:27,405 - DEBUG --- Temporary f1_plus_f2: [(286, 306), (306, 294), (294, 289), (289, 284), (284, 277), (277, 275), (275, 286)]
2016-08-07 20:38:27,405 - DEBUG --- f1_plus_f2: [(275, 306), (306, 294), (294, 289), (289, 277), (277, 275)]
2016-08-07 20:38:27,405 - DEBUG --- END: join_faces
2016-08-07 20:38:27,406 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,406 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,406 - DEBUG --- Edge to remove found :-) (286, 284)
2016-08-07 20:38:27,406 - DEBUG --- f1: [(286, 284), (284, 277), (277, 275), (275, 286)]
2016-08-07 20:38:27,406 - DEBUG --- f2: [(284, 286), (286, 306), (306, 294), (294, 289), (289, 284)]
2016-08-07 20:38:27,407 - DEBUG --- f1_plus_f2_temp: [(275, 306), (306, 294), (294, 289), (289, 277), (277, 275)]
2016-08-07 20:38:27,407 - DEBUG --- END 126: test the 0 edge
2016-08-07 20:38:27,407 - INFO --- END 126: Search the right edge to remove. Found: (286, 284)
2016-08-07 20:38:27,407 - INFO --- BEGIN 126: Remove an F3, F4 or F5
2016-08-07 20:38:27,407 - DEBUG --- vertex_to_join_near_v1_on_the_face: 275
2016-08-07 20:38:27,408 - DEBUG --- vertex_to_join_near_v2_on_the_face: 277
2016-08-07 20:38:27,408 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 306
2016-08-07 20:38:27,408 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 289
2016-08-07 20:38:27,409 - DEBUG --- third_face_to_update: [(353, 351), (351, 267), (267, 306), (306, 286), (286, 275), (275, 282), (282, 307), (307, 320), (320, 353)]
2016-08-07 20:38:27,409 - DEBUG --- fourth_face_to_update: [(277, 284), (284, 289), (289, 291), (291, 278), (278, 277)]
2016-08-07 20:38:27,409 - INFO --- ariadne_step: [4, 286, 284, 275, 277, 306, 289]
2016-08-07 20:38:27,410 - INFO --- END 126: Remove an F3, F4 or F5
2016-08-07 20:38:27,410 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,420 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,420 - INFO --- END 126: Main loop
2016-08-07 20:38:27,421 - INFO --- 
2016-08-07 20:38:27,421 - INFO --- BEGIN 127: Main loop
2016-08-07 20:38:27,421 - INFO --- BEGIN 127: Search the right edge to remove
2016-08-07 20:38:27,422 - DEBUG --- BEGIN 127: test the 0 edge
2016-08-07 20:38:27,422 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,422 - DEBUG --- edge_to_remove: (394, 8)
2016-08-07 20:38:27,423 - DEBUG --- rotated_edge_to_remove: (8, 394)
2016-08-07 20:38:27,423 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,423 - DEBUG --- f1: [(394, 8), (8, 16), (16, 395), (395, 394)]
2016-08-07 20:38:27,423 - DEBUG --- f2: [(8, 394), (394, 392), (392, 3), (3, 7), (7, 8)]
2016-08-07 20:38:27,423 - DEBUG --- edge_to_remove_on_f1: (394, 8)
2016-08-07 20:38:27,424 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,424 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:27,424 - DEBUG --- Temporary f1_plus_f2: [(394, 392), (392, 3), (3, 7), (7, 8), (8, 16), (16, 395), (395, 394)]
2016-08-07 20:38:27,424 - DEBUG --- f1_plus_f2: [(395, 392), (392, 3), (3, 7), (7, 16), (16, 395)]
2016-08-07 20:38:27,425 - DEBUG --- END: join_faces
2016-08-07 20:38:27,425 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,425 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,426 - DEBUG --- Edge to remove found :-) (394, 8)
2016-08-07 20:38:27,426 - DEBUG --- f1: [(394, 8), (8, 16), (16, 395), (395, 394)]
2016-08-07 20:38:27,426 - DEBUG --- f2: [(8, 394), (394, 392), (392, 3), (3, 7), (7, 8)]
2016-08-07 20:38:27,427 - DEBUG --- f1_plus_f2_temp: [(395, 392), (392, 3), (3, 7), (7, 16), (16, 395)]
2016-08-07 20:38:27,427 - DEBUG --- END 127: test the 0 edge
2016-08-07 20:38:27,427 - INFO --- END 127: Search the right edge to remove. Found: (394, 8)
2016-08-07 20:38:27,427 - INFO --- BEGIN 127: Remove an F3, F4 or F5
2016-08-07 20:38:27,427 - DEBUG --- vertex_to_join_near_v1_on_the_face: 395
2016-08-07 20:38:27,428 - DEBUG --- vertex_to_join_near_v2_on_the_face: 16
2016-08-07 20:38:27,428 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 392
2016-08-07 20:38:27,428 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 7
2016-08-07 20:38:27,428 - DEBUG --- third_face_to_update: [(366, 368), (368, 391), (391, 392), (392, 394), (394, 395), (395, 379), (379, 366)]
2016-08-07 20:38:27,429 - DEBUG --- fourth_face_to_update: [(8, 7), (7, 17), (17, 16), (16, 8)]
2016-08-07 20:38:27,429 - INFO --- ariadne_step: [4, 394, 8, 395, 16, 392, 7]
2016-08-07 20:38:27,429 - INFO --- END 127: Remove an F3, F4 or F5
2016-08-07 20:38:27,429 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,439 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,440 - INFO --- END 127: Main loop
2016-08-07 20:38:27,440 - INFO --- 
2016-08-07 20:38:27,440 - INFO --- BEGIN 128: Main loop
2016-08-07 20:38:27,440 - INFO --- BEGIN 128: Search the right edge to remove
2016-08-07 20:38:27,441 - DEBUG --- BEGIN 128: test the 0 edge
2016-08-07 20:38:27,441 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:27,441 - DEBUG --- edge_to_remove: (16, 7)
2016-08-07 20:38:27,441 - DEBUG --- rotated_edge_to_remove: (7, 16)
2016-08-07 20:38:27,442 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,442 - DEBUG --- f1: [(16, 7), (7, 17), (17, 16)]
2016-08-07 20:38:27,442 - DEBUG --- f2: [(395, 392), (392, 3), (3, 7), (7, 16), (16, 395)]
2016-08-07 20:38:27,442 - DEBUG --- edge_to_remove_on_f1: (16, 7)
2016-08-07 20:38:27,443 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,443 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:27,443 - DEBUG --- Temporary f1_plus_f2: [(16, 395), (395, 392), (392, 3), (3, 7), (7, 17), (17, 16)]
2016-08-07 20:38:27,443 - DEBUG --- f1_plus_f2: [(17, 395), (395, 392), (392, 3), (3, 17)]
2016-08-07 20:38:27,444 - DEBUG --- END: join_faces
2016-08-07 20:38:27,444 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,444 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,444 - DEBUG --- Edge to remove found :-) (16, 7)
2016-08-07 20:38:27,444 - DEBUG --- f1: [(16, 7), (7, 17), (17, 16)]
2016-08-07 20:38:27,445 - DEBUG --- f2: [(395, 392), (392, 3), (3, 7), (7, 16), (16, 395)]
2016-08-07 20:38:27,445 - DEBUG --- f1_plus_f2_temp: [(17, 395), (395, 392), (392, 3), (3, 17)]
2016-08-07 20:38:27,445 - DEBUG --- END 128: test the 0 edge
2016-08-07 20:38:27,445 - INFO --- END 128: Search the right edge to remove. Found: (16, 7)
2016-08-07 20:38:27,446 - INFO --- BEGIN 128: Remove an F3, F4 or F5
2016-08-07 20:38:27,446 - DEBUG --- vertex_to_join_near_v1_on_the_face: 17
2016-08-07 20:38:27,446 - DEBUG --- vertex_to_join_near_v2_on_the_face: 17
2016-08-07 20:38:27,446 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 395
2016-08-07 20:38:27,447 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 3
2016-08-07 20:38:27,448 - DEBUG --- third_face_to_update: [(17, 27), (27, 380), (380, 379), (379, 395), (395, 16), (16, 17)]
2016-08-07 20:38:27,448 - DEBUG --- fourth_face_to_update: [(17, 7), (7, 3), (3, 5), (5, 32), (32, 27), (27, 17)]
2016-08-07 20:38:27,448 - INFO --- ariadne_step: [3, 16, 7, 17, 17, 395, 3]
2016-08-07 20:38:27,448 - INFO --- END 128: Remove an F3, F4 or F5
2016-08-07 20:38:27,449 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,458 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,458 - INFO --- END 128: Main loop
2016-08-07 20:38:27,459 - INFO --- 
2016-08-07 20:38:27,459 - INFO --- BEGIN 129: Main loop
2016-08-07 20:38:27,461 - INFO --- BEGIN 129: Search the right edge to remove
2016-08-07 20:38:27,461 - DEBUG --- BEGIN 129: test the 0 edge
2016-08-07 20:38:27,461 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,461 - DEBUG --- edge_to_remove: (113, 57)
2016-08-07 20:38:27,462 - DEBUG --- rotated_edge_to_remove: (57, 113)
2016-08-07 20:38:27,462 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,462 - DEBUG --- f1: [(113, 57), (57, 168), (168, 157), (157, 113)]
2016-08-07 20:38:27,462 - DEBUG --- f2: [(113, 352), (352, 341), (341, 124), (124, 79), (79, 68), (68, 57), (57, 113)]
2016-08-07 20:38:27,463 - DEBUG --- edge_to_remove_on_f1: (113, 57)
2016-08-07 20:38:27,463 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,463 - DEBUG --- index_of_edge_to_remove_on_f2: 6
2016-08-07 20:38:27,463 - DEBUG --- Temporary f1_plus_f2: [(113, 352), (352, 341), (341, 124), (124, 79), (79, 68), (68, 57), (57, 168), (168, 157), (157, 113)]
2016-08-07 20:38:27,464 - DEBUG --- f1_plus_f2: [(157, 352), (352, 341), (341, 124), (124, 79), (79, 68), (68, 168), (168, 157)]
2016-08-07 20:38:27,464 - DEBUG --- END: join_faces
2016-08-07 20:38:27,464 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,464 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,464 - DEBUG --- Edge to remove found :-) (113, 57)
2016-08-07 20:38:27,465 - DEBUG --- f1: [(113, 57), (57, 168), (168, 157), (157, 113)]
2016-08-07 20:38:27,465 - DEBUG --- f2: [(113, 352), (352, 341), (341, 124), (124, 79), (79, 68), (68, 57), (57, 113)]
2016-08-07 20:38:27,465 - DEBUG --- f1_plus_f2_temp: [(157, 352), (352, 341), (341, 124), (124, 79), (79, 68), (68, 168), (168, 157)]
2016-08-07 20:38:27,465 - DEBUG --- END 129: test the 0 edge
2016-08-07 20:38:27,466 - INFO --- END 129: Search the right edge to remove. Found: (113, 57)
2016-08-07 20:38:27,466 - INFO --- BEGIN 129: Remove an F3, F4 or F5
2016-08-07 20:38:27,466 - DEBUG --- vertex_to_join_near_v1_on_the_face: 157
2016-08-07 20:38:27,466 - DEBUG --- vertex_to_join_near_v2_on_the_face: 168
2016-08-07 20:38:27,467 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 352
2016-08-07 20:38:27,467 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 68
2016-08-07 20:38:27,467 - DEBUG --- third_face_to_update: [(223, 352), (352, 113), (113, 157), (157, 370), (370, 368), (368, 366), (366, 367), (367, 348), (348, 349), (349, 326), (326, 223)]
2016-08-07 20:38:27,467 - DEBUG --- fourth_face_to_update: [(68, 336), (336, 312), (312, 168), (168, 57), (57, 68)]
2016-08-07 20:38:27,468 - INFO --- ariadne_step: [4, 113, 57, 157, 168, 352, 68]
2016-08-07 20:38:27,468 - INFO --- END 129: Remove an F3, F4 or F5
2016-08-07 20:38:27,468 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,478 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,479 - INFO --- END 129: Main loop
2016-08-07 20:38:27,479 - INFO --- 
2016-08-07 20:38:27,479 - INFO --- BEGIN 130: Main loop
2016-08-07 20:38:27,479 - INFO --- BEGIN 130: Search the right edge to remove
2016-08-07 20:38:27,480 - DEBUG --- BEGIN 130: test the 0 edge
2016-08-07 20:38:27,480 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,480 - DEBUG --- edge_to_remove: (139, 116)
2016-08-07 20:38:27,480 - DEBUG --- rotated_edge_to_remove: (116, 139)
2016-08-07 20:38:27,481 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,481 - DEBUG --- f1: [(139, 116), (116, 107), (107, 140), (140, 139)]
2016-08-07 20:38:27,481 - DEBUG --- f2: [(119, 116), (116, 139), (139, 102), (102, 103), (103, 150), (150, 119)]
2016-08-07 20:38:27,481 - DEBUG --- edge_to_remove_on_f1: (139, 116)
2016-08-07 20:38:27,481 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,482 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:27,482 - DEBUG --- Temporary f1_plus_f2: [(139, 102), (102, 103), (103, 150), (150, 119), (119, 116), (116, 107), (107, 140), (140, 139)]
2016-08-07 20:38:27,482 - DEBUG --- f1_plus_f2: [(140, 102), (102, 103), (103, 150), (150, 119), (119, 107), (107, 140)]
2016-08-07 20:38:27,482 - DEBUG --- END: join_faces
2016-08-07 20:38:27,483 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,483 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,483 - DEBUG --- Edge to remove found :-) (139, 116)
2016-08-07 20:38:27,483 - DEBUG --- f1: [(139, 116), (116, 107), (107, 140), (140, 139)]
2016-08-07 20:38:27,483 - DEBUG --- f2: [(119, 116), (116, 139), (139, 102), (102, 103), (103, 150), (150, 119)]
2016-08-07 20:38:27,484 - DEBUG --- f1_plus_f2_temp: [(140, 102), (102, 103), (103, 150), (150, 119), (119, 107), (107, 140)]
2016-08-07 20:38:27,484 - DEBUG --- END 130: test the 0 edge
2016-08-07 20:38:27,484 - INFO --- END 130: Search the right edge to remove. Found: (139, 116)
2016-08-07 20:38:27,484 - INFO --- BEGIN 130: Remove an F3, F4 or F5
2016-08-07 20:38:27,484 - DEBUG --- vertex_to_join_near_v1_on_the_face: 140
2016-08-07 20:38:27,485 - DEBUG --- vertex_to_join_near_v2_on_the_face: 107
2016-08-07 20:38:27,485 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 102
2016-08-07 20:38:27,485 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 119
2016-08-07 20:38:27,485 - DEBUG --- third_face_to_update: [(98, 102), (102, 139), (139, 140), (140, 106), (106, 98)]
2016-08-07 20:38:27,486 - DEBUG --- fourth_face_to_update: [(70, 107), (107, 116), (116, 119), (119, 114), (114, 74), (74, 64), (64, 70)]
2016-08-07 20:38:27,486 - INFO --- ariadne_step: [4, 139, 116, 140, 107, 102, 119]
2016-08-07 20:38:27,486 - INFO --- END 130: Remove an F3, F4 or F5
2016-08-07 20:38:27,486 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,496 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,496 - INFO --- END 130: Main loop
2016-08-07 20:38:27,496 - INFO --- 
2016-08-07 20:38:27,497 - INFO --- BEGIN 131: Main loop
2016-08-07 20:38:27,497 - INFO --- BEGIN 131: Search the right edge to remove
2016-08-07 20:38:27,497 - DEBUG --- BEGIN 131: test the 0 edge
2016-08-07 20:38:27,497 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,498 - DEBUG --- edge_to_remove: (255, 249)
2016-08-07 20:38:27,498 - DEBUG --- rotated_edge_to_remove: (249, 255)
2016-08-07 20:38:27,498 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,498 - DEBUG --- f1: [(255, 249), (249, 243), (243, 244), (244, 255)]
2016-08-07 20:38:27,499 - DEBUG --- f2: [(249, 255), (255, 256), (256, 258), (258, 259), (259, 213), (213, 252), (252, 247), (247, 249)]
2016-08-07 20:38:27,499 - DEBUG --- edge_to_remove_on_f1: (255, 249)
2016-08-07 20:38:27,499 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,499 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:27,499 - DEBUG --- Temporary f1_plus_f2: [(255, 256), (256, 258), (258, 259), (259, 213), (213, 252), (252, 247), (247, 249), (249, 243), (243, 244), (244, 255)]
2016-08-07 20:38:27,500 - DEBUG --- f1_plus_f2: [(244, 256), (256, 258), (258, 259), (259, 213), (213, 252), (252, 247), (247, 243), (243, 244)]
2016-08-07 20:38:27,500 - DEBUG --- END: join_faces
2016-08-07 20:38:27,500 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,500 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,501 - DEBUG --- Edge to remove found :-) (255, 249)
2016-08-07 20:38:27,501 - DEBUG --- f1: [(255, 249), (249, 243), (243, 244), (244, 255)]
2016-08-07 20:38:27,501 - DEBUG --- f2: [(249, 255), (255, 256), (256, 258), (258, 259), (259, 213), (213, 252), (252, 247), (247, 249)]
2016-08-07 20:38:27,501 - DEBUG --- f1_plus_f2_temp: [(244, 256), (256, 258), (258, 259), (259, 213), (213, 252), (252, 247), (247, 243), (243, 244)]
2016-08-07 20:38:27,501 - DEBUG --- END 131: test the 0 edge
2016-08-07 20:38:27,502 - INFO --- END 131: Search the right edge to remove. Found: (255, 249)
2016-08-07 20:38:27,502 - INFO --- BEGIN 131: Remove an F3, F4 or F5
2016-08-07 20:38:27,502 - DEBUG --- vertex_to_join_near_v1_on_the_face: 244
2016-08-07 20:38:27,502 - DEBUG --- vertex_to_join_near_v2_on_the_face: 243
2016-08-07 20:38:27,502 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 256
2016-08-07 20:38:27,503 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 247
2016-08-07 20:38:27,503 - DEBUG --- third_face_to_update: [(255, 244), (244, 230), (230, 231), (231, 256), (256, 255)]
2016-08-07 20:38:27,503 - DEBUG --- fourth_face_to_update: [(249, 247), (247, 237), (237, 236), (236, 243), (243, 249)]
2016-08-07 20:38:27,503 - INFO --- ariadne_step: [4, 255, 249, 244, 243, 256, 247]
2016-08-07 20:38:27,504 - INFO --- END 131: Remove an F3, F4 or F5
2016-08-07 20:38:27,504 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,513 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,514 - INFO --- END 131: Main loop
2016-08-07 20:38:27,514 - INFO --- 
2016-08-07 20:38:27,514 - INFO --- BEGIN 132: Main loop
2016-08-07 20:38:27,515 - INFO --- BEGIN 132: Search the right edge to remove
2016-08-07 20:38:27,515 - DEBUG --- BEGIN 132: test the 0 edge
2016-08-07 20:38:27,515 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,515 - DEBUG --- edge_to_remove: (43, 30)
2016-08-07 20:38:27,515 - DEBUG --- rotated_edge_to_remove: (30, 43)
2016-08-07 20:38:27,516 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,516 - DEBUG --- f1: [(43, 30), (30, 31), (31, 40), (40, 43)]
2016-08-07 20:38:27,516 - DEBUG --- f2: [(30, 43), (43, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 217), (217, 29), (29, 30)]
2016-08-07 20:38:27,516 - DEBUG --- edge_to_remove_on_f1: (43, 30)
2016-08-07 20:38:27,516 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,517 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:27,517 - DEBUG --- Temporary f1_plus_f2: [(43, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 217), (217, 29), (29, 30), (30, 31), (31, 40), (40, 43)]
2016-08-07 20:38:27,517 - DEBUG --- f1_plus_f2: [(40, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 217), (217, 29), (29, 31), (31, 40)]
2016-08-07 20:38:27,517 - DEBUG --- END: join_faces
2016-08-07 20:38:27,518 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,518 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,518 - DEBUG --- Edge to remove found :-) (43, 30)
2016-08-07 20:38:27,518 - DEBUG --- f1: [(43, 30), (30, 31), (31, 40), (40, 43)]
2016-08-07 20:38:27,519 - DEBUG --- f2: [(30, 43), (43, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 217), (217, 29), (29, 30)]
2016-08-07 20:38:27,519 - DEBUG --- f1_plus_f2_temp: [(40, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 217), (217, 29), (29, 31), (31, 40)]
2016-08-07 20:38:27,519 - DEBUG --- END 132: test the 0 edge
2016-08-07 20:38:27,519 - INFO --- END 132: Search the right edge to remove. Found: (43, 30)
2016-08-07 20:38:27,519 - INFO --- BEGIN 132: Remove an F3, F4 or F5
2016-08-07 20:38:27,520 - DEBUG --- vertex_to_join_near_v1_on_the_face: 40
2016-08-07 20:38:27,520 - DEBUG --- vertex_to_join_near_v2_on_the_face: 31
2016-08-07 20:38:27,520 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 52
2016-08-07 20:38:27,520 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 29
2016-08-07 20:38:27,521 - DEBUG --- third_face_to_update: [(43, 40), (40, 54), (54, 55), (55, 51), (51, 50), (50, 47), (47, 56), (56, 52), (52, 43)]
2016-08-07 20:38:27,521 - DEBUG --- fourth_face_to_update: [(32, 31), (31, 30), (30, 29), (29, 381), (381, 380), (380, 27), (27, 32)]
2016-08-07 20:38:27,521 - INFO --- ariadne_step: [4, 43, 30, 40, 31, 52, 29]
2016-08-07 20:38:27,521 - INFO --- END 132: Remove an F3, F4 or F5
2016-08-07 20:38:27,521 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,530 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,531 - INFO --- END 132: Main loop
2016-08-07 20:38:27,531 - INFO --- 
2016-08-07 20:38:27,532 - INFO --- BEGIN 133: Main loop
2016-08-07 20:38:27,532 - INFO --- BEGIN 133: Search the right edge to remove
2016-08-07 20:38:27,532 - DEBUG --- BEGIN 133: test the 0 edge
2016-08-07 20:38:27,532 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,533 - DEBUG --- edge_to_remove: (320, 307)
2016-08-07 20:38:27,533 - DEBUG --- rotated_edge_to_remove: (307, 320)
2016-08-07 20:38:27,533 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,533 - DEBUG --- f1: [(320, 307), (307, 311), (311, 319), (319, 320)]
2016-08-07 20:38:27,534 - DEBUG --- f2: [(353, 351), (351, 267), (267, 306), (306, 275), (275, 282), (282, 307), (307, 320), (320, 353)]
2016-08-07 20:38:27,534 - DEBUG --- edge_to_remove_on_f1: (320, 307)
2016-08-07 20:38:27,534 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,534 - DEBUG --- index_of_edge_to_remove_on_f2: 6
2016-08-07 20:38:27,534 - DEBUG --- Temporary f1_plus_f2: [(320, 353), (353, 351), (351, 267), (267, 306), (306, 275), (275, 282), (282, 307), (307, 311), (311, 319), (319, 320)]
2016-08-07 20:38:27,535 - DEBUG --- f1_plus_f2: [(319, 353), (353, 351), (351, 267), (267, 306), (306, 275), (275, 282), (282, 311), (311, 319)]
2016-08-07 20:38:27,535 - DEBUG --- END: join_faces
2016-08-07 20:38:27,535 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,535 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,536 - DEBUG --- Edge to remove found :-) (320, 307)
2016-08-07 20:38:27,536 - DEBUG --- f1: [(320, 307), (307, 311), (311, 319), (319, 320)]
2016-08-07 20:38:27,536 - DEBUG --- f2: [(353, 351), (351, 267), (267, 306), (306, 275), (275, 282), (282, 307), (307, 320), (320, 353)]
2016-08-07 20:38:27,536 - DEBUG --- f1_plus_f2_temp: [(319, 353), (353, 351), (351, 267), (267, 306), (306, 275), (275, 282), (282, 311), (311, 319)]
2016-08-07 20:38:27,536 - DEBUG --- END 133: test the 0 edge
2016-08-07 20:38:27,537 - INFO --- END 133: Search the right edge to remove. Found: (320, 307)
2016-08-07 20:38:27,537 - INFO --- BEGIN 133: Remove an F3, F4 or F5
2016-08-07 20:38:27,537 - DEBUG --- vertex_to_join_near_v1_on_the_face: 319
2016-08-07 20:38:27,537 - DEBUG --- vertex_to_join_near_v2_on_the_face: 311
2016-08-07 20:38:27,537 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 353
2016-08-07 20:38:27,538 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 282
2016-08-07 20:38:27,538 - DEBUG --- third_face_to_update: [(320, 319), (319, 316), (316, 356), (356, 353), (353, 320)]
2016-08-07 20:38:27,538 - DEBUG --- fourth_face_to_update: [(274, 310), (310, 311), (311, 307), (307, 282), (282, 269), (269, 274)]
2016-08-07 20:38:27,538 - INFO --- ariadne_step: [4, 320, 307, 319, 311, 353, 282]
2016-08-07 20:38:27,538 - INFO --- END 133: Remove an F3, F4 or F5
2016-08-07 20:38:27,539 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,548 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,548 - INFO --- END 133: Main loop
2016-08-07 20:38:27,548 - INFO --- 
2016-08-07 20:38:27,549 - INFO --- BEGIN 134: Main loop
2016-08-07 20:38:27,549 - INFO --- BEGIN 134: Search the right edge to remove
2016-08-07 20:38:27,549 - DEBUG --- BEGIN 134: test the 0 edge
2016-08-07 20:38:27,549 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,550 - DEBUG --- edge_to_remove: (169, 128)
2016-08-07 20:38:27,550 - DEBUG --- rotated_edge_to_remove: (128, 169)
2016-08-07 20:38:27,550 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,551 - DEBUG --- f1: [(169, 128), (128, 159), (159, 160), (160, 169)]
2016-08-07 20:38:27,551 - DEBUG --- f2: [(169, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 128), (128, 169)]
2016-08-07 20:38:27,551 - DEBUG --- edge_to_remove_on_f1: (169, 128)
2016-08-07 20:38:27,551 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,551 - DEBUG --- index_of_edge_to_remove_on_f2: 6
2016-08-07 20:38:27,552 - DEBUG --- Temporary f1_plus_f2: [(169, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 128), (128, 159), (159, 160), (160, 169)]
2016-08-07 20:38:27,552 - DEBUG --- f1_plus_f2: [(160, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 159), (159, 160)]
2016-08-07 20:38:27,552 - DEBUG --- END: join_faces
2016-08-07 20:38:27,552 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,552 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,553 - DEBUG --- Edge to remove found :-) (169, 128)
2016-08-07 20:38:27,553 - DEBUG --- f1: [(169, 128), (128, 159), (159, 160), (160, 169)]
2016-08-07 20:38:27,553 - DEBUG --- f2: [(169, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 128), (128, 169)]
2016-08-07 20:38:27,553 - DEBUG --- f1_plus_f2_temp: [(160, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 159), (159, 160)]
2016-08-07 20:38:27,553 - DEBUG --- END 134: test the 0 edge
2016-08-07 20:38:27,554 - INFO --- END 134: Search the right edge to remove. Found: (169, 128)
2016-08-07 20:38:27,554 - INFO --- BEGIN 134: Remove an F3, F4 or F5
2016-08-07 20:38:27,554 - DEBUG --- vertex_to_join_near_v1_on_the_face: 160
2016-08-07 20:38:27,554 - DEBUG --- vertex_to_join_near_v2_on_the_face: 159
2016-08-07 20:38:27,554 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 136
2016-08-07 20:38:27,555 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 123
2016-08-07 20:38:27,555 - DEBUG --- third_face_to_update: [(136, 169), (169, 160), (160, 161), (161, 136)]
2016-08-07 20:38:27,555 - DEBUG --- fourth_face_to_update: [(125, 155), (155, 159), (159, 128), (128, 123), (123, 125)]
2016-08-07 20:38:27,555 - INFO --- ariadne_step: [4, 169, 128, 160, 159, 136, 123]
2016-08-07 20:38:27,555 - INFO --- END 134: Remove an F3, F4 or F5
2016-08-07 20:38:27,556 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,564 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,564 - INFO --- END 134: Main loop
2016-08-07 20:38:27,564 - INFO --- 
2016-08-07 20:38:27,565 - INFO --- BEGIN 135: Main loop
2016-08-07 20:38:27,565 - INFO --- BEGIN 135: Search the right edge to remove
2016-08-07 20:38:27,565 - DEBUG --- BEGIN 135: test the 0 edge
2016-08-07 20:38:27,565 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:27,565 - DEBUG --- edge_to_remove: (136, 160)
2016-08-07 20:38:27,566 - DEBUG --- rotated_edge_to_remove: (160, 136)
2016-08-07 20:38:27,566 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,566 - DEBUG --- f1: [(136, 160), (160, 161), (161, 136)]
2016-08-07 20:38:27,566 - DEBUG --- f2: [(160, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 159), (159, 160)]
2016-08-07 20:38:27,566 - DEBUG --- edge_to_remove_on_f1: (136, 160)
2016-08-07 20:38:27,567 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,567 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:27,567 - DEBUG --- Temporary f1_plus_f2: [(136, 137), (137, 138), (138, 126), (126, 123), (123, 159), (159, 160), (160, 161), (161, 136)]
2016-08-07 20:38:27,567 - DEBUG --- f1_plus_f2: [(161, 137), (137, 138), (138, 126), (126, 123), (123, 159), (159, 161)]
2016-08-07 20:38:27,568 - DEBUG --- END: join_faces
2016-08-07 20:38:27,568 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,568 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,568 - DEBUG --- Edge to remove found :-) (136, 160)
2016-08-07 20:38:27,568 - DEBUG --- f1: [(136, 160), (160, 161), (161, 136)]
2016-08-07 20:38:27,569 - DEBUG --- f2: [(160, 136), (136, 137), (137, 138), (138, 126), (126, 123), (123, 159), (159, 160)]
2016-08-07 20:38:27,569 - DEBUG --- f1_plus_f2_temp: [(161, 137), (137, 138), (138, 126), (126, 123), (123, 159), (159, 161)]
2016-08-07 20:38:27,569 - DEBUG --- END 135: test the 0 edge
2016-08-07 20:38:27,569 - INFO --- END 135: Search the right edge to remove. Found: (136, 160)
2016-08-07 20:38:27,569 - INFO --- BEGIN 135: Remove an F3, F4 or F5
2016-08-07 20:38:27,570 - DEBUG --- vertex_to_join_near_v1_on_the_face: 161
2016-08-07 20:38:27,570 - DEBUG --- vertex_to_join_near_v2_on_the_face: 161
2016-08-07 20:38:27,570 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 137
2016-08-07 20:38:27,570 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 159
2016-08-07 20:38:27,571 - DEBUG --- third_face_to_update: [(252, 213), (213, 137), (137, 136), (136, 161), (161, 162), (162, 242), (242, 252)]
2016-08-07 20:38:27,571 - DEBUG --- fourth_face_to_update: [(163, 165), (165, 166), (166, 162), (162, 161), (161, 160), (160, 159), (159, 155), (155, 156), (156, 163)]
2016-08-07 20:38:27,571 - INFO --- ariadne_step: [3, 136, 160, 161, 161, 137, 159]
2016-08-07 20:38:27,571 - INFO --- END 135: Remove an F3, F4 or F5
2016-08-07 20:38:27,571 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,580 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,580 - INFO --- END 135: Main loop
2016-08-07 20:38:27,581 - INFO --- 
2016-08-07 20:38:27,581 - INFO --- BEGIN 136: Main loop
2016-08-07 20:38:27,581 - INFO --- BEGIN 136: Search the right edge to remove
2016-08-07 20:38:27,581 - DEBUG --- BEGIN 136: test the 0 edge
2016-08-07 20:38:27,581 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,582 - DEBUG --- edge_to_remove: (291, 292)
2016-08-07 20:38:27,582 - DEBUG --- rotated_edge_to_remove: (292, 291)
2016-08-07 20:38:27,583 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,583 - DEBUG --- f1: [(291, 292), (292, 296), (296, 278), (278, 291)]
2016-08-07 20:38:27,583 - DEBUG --- f2: [(294, 293), (293, 292), (292, 291), (291, 289), (289, 294)]
2016-08-07 20:38:27,583 - DEBUG --- edge_to_remove_on_f1: (291, 292)
2016-08-07 20:38:27,583 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,584 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:27,584 - DEBUG --- Temporary f1_plus_f2: [(291, 289), (289, 294), (294, 293), (293, 292), (292, 296), (296, 278), (278, 291)]
2016-08-07 20:38:27,584 - DEBUG --- f1_plus_f2: [(278, 289), (289, 294), (294, 293), (293, 296), (296, 278)]
2016-08-07 20:38:27,584 - DEBUG --- END: join_faces
2016-08-07 20:38:27,584 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,585 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,585 - DEBUG --- Edge to remove found :-) (291, 292)
2016-08-07 20:38:27,585 - DEBUG --- f1: [(291, 292), (292, 296), (296, 278), (278, 291)]
2016-08-07 20:38:27,585 - DEBUG --- f2: [(294, 293), (293, 292), (292, 291), (291, 289), (289, 294)]
2016-08-07 20:38:27,586 - DEBUG --- f1_plus_f2_temp: [(278, 289), (289, 294), (294, 293), (293, 296), (296, 278)]
2016-08-07 20:38:27,586 - DEBUG --- END 136: test the 0 edge
2016-08-07 20:38:27,586 - INFO --- END 136: Search the right edge to remove. Found: (291, 292)
2016-08-07 20:38:27,586 - INFO --- BEGIN 136: Remove an F3, F4 or F5
2016-08-07 20:38:27,587 - DEBUG --- vertex_to_join_near_v1_on_the_face: 278
2016-08-07 20:38:27,587 - DEBUG --- vertex_to_join_near_v2_on_the_face: 296
2016-08-07 20:38:27,587 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 289
2016-08-07 20:38:27,587 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 293
2016-08-07 20:38:27,587 - DEBUG --- third_face_to_update: [(277, 289), (289, 291), (291, 278), (278, 277)]
2016-08-07 20:38:27,588 - DEBUG --- fourth_face_to_update: [(298, 296), (296, 292), (292, 293), (293, 305), (305, 298)]
2016-08-07 20:38:27,588 - INFO --- ariadne_step: [4, 291, 292, 278, 296, 289, 293]
2016-08-07 20:38:27,588 - INFO --- END 136: Remove an F3, F4 or F5
2016-08-07 20:38:27,588 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,596 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,597 - INFO --- END 136: Main loop
2016-08-07 20:38:27,597 - INFO --- 
2016-08-07 20:38:27,597 - INFO --- BEGIN 137: Main loop
2016-08-07 20:38:27,597 - INFO --- BEGIN 137: Search the right edge to remove
2016-08-07 20:38:27,598 - DEBUG --- BEGIN 137: test the 0 edge
2016-08-07 20:38:27,598 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:27,598 - DEBUG --- edge_to_remove: (277, 289)
2016-08-07 20:38:27,598 - DEBUG --- rotated_edge_to_remove: (289, 277)
2016-08-07 20:38:27,598 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,599 - DEBUG --- f1: [(277, 289), (289, 278), (278, 277)]
2016-08-07 20:38:27,599 - DEBUG --- f2: [(275, 306), (306, 294), (294, 289), (289, 277), (277, 275)]
2016-08-07 20:38:27,599 - DEBUG --- edge_to_remove_on_f1: (277, 289)
2016-08-07 20:38:27,599 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,600 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:27,600 - DEBUG --- Temporary f1_plus_f2: [(277, 275), (275, 306), (306, 294), (294, 289), (289, 278), (278, 277)]
2016-08-07 20:38:27,600 - DEBUG --- f1_plus_f2: [(278, 275), (275, 306), (306, 294), (294, 278)]
2016-08-07 20:38:27,600 - DEBUG --- END: join_faces
2016-08-07 20:38:27,601 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,601 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,601 - DEBUG --- Edge to remove found :-) (277, 289)
2016-08-07 20:38:27,601 - DEBUG --- f1: [(277, 289), (289, 278), (278, 277)]
2016-08-07 20:38:27,601 - DEBUG --- f2: [(275, 306), (306, 294), (294, 289), (289, 277), (277, 275)]
2016-08-07 20:38:27,602 - DEBUG --- f1_plus_f2_temp: [(278, 275), (275, 306), (306, 294), (294, 278)]
2016-08-07 20:38:27,602 - DEBUG --- END 137: test the 0 edge
2016-08-07 20:38:27,602 - INFO --- END 137: Search the right edge to remove. Found: (277, 289)
2016-08-07 20:38:27,602 - INFO --- BEGIN 137: Remove an F3, F4 or F5
2016-08-07 20:38:27,603 - DEBUG --- vertex_to_join_near_v1_on_the_face: 278
2016-08-07 20:38:27,603 - DEBUG --- vertex_to_join_near_v2_on_the_face: 278
2016-08-07 20:38:27,603 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 275
2016-08-07 20:38:27,603 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 294
2016-08-07 20:38:27,604 - DEBUG --- third_face_to_update: [(298, 35), (35, 269), (269, 282), (282, 275), (275, 277), (277, 278), (278, 296), (296, 298)]
2016-08-07 20:38:27,604 - DEBUG --- fourth_face_to_update: [(278, 289), (289, 294), (294, 293), (293, 296), (296, 278)]
2016-08-07 20:38:27,604 - INFO --- ariadne_step: [3, 277, 289, 278, 278, 275, 294]
2016-08-07 20:38:27,604 - INFO --- END 137: Remove an F3, F4 or F5
2016-08-07 20:38:27,604 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,614 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,614 - INFO --- END 137: Main loop
2016-08-07 20:38:27,614 - INFO --- 
2016-08-07 20:38:27,615 - INFO --- BEGIN 138: Main loop
2016-08-07 20:38:27,615 - INFO --- BEGIN 138: Search the right edge to remove
2016-08-07 20:38:27,615 - DEBUG --- BEGIN 138: test the 0 edge
2016-08-07 20:38:27,615 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,615 - DEBUG --- edge_to_remove: (17, 395)
2016-08-07 20:38:27,616 - DEBUG --- rotated_edge_to_remove: (395, 17)
2016-08-07 20:38:27,616 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,616 - DEBUG --- f1: [(17, 395), (395, 392), (392, 3), (3, 17)]
2016-08-07 20:38:27,616 - DEBUG --- f2: [(17, 27), (27, 380), (380, 379), (379, 395), (395, 17)]
2016-08-07 20:38:27,616 - DEBUG --- edge_to_remove_on_f1: (17, 395)
2016-08-07 20:38:27,617 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,617 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:27,617 - DEBUG --- Temporary f1_plus_f2: [(17, 27), (27, 380), (380, 379), (379, 395), (395, 392), (392, 3), (3, 17)]
2016-08-07 20:38:27,618 - DEBUG --- f1_plus_f2: [(3, 27), (27, 380), (380, 379), (379, 392), (392, 3)]
2016-08-07 20:38:27,618 - DEBUG --- END: join_faces
2016-08-07 20:38:27,618 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,618 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,619 - DEBUG --- Edge to remove found :-) (17, 395)
2016-08-07 20:38:27,619 - DEBUG --- f1: [(17, 395), (395, 392), (392, 3), (3, 17)]
2016-08-07 20:38:27,619 - DEBUG --- f2: [(17, 27), (27, 380), (380, 379), (379, 395), (395, 17)]
2016-08-07 20:38:27,619 - DEBUG --- f1_plus_f2_temp: [(3, 27), (27, 380), (380, 379), (379, 392), (392, 3)]
2016-08-07 20:38:27,620 - DEBUG --- END 138: test the 0 edge
2016-08-07 20:38:27,620 - INFO --- END 138: Search the right edge to remove. Found: (17, 395)
2016-08-07 20:38:27,620 - INFO --- BEGIN 138: Remove an F3, F4 or F5
2016-08-07 20:38:27,620 - DEBUG --- vertex_to_join_near_v1_on_the_face: 3
2016-08-07 20:38:27,621 - DEBUG --- vertex_to_join_near_v2_on_the_face: 392
2016-08-07 20:38:27,621 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 27
2016-08-07 20:38:27,621 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 379
2016-08-07 20:38:27,621 - DEBUG --- third_face_to_update: [(17, 3), (3, 5), (5, 32), (32, 27), (27, 17)]
2016-08-07 20:38:27,622 - DEBUG --- fourth_face_to_update: [(366, 368), (368, 391), (391, 392), (392, 395), (395, 379), (379, 366)]
2016-08-07 20:38:27,622 - INFO --- ariadne_step: [4, 17, 395, 3, 392, 27, 379]
2016-08-07 20:38:27,622 - INFO --- END 138: Remove an F3, F4 or F5
2016-08-07 20:38:27,623 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,629 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,630 - INFO --- END 138: Main loop
2016-08-07 20:38:27,630 - INFO --- 
2016-08-07 20:38:27,631 - INFO --- BEGIN 139: Main loop
2016-08-07 20:38:27,631 - INFO --- BEGIN 139: Search the right edge to remove
2016-08-07 20:38:27,631 - DEBUG --- BEGIN 139: test the 0 edge
2016-08-07 20:38:27,631 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,632 - DEBUG --- edge_to_remove: (68, 336)
2016-08-07 20:38:27,632 - DEBUG --- rotated_edge_to_remove: (336, 68)
2016-08-07 20:38:27,632 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,632 - DEBUG --- f1: [(68, 336), (336, 312), (312, 168), (168, 68)]
2016-08-07 20:38:27,632 - DEBUG --- f2: [(336, 68), (68, 79), (79, 340), (340, 342), (342, 336)]
2016-08-07 20:38:27,633 - DEBUG --- edge_to_remove_on_f1: (68, 336)
2016-08-07 20:38:27,633 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,633 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:27,633 - DEBUG --- Temporary f1_plus_f2: [(68, 79), (79, 340), (340, 342), (342, 336), (336, 312), (312, 168), (168, 68)]
2016-08-07 20:38:27,633 - DEBUG --- f1_plus_f2: [(168, 79), (79, 340), (340, 342), (342, 312), (312, 168)]
2016-08-07 20:38:27,634 - DEBUG --- END: join_faces
2016-08-07 20:38:27,634 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,634 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,634 - DEBUG --- Edge to remove found :-) (68, 336)
2016-08-07 20:38:27,634 - DEBUG --- f1: [(68, 336), (336, 312), (312, 168), (168, 68)]
2016-08-07 20:38:27,635 - DEBUG --- f2: [(336, 68), (68, 79), (79, 340), (340, 342), (342, 336)]
2016-08-07 20:38:27,635 - DEBUG --- f1_plus_f2_temp: [(168, 79), (79, 340), (340, 342), (342, 312), (312, 168)]
2016-08-07 20:38:27,635 - DEBUG --- END 139: test the 0 edge
2016-08-07 20:38:27,635 - INFO --- END 139: Search the right edge to remove. Found: (68, 336)
2016-08-07 20:38:27,636 - INFO --- BEGIN 139: Remove an F3, F4 or F5
2016-08-07 20:38:27,636 - DEBUG --- vertex_to_join_near_v1_on_the_face: 168
2016-08-07 20:38:27,636 - DEBUG --- vertex_to_join_near_v2_on_the_face: 312
2016-08-07 20:38:27,636 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 79
2016-08-07 20:38:27,636 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 342
2016-08-07 20:38:27,637 - DEBUG --- third_face_to_update: [(157, 352), (352, 341), (341, 124), (124, 79), (79, 68), (68, 168), (168, 157)]
2016-08-07 20:38:27,637 - DEBUG --- fourth_face_to_update: [(312, 336), (336, 342), (342, 365), (365, 381), (381, 29), (29, 217), (217, 215), (215, 97), (97, 50), (50, 51), (51, 312)]
2016-08-07 20:38:27,637 - INFO --- ariadne_step: [4, 68, 336, 168, 312, 79, 342]
2016-08-07 20:38:27,637 - INFO --- END 139: Remove an F3, F4 or F5
2016-08-07 20:38:27,638 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,645 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,646 - INFO --- END 139: Main loop
2016-08-07 20:38:27,646 - INFO --- 
2016-08-07 20:38:27,646 - INFO --- BEGIN 140: Main loop
2016-08-07 20:38:27,646 - INFO --- BEGIN 140: Search the right edge to remove
2016-08-07 20:38:27,647 - DEBUG --- BEGIN 140: test the 0 edge
2016-08-07 20:38:27,647 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,647 - DEBUG --- edge_to_remove: (98, 102)
2016-08-07 20:38:27,647 - DEBUG --- rotated_edge_to_remove: (102, 98)
2016-08-07 20:38:27,648 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,648 - DEBUG --- f1: [(98, 102), (102, 140), (140, 106), (106, 98)]
2016-08-07 20:38:27,648 - DEBUG --- f2: [(103, 102), (102, 98), (98, 99), (99, 92), (92, 103)]
2016-08-07 20:38:27,648 - DEBUG --- edge_to_remove_on_f1: (98, 102)
2016-08-07 20:38:27,648 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,649 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:27,649 - DEBUG --- Temporary f1_plus_f2: [(98, 99), (99, 92), (92, 103), (103, 102), (102, 140), (140, 106), (106, 98)]
2016-08-07 20:38:27,649 - DEBUG --- f1_plus_f2: [(106, 99), (99, 92), (92, 103), (103, 140), (140, 106)]
2016-08-07 20:38:27,649 - DEBUG --- END: join_faces
2016-08-07 20:38:27,650 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,650 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,650 - DEBUG --- Edge to remove found :-) (98, 102)
2016-08-07 20:38:27,650 - DEBUG --- f1: [(98, 102), (102, 140), (140, 106), (106, 98)]
2016-08-07 20:38:27,650 - DEBUG --- f2: [(103, 102), (102, 98), (98, 99), (99, 92), (92, 103)]
2016-08-07 20:38:27,651 - DEBUG --- f1_plus_f2_temp: [(106, 99), (99, 92), (92, 103), (103, 140), (140, 106)]
2016-08-07 20:38:27,651 - DEBUG --- END 140: test the 0 edge
2016-08-07 20:38:27,651 - INFO --- END 140: Search the right edge to remove. Found: (98, 102)
2016-08-07 20:38:27,651 - INFO --- BEGIN 140: Remove an F3, F4 or F5
2016-08-07 20:38:27,651 - DEBUG --- vertex_to_join_near_v1_on_the_face: 106
2016-08-07 20:38:27,652 - DEBUG --- vertex_to_join_near_v2_on_the_face: 140
2016-08-07 20:38:27,652 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 99
2016-08-07 20:38:27,652 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 103
2016-08-07 20:38:27,652 - DEBUG --- third_face_to_update: [(61, 60), (60, 99), (99, 98), (98, 106), (106, 61)]
2016-08-07 20:38:27,653 - DEBUG --- fourth_face_to_update: [(140, 102), (102, 103), (103, 150), (150, 119), (119, 107), (107, 140)]
2016-08-07 20:38:27,653 - INFO --- ariadne_step: [4, 98, 102, 106, 140, 99, 103]
2016-08-07 20:38:27,653 - INFO --- END 140: Remove an F3, F4 or F5
2016-08-07 20:38:27,653 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,660 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,661 - INFO --- END 140: Main loop
2016-08-07 20:38:27,661 - INFO --- 
2016-08-07 20:38:27,661 - INFO --- BEGIN 141: Main loop
2016-08-07 20:38:27,661 - INFO --- BEGIN 141: Search the right edge to remove
2016-08-07 20:38:27,662 - DEBUG --- BEGIN 141: test the 0 edge
2016-08-07 20:38:27,662 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,662 - DEBUG --- edge_to_remove: (243, 247)
2016-08-07 20:38:27,662 - DEBUG --- rotated_edge_to_remove: (247, 243)
2016-08-07 20:38:27,662 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,663 - DEBUG --- f1: [(243, 247), (247, 237), (237, 236), (236, 243)]
2016-08-07 20:38:27,663 - DEBUG --- f2: [(244, 256), (256, 258), (258, 259), (259, 213), (213, 252), (252, 247), (247, 243), (243, 244)]
2016-08-07 20:38:27,663 - DEBUG --- edge_to_remove_on_f1: (243, 247)
2016-08-07 20:38:27,663 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,663 - DEBUG --- index_of_edge_to_remove_on_f2: 6
2016-08-07 20:38:27,664 - DEBUG --- Temporary f1_plus_f2: [(243, 244), (244, 256), (256, 258), (258, 259), (259, 213), (213, 252), (252, 247), (247, 237), (237, 236), (236, 243)]
2016-08-07 20:38:27,664 - DEBUG --- f1_plus_f2: [(236, 244), (244, 256), (256, 258), (258, 259), (259, 213), (213, 252), (252, 237), (237, 236)]
2016-08-07 20:38:27,664 - DEBUG --- END: join_faces
2016-08-07 20:38:27,664 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,665 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,665 - DEBUG --- Edge to remove found :-) (243, 247)
2016-08-07 20:38:27,665 - DEBUG --- f1: [(243, 247), (247, 237), (237, 236), (236, 243)]
2016-08-07 20:38:27,665 - DEBUG --- f2: [(244, 256), (256, 258), (258, 259), (259, 213), (213, 252), (252, 247), (247, 243), (243, 244)]
2016-08-07 20:38:27,666 - DEBUG --- f1_plus_f2_temp: [(236, 244), (244, 256), (256, 258), (258, 259), (259, 213), (213, 252), (252, 237), (237, 236)]
2016-08-07 20:38:27,666 - DEBUG --- END 141: test the 0 edge
2016-08-07 20:38:27,666 - INFO --- END 141: Search the right edge to remove. Found: (243, 247)
2016-08-07 20:38:27,666 - INFO --- BEGIN 141: Remove an F3, F4 or F5
2016-08-07 20:38:27,666 - DEBUG --- vertex_to_join_near_v1_on_the_face: 236
2016-08-07 20:38:27,667 - DEBUG --- vertex_to_join_near_v2_on_the_face: 237
2016-08-07 20:38:27,667 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 244
2016-08-07 20:38:27,667 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 252
2016-08-07 20:38:27,667 - DEBUG --- third_face_to_update: [(230, 244), (244, 243), (243, 236), (236, 228), (228, 230)]
2016-08-07 20:38:27,668 - DEBUG --- fourth_face_to_update: [(237, 247), (247, 252), (252, 242), (242, 234), (234, 237)]
2016-08-07 20:38:27,668 - INFO --- ariadne_step: [4, 243, 247, 236, 237, 244, 252]
2016-08-07 20:38:27,668 - INFO --- END 141: Remove an F3, F4 or F5
2016-08-07 20:38:27,668 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,675 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,676 - INFO --- END 141: Main loop
2016-08-07 20:38:27,676 - INFO --- 
2016-08-07 20:38:27,677 - INFO --- BEGIN 142: Main loop
2016-08-07 20:38:27,677 - INFO --- BEGIN 142: Search the right edge to remove
2016-08-07 20:38:27,677 - DEBUG --- BEGIN 142: test the 0 edge
2016-08-07 20:38:27,677 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,677 - DEBUG --- edge_to_remove: (256, 244)
2016-08-07 20:38:27,678 - DEBUG --- rotated_edge_to_remove: (244, 256)
2016-08-07 20:38:27,678 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,678 - DEBUG --- f1: [(256, 244), (244, 230), (230, 231), (231, 256)]
2016-08-07 20:38:27,678 - DEBUG --- f2: [(236, 244), (244, 256), (256, 258), (258, 259), (259, 213), (213, 252), (252, 237), (237, 236)]
2016-08-07 20:38:27,679 - DEBUG --- edge_to_remove_on_f1: (256, 244)
2016-08-07 20:38:27,679 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,679 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:27,679 - DEBUG --- Temporary f1_plus_f2: [(256, 258), (258, 259), (259, 213), (213, 252), (252, 237), (237, 236), (236, 244), (244, 230), (230, 231), (231, 256)]
2016-08-07 20:38:27,680 - DEBUG --- f1_plus_f2: [(231, 258), (258, 259), (259, 213), (213, 252), (252, 237), (237, 236), (236, 230), (230, 231)]
2016-08-07 20:38:27,680 - DEBUG --- END: join_faces
2016-08-07 20:38:27,680 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,680 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,680 - DEBUG --- Edge to remove found :-) (256, 244)
2016-08-07 20:38:27,681 - DEBUG --- f1: [(256, 244), (244, 230), (230, 231), (231, 256)]
2016-08-07 20:38:27,681 - DEBUG --- f2: [(236, 244), (244, 256), (256, 258), (258, 259), (259, 213), (213, 252), (252, 237), (237, 236)]
2016-08-07 20:38:27,681 - DEBUG --- f1_plus_f2_temp: [(231, 258), (258, 259), (259, 213), (213, 252), (252, 237), (237, 236), (236, 230), (230, 231)]
2016-08-07 20:38:27,681 - DEBUG --- END 142: test the 0 edge
2016-08-07 20:38:27,681 - INFO --- END 142: Search the right edge to remove. Found: (256, 244)
2016-08-07 20:38:27,682 - INFO --- BEGIN 142: Remove an F3, F4 or F5
2016-08-07 20:38:27,682 - DEBUG --- vertex_to_join_near_v1_on_the_face: 231
2016-08-07 20:38:27,682 - DEBUG --- vertex_to_join_near_v2_on_the_face: 230
2016-08-07 20:38:27,682 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 258
2016-08-07 20:38:27,682 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 236
2016-08-07 20:38:27,683 - DEBUG --- third_face_to_update: [(56, 62), (62, 258), (258, 256), (256, 231), (231, 52), (52, 56)]
2016-08-07 20:38:27,683 - DEBUG --- fourth_face_to_update: [(230, 244), (244, 236), (236, 228), (228, 230)]
2016-08-07 20:38:27,683 - INFO --- ariadne_step: [4, 256, 244, 231, 230, 258, 236]
2016-08-07 20:38:27,683 - INFO --- END 142: Remove an F3, F4 or F5
2016-08-07 20:38:27,683 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,690 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,690 - INFO --- END 142: Main loop
2016-08-07 20:38:27,691 - INFO --- 
2016-08-07 20:38:27,691 - INFO --- BEGIN 143: Main loop
2016-08-07 20:38:27,691 - INFO --- BEGIN 143: Search the right edge to remove
2016-08-07 20:38:27,692 - DEBUG --- BEGIN 143: test the 0 edge
2016-08-07 20:38:27,692 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:27,692 - DEBUG --- edge_to_remove: (230, 236)
2016-08-07 20:38:27,692 - DEBUG --- rotated_edge_to_remove: (236, 230)
2016-08-07 20:38:27,693 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,693 - DEBUG --- f1: [(230, 236), (236, 228), (228, 230)]
2016-08-07 20:38:27,693 - DEBUG --- f2: [(231, 258), (258, 259), (259, 213), (213, 252), (252, 237), (237, 236), (236, 230), (230, 231)]
2016-08-07 20:38:27,693 - DEBUG --- edge_to_remove_on_f1: (230, 236)
2016-08-07 20:38:27,694 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,694 - DEBUG --- index_of_edge_to_remove_on_f2: 6
2016-08-07 20:38:27,694 - DEBUG --- Temporary f1_plus_f2: [(230, 231), (231, 258), (258, 259), (259, 213), (213, 252), (252, 237), (237, 236), (236, 228), (228, 230)]
2016-08-07 20:38:27,694 - DEBUG --- f1_plus_f2: [(228, 231), (231, 258), (258, 259), (259, 213), (213, 252), (252, 237), (237, 228)]
2016-08-07 20:38:27,694 - DEBUG --- END: join_faces
2016-08-07 20:38:27,695 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,695 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,695 - DEBUG --- Edge to remove found :-) (230, 236)
2016-08-07 20:38:27,695 - DEBUG --- f1: [(230, 236), (236, 228), (228, 230)]
2016-08-07 20:38:27,695 - DEBUG --- f2: [(231, 258), (258, 259), (259, 213), (213, 252), (252, 237), (237, 236), (236, 230), (230, 231)]
2016-08-07 20:38:27,696 - DEBUG --- f1_plus_f2_temp: [(228, 231), (231, 258), (258, 259), (259, 213), (213, 252), (252, 237), (237, 228)]
2016-08-07 20:38:27,696 - DEBUG --- END 143: test the 0 edge
2016-08-07 20:38:27,696 - INFO --- END 143: Search the right edge to remove. Found: (230, 236)
2016-08-07 20:38:27,696 - INFO --- BEGIN 143: Remove an F3, F4 or F5
2016-08-07 20:38:27,697 - DEBUG --- vertex_to_join_near_v1_on_the_face: 228
2016-08-07 20:38:27,697 - DEBUG --- vertex_to_join_near_v2_on_the_face: 228
2016-08-07 20:38:27,697 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 231
2016-08-07 20:38:27,697 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 237
2016-08-07 20:38:27,698 - DEBUG --- third_face_to_update: [(40, 52), (52, 231), (231, 230), (230, 228), (228, 229), (229, 225), (225, 217), (217, 29), (29, 31), (31, 40)]
2016-08-07 20:38:27,698 - DEBUG --- fourth_face_to_update: [(233, 229), (229, 228), (228, 236), (236, 237), (237, 234), (234, 233)]
2016-08-07 20:38:27,698 - INFO --- ariadne_step: [3, 230, 236, 228, 228, 231, 237]
2016-08-07 20:38:27,698 - INFO --- END 143: Remove an F3, F4 or F5
2016-08-07 20:38:27,698 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,704 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,705 - INFO --- END 143: Main loop
2016-08-07 20:38:27,705 - INFO --- 
2016-08-07 20:38:27,705 - INFO --- BEGIN 144: Main loop
2016-08-07 20:38:27,706 - INFO --- BEGIN 144: Search the right edge to remove
2016-08-07 20:38:27,706 - DEBUG --- BEGIN 144: test the 0 edge
2016-08-07 20:38:27,706 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,706 - DEBUG --- edge_to_remove: (353, 319)
2016-08-07 20:38:27,706 - DEBUG --- rotated_edge_to_remove: (319, 353)
2016-08-07 20:38:27,707 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,707 - DEBUG --- f1: [(353, 319), (319, 316), (316, 356), (356, 353)]
2016-08-07 20:38:27,707 - DEBUG --- f2: [(319, 353), (353, 351), (351, 267), (267, 306), (306, 275), (275, 282), (282, 311), (311, 319)]
2016-08-07 20:38:27,707 - DEBUG --- edge_to_remove_on_f1: (353, 319)
2016-08-07 20:38:27,707 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,708 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:27,708 - DEBUG --- Temporary f1_plus_f2: [(353, 351), (351, 267), (267, 306), (306, 275), (275, 282), (282, 311), (311, 319), (319, 316), (316, 356), (356, 353)]
2016-08-07 20:38:27,708 - DEBUG --- f1_plus_f2: [(356, 351), (351, 267), (267, 306), (306, 275), (275, 282), (282, 311), (311, 316), (316, 356)]
2016-08-07 20:38:27,708 - DEBUG --- END: join_faces
2016-08-07 20:38:27,709 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,709 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,709 - DEBUG --- Edge to remove found :-) (353, 319)
2016-08-07 20:38:27,709 - DEBUG --- f1: [(353, 319), (319, 316), (316, 356), (356, 353)]
2016-08-07 20:38:27,710 - DEBUG --- f2: [(319, 353), (353, 351), (351, 267), (267, 306), (306, 275), (275, 282), (282, 311), (311, 319)]
2016-08-07 20:38:27,710 - DEBUG --- f1_plus_f2_temp: [(356, 351), (351, 267), (267, 306), (306, 275), (275, 282), (282, 311), (311, 316), (316, 356)]
2016-08-07 20:38:27,710 - DEBUG --- END 144: test the 0 edge
2016-08-07 20:38:27,710 - INFO --- END 144: Search the right edge to remove. Found: (353, 319)
2016-08-07 20:38:27,710 - INFO --- BEGIN 144: Remove an F3, F4 or F5
2016-08-07 20:38:27,711 - DEBUG --- vertex_to_join_near_v1_on_the_face: 356
2016-08-07 20:38:27,711 - DEBUG --- vertex_to_join_near_v2_on_the_face: 316
2016-08-07 20:38:27,711 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 351
2016-08-07 20:38:27,711 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 311
2016-08-07 20:38:27,712 - DEBUG --- third_face_to_update: [(79, 124), (124, 351), (351, 353), (353, 356), (356, 349), (349, 348), (348, 340), (340, 79)]
2016-08-07 20:38:27,712 - DEBUG --- fourth_face_to_update: [(319, 311), (311, 310), (310, 317), (317, 316), (316, 319)]
2016-08-07 20:38:27,712 - INFO --- ariadne_step: [4, 353, 319, 356, 316, 351, 311]
2016-08-07 20:38:27,712 - INFO --- END 144: Remove an F3, F4 or F5
2016-08-07 20:38:27,712 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,718 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,718 - INFO --- END 144: Main loop
2016-08-07 20:38:27,719 - INFO --- 
2016-08-07 20:38:27,719 - INFO --- BEGIN 145: Main loop
2016-08-07 20:38:27,719 - INFO --- BEGIN 145: Search the right edge to remove
2016-08-07 20:38:27,719 - DEBUG --- BEGIN 145: test the 0 edge
2016-08-07 20:38:27,719 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,720 - DEBUG --- edge_to_remove: (125, 155)
2016-08-07 20:38:27,720 - DEBUG --- rotated_edge_to_remove: (155, 125)
2016-08-07 20:38:27,720 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,720 - DEBUG --- f1: [(125, 155), (155, 159), (159, 123), (123, 125)]
2016-08-07 20:38:27,721 - DEBUG --- f2: [(119, 150), (150, 156), (156, 155), (155, 125), (125, 114), (114, 119)]
2016-08-07 20:38:27,721 - DEBUG --- edge_to_remove_on_f1: (125, 155)
2016-08-07 20:38:27,721 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,721 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:27,722 - DEBUG --- Temporary f1_plus_f2: [(125, 114), (114, 119), (119, 150), (150, 156), (156, 155), (155, 159), (159, 123), (123, 125)]
2016-08-07 20:38:27,722 - DEBUG --- f1_plus_f2: [(123, 114), (114, 119), (119, 150), (150, 156), (156, 159), (159, 123)]
2016-08-07 20:38:27,722 - DEBUG --- END: join_faces
2016-08-07 20:38:27,722 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,722 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,723 - DEBUG --- Edge to remove found :-) (125, 155)
2016-08-07 20:38:27,723 - DEBUG --- f1: [(125, 155), (155, 159), (159, 123), (123, 125)]
2016-08-07 20:38:27,723 - DEBUG --- f2: [(119, 150), (150, 156), (156, 155), (155, 125), (125, 114), (114, 119)]
2016-08-07 20:38:27,723 - DEBUG --- f1_plus_f2_temp: [(123, 114), (114, 119), (119, 150), (150, 156), (156, 159), (159, 123)]
2016-08-07 20:38:27,724 - DEBUG --- END 145: test the 0 edge
2016-08-07 20:38:27,724 - INFO --- END 145: Search the right edge to remove. Found: (125, 155)
2016-08-07 20:38:27,724 - INFO --- BEGIN 145: Remove an F3, F4 or F5
2016-08-07 20:38:27,724 - DEBUG --- vertex_to_join_near_v1_on_the_face: 123
2016-08-07 20:38:27,724 - DEBUG --- vertex_to_join_near_v2_on_the_face: 159
2016-08-07 20:38:27,725 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 114
2016-08-07 20:38:27,725 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 156
2016-08-07 20:38:27,725 - DEBUG --- third_face_to_update: [(74, 114), (114, 125), (125, 123), (123, 126), (126, 74)]
2016-08-07 20:38:27,725 - DEBUG --- fourth_face_to_update: [(163, 165), (165, 166), (166, 162), (162, 161), (161, 159), (159, 155), (155, 156), (156, 163)]
2016-08-07 20:38:27,726 - INFO --- ariadne_step: [4, 125, 155, 123, 159, 114, 156]
2016-08-07 20:38:27,726 - INFO --- END 145: Remove an F3, F4 or F5
2016-08-07 20:38:27,726 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,732 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,732 - INFO --- END 145: Main loop
2016-08-07 20:38:27,732 - INFO --- 
2016-08-07 20:38:27,733 - INFO --- BEGIN 146: Main loop
2016-08-07 20:38:27,733 - INFO --- BEGIN 146: Search the right edge to remove
2016-08-07 20:38:27,733 - DEBUG --- BEGIN 146: test the 0 edge
2016-08-07 20:38:27,733 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,733 - DEBUG --- edge_to_remove: (298, 296)
2016-08-07 20:38:27,734 - DEBUG --- rotated_edge_to_remove: (296, 298)
2016-08-07 20:38:27,734 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,734 - DEBUG --- f1: [(298, 296), (296, 293), (293, 305), (305, 298)]
2016-08-07 20:38:27,734 - DEBUG --- f2: [(298, 35), (35, 269), (269, 282), (282, 275), (275, 278), (278, 296), (296, 298)]
2016-08-07 20:38:27,735 - DEBUG --- edge_to_remove_on_f1: (298, 296)
2016-08-07 20:38:27,735 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,735 - DEBUG --- index_of_edge_to_remove_on_f2: 6
2016-08-07 20:38:27,735 - DEBUG --- Temporary f1_plus_f2: [(298, 35), (35, 269), (269, 282), (282, 275), (275, 278), (278, 296), (296, 293), (293, 305), (305, 298)]
2016-08-07 20:38:27,735 - DEBUG --- f1_plus_f2: [(305, 35), (35, 269), (269, 282), (282, 275), (275, 278), (278, 293), (293, 305)]
2016-08-07 20:38:27,736 - DEBUG --- END: join_faces
2016-08-07 20:38:27,736 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,736 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,736 - DEBUG --- Edge to remove found :-) (298, 296)
2016-08-07 20:38:27,736 - DEBUG --- f1: [(298, 296), (296, 293), (293, 305), (305, 298)]
2016-08-07 20:38:27,737 - DEBUG --- f2: [(298, 35), (35, 269), (269, 282), (282, 275), (275, 278), (278, 296), (296, 298)]
2016-08-07 20:38:27,737 - DEBUG --- f1_plus_f2_temp: [(305, 35), (35, 269), (269, 282), (282, 275), (275, 278), (278, 293), (293, 305)]
2016-08-07 20:38:27,737 - DEBUG --- END 146: test the 0 edge
2016-08-07 20:38:27,737 - INFO --- END 146: Search the right edge to remove. Found: (298, 296)
2016-08-07 20:38:27,737 - INFO --- BEGIN 146: Remove an F3, F4 or F5
2016-08-07 20:38:27,738 - DEBUG --- vertex_to_join_near_v1_on_the_face: 305
2016-08-07 20:38:27,738 - DEBUG --- vertex_to_join_near_v2_on_the_face: 293
2016-08-07 20:38:27,738 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 35
2016-08-07 20:38:27,738 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 278
2016-08-07 20:38:27,738 - DEBUG --- third_face_to_update: [(35, 298), (298, 305), (305, 266), (266, 363), (363, 35)]
2016-08-07 20:38:27,739 - DEBUG --- fourth_face_to_update: [(278, 294), (294, 293), (293, 296), (296, 278)]
2016-08-07 20:38:27,739 - INFO --- ariadne_step: [4, 298, 296, 305, 293, 35, 278]
2016-08-07 20:38:27,739 - INFO --- END 146: Remove an F3, F4 or F5
2016-08-07 20:38:27,739 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,745 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,745 - INFO --- END 146: Main loop
2016-08-07 20:38:27,746 - INFO --- 
2016-08-07 20:38:27,746 - INFO --- BEGIN 147: Main loop
2016-08-07 20:38:27,746 - INFO --- BEGIN 147: Search the right edge to remove
2016-08-07 20:38:27,747 - DEBUG --- BEGIN 147: test the 0 edge
2016-08-07 20:38:27,747 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:27,747 - DEBUG --- edge_to_remove: (278, 294)
2016-08-07 20:38:27,747 - DEBUG --- rotated_edge_to_remove: (294, 278)
2016-08-07 20:38:27,747 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,748 - DEBUG --- f1: [(278, 294), (294, 293), (293, 278)]
2016-08-07 20:38:27,748 - DEBUG --- f2: [(278, 275), (275, 306), (306, 294), (294, 278)]
2016-08-07 20:38:27,748 - DEBUG --- edge_to_remove_on_f1: (278, 294)
2016-08-07 20:38:27,748 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,748 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:27,749 - DEBUG --- Temporary f1_plus_f2: [(278, 275), (275, 306), (306, 294), (294, 293), (293, 278)]
2016-08-07 20:38:27,749 - DEBUG --- f1_plus_f2: [(293, 275), (275, 306), (306, 293)]
2016-08-07 20:38:27,749 - DEBUG --- END: join_faces
2016-08-07 20:38:27,749 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,749 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,750 - DEBUG --- Edge to remove found :-) (278, 294)
2016-08-07 20:38:27,750 - DEBUG --- f1: [(278, 294), (294, 293), (293, 278)]
2016-08-07 20:38:27,750 - DEBUG --- f2: [(278, 275), (275, 306), (306, 294), (294, 278)]
2016-08-07 20:38:27,750 - DEBUG --- f1_plus_f2_temp: [(293, 275), (275, 306), (306, 293)]
2016-08-07 20:38:27,750 - DEBUG --- END 147: test the 0 edge
2016-08-07 20:38:27,751 - INFO --- END 147: Search the right edge to remove. Found: (278, 294)
2016-08-07 20:38:27,751 - INFO --- BEGIN 147: Remove an F3, F4 or F5
2016-08-07 20:38:27,751 - DEBUG --- vertex_to_join_near_v1_on_the_face: 293
2016-08-07 20:38:27,751 - DEBUG --- vertex_to_join_near_v2_on_the_face: 293
2016-08-07 20:38:27,751 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 275
2016-08-07 20:38:27,752 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 306
2016-08-07 20:38:27,752 - DEBUG --- third_face_to_update: [(305, 35), (35, 269), (269, 282), (282, 275), (275, 278), (278, 293), (293, 305)]
2016-08-07 20:38:27,752 - DEBUG --- fourth_face_to_update: [(294, 306), (306, 267), (267, 266), (266, 305), (305, 293), (293, 294)]
2016-08-07 20:38:27,752 - INFO --- ariadne_step: [3, 278, 294, 293, 293, 275, 306]
2016-08-07 20:38:27,753 - INFO --- END 147: Remove an F3, F4 or F5
2016-08-07 20:38:27,753 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,758 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,758 - INFO --- END 147: Main loop
2016-08-07 20:38:27,758 - INFO --- 
2016-08-07 20:38:27,759 - INFO --- BEGIN 148: Main loop
2016-08-07 20:38:27,759 - INFO --- BEGIN 148: Search the right edge to remove
2016-08-07 20:38:27,759 - DEBUG --- BEGIN 148: test the 0 edge
2016-08-07 20:38:27,759 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:27,759 - DEBUG --- edge_to_remove: (293, 275)
2016-08-07 20:38:27,760 - DEBUG --- rotated_edge_to_remove: (275, 293)
2016-08-07 20:38:27,760 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,760 - DEBUG --- f1: [(293, 275), (275, 306), (306, 293)]
2016-08-07 20:38:27,760 - DEBUG --- f2: [(305, 35), (35, 269), (269, 282), (282, 275), (275, 293), (293, 305)]
2016-08-07 20:38:27,761 - DEBUG --- edge_to_remove_on_f1: (293, 275)
2016-08-07 20:38:27,761 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,761 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:27,761 - DEBUG --- Temporary f1_plus_f2: [(293, 305), (305, 35), (35, 269), (269, 282), (282, 275), (275, 306), (306, 293)]
2016-08-07 20:38:27,761 - DEBUG --- f1_plus_f2: [(306, 305), (305, 35), (35, 269), (269, 282), (282, 306)]
2016-08-07 20:38:27,762 - DEBUG --- END: join_faces
2016-08-07 20:38:27,762 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,762 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,762 - DEBUG --- Edge to remove found :-) (293, 275)
2016-08-07 20:38:27,762 - DEBUG --- f1: [(293, 275), (275, 306), (306, 293)]
2016-08-07 20:38:27,763 - DEBUG --- f2: [(305, 35), (35, 269), (269, 282), (282, 275), (275, 293), (293, 305)]
2016-08-07 20:38:27,763 - DEBUG --- f1_plus_f2_temp: [(306, 305), (305, 35), (35, 269), (269, 282), (282, 306)]
2016-08-07 20:38:27,763 - DEBUG --- END 148: test the 0 edge
2016-08-07 20:38:27,763 - INFO --- END 148: Search the right edge to remove. Found: (293, 275)
2016-08-07 20:38:27,763 - INFO --- BEGIN 148: Remove an F3, F4 or F5
2016-08-07 20:38:27,764 - DEBUG --- vertex_to_join_near_v1_on_the_face: 306
2016-08-07 20:38:27,764 - DEBUG --- vertex_to_join_near_v2_on_the_face: 306
2016-08-07 20:38:27,764 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 305
2016-08-07 20:38:27,764 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 282
2016-08-07 20:38:27,765 - DEBUG --- third_face_to_update: [(293, 306), (306, 267), (267, 266), (266, 305), (305, 293)]
2016-08-07 20:38:27,765 - DEBUG --- fourth_face_to_update: [(356, 351), (351, 267), (267, 306), (306, 275), (275, 282), (282, 311), (311, 316), (316, 356)]
2016-08-07 20:38:27,765 - INFO --- ariadne_step: [3, 293, 275, 306, 306, 305, 282]
2016-08-07 20:38:27,765 - INFO --- END 148: Remove an F3, F4 or F5
2016-08-07 20:38:27,765 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,770 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,771 - INFO --- END 148: Main loop
2016-08-07 20:38:27,771 - INFO --- 
2016-08-07 20:38:27,771 - INFO --- BEGIN 149: Main loop
2016-08-07 20:38:27,771 - INFO --- BEGIN 149: Search the right edge to remove
2016-08-07 20:38:27,771 - DEBUG --- BEGIN 149: test the 0 edge
2016-08-07 20:38:27,772 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,772 - DEBUG --- edge_to_remove: (27, 3)
2016-08-07 20:38:27,772 - DEBUG --- rotated_edge_to_remove: (3, 27)
2016-08-07 20:38:27,772 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,772 - DEBUG --- f1: [(27, 3), (3, 5), (5, 32), (32, 27)]
2016-08-07 20:38:27,773 - DEBUG --- f2: [(3, 27), (27, 380), (380, 379), (379, 392), (392, 3)]
2016-08-07 20:38:27,773 - DEBUG --- edge_to_remove_on_f1: (27, 3)
2016-08-07 20:38:27,773 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,773 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:27,774 - DEBUG --- Temporary f1_plus_f2: [(27, 380), (380, 379), (379, 392), (392, 3), (3, 5), (5, 32), (32, 27)]
2016-08-07 20:38:27,774 - DEBUG --- f1_plus_f2: [(32, 380), (380, 379), (379, 392), (392, 5), (5, 32)]
2016-08-07 20:38:27,774 - DEBUG --- END: join_faces
2016-08-07 20:38:27,774 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,775 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,775 - DEBUG --- Edge to remove found :-) (27, 3)
2016-08-07 20:38:27,775 - DEBUG --- f1: [(27, 3), (3, 5), (5, 32), (32, 27)]
2016-08-07 20:38:27,775 - DEBUG --- f2: [(3, 27), (27, 380), (380, 379), (379, 392), (392, 3)]
2016-08-07 20:38:27,775 - DEBUG --- f1_plus_f2_temp: [(32, 380), (380, 379), (379, 392), (392, 5), (5, 32)]
2016-08-07 20:38:27,776 - DEBUG --- END 149: test the 0 edge
2016-08-07 20:38:27,776 - INFO --- END 149: Search the right edge to remove. Found: (27, 3)
2016-08-07 20:38:27,776 - INFO --- BEGIN 149: Remove an F3, F4 or F5
2016-08-07 20:38:27,776 - DEBUG --- vertex_to_join_near_v1_on_the_face: 32
2016-08-07 20:38:27,776 - DEBUG --- vertex_to_join_near_v2_on_the_face: 5
2016-08-07 20:38:27,777 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 380
2016-08-07 20:38:27,777 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 392
2016-08-07 20:38:27,777 - DEBUG --- third_face_to_update: [(32, 31), (31, 29), (29, 381), (381, 380), (380, 27), (27, 32)]
2016-08-07 20:38:27,777 - DEBUG --- fourth_face_to_update: [(4, 5), (5, 3), (3, 392), (392, 391), (391, 4)]
2016-08-07 20:38:27,778 - INFO --- ariadne_step: [4, 27, 3, 32, 5, 380, 392]
2016-08-07 20:38:27,778 - INFO --- END 149: Remove an F3, F4 or F5
2016-08-07 20:38:27,778 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,783 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,783 - INFO --- END 149: Main loop
2016-08-07 20:38:27,783 - INFO --- 
2016-08-07 20:38:27,783 - INFO --- BEGIN 150: Main loop
2016-08-07 20:38:27,784 - INFO --- BEGIN 150: Search the right edge to remove
2016-08-07 20:38:27,784 - DEBUG --- BEGIN 150: test the 0 edge
2016-08-07 20:38:27,784 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,784 - DEBUG --- edge_to_remove: (61, 60)
2016-08-07 20:38:27,784 - DEBUG --- rotated_edge_to_remove: (60, 61)
2016-08-07 20:38:27,785 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,785 - DEBUG --- f1: [(61, 60), (60, 99), (99, 106), (106, 61)]
2016-08-07 20:38:27,785 - DEBUG --- f2: [(56, 47), (47, 60), (60, 61), (61, 59), (59, 63), (63, 62), (62, 56)]
2016-08-07 20:38:27,785 - DEBUG --- edge_to_remove_on_f1: (61, 60)
2016-08-07 20:38:27,785 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,786 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:27,786 - DEBUG --- Temporary f1_plus_f2: [(61, 59), (59, 63), (63, 62), (62, 56), (56, 47), (47, 60), (60, 99), (99, 106), (106, 61)]
2016-08-07 20:38:27,786 - DEBUG --- f1_plus_f2: [(106, 59), (59, 63), (63, 62), (62, 56), (56, 47), (47, 99), (99, 106)]
2016-08-07 20:38:27,786 - DEBUG --- END: join_faces
2016-08-07 20:38:27,787 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,787 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,787 - DEBUG --- Edge to remove found :-) (61, 60)
2016-08-07 20:38:27,787 - DEBUG --- f1: [(61, 60), (60, 99), (99, 106), (106, 61)]
2016-08-07 20:38:27,787 - DEBUG --- f2: [(56, 47), (47, 60), (60, 61), (61, 59), (59, 63), (63, 62), (62, 56)]
2016-08-07 20:38:27,788 - DEBUG --- f1_plus_f2_temp: [(106, 59), (59, 63), (63, 62), (62, 56), (56, 47), (47, 99), (99, 106)]
2016-08-07 20:38:27,788 - DEBUG --- END 150: test the 0 edge
2016-08-07 20:38:27,788 - INFO --- END 150: Search the right edge to remove. Found: (61, 60)
2016-08-07 20:38:27,788 - INFO --- BEGIN 150: Remove an F3, F4 or F5
2016-08-07 20:38:27,788 - DEBUG --- vertex_to_join_near_v1_on_the_face: 106
2016-08-07 20:38:27,789 - DEBUG --- vertex_to_join_near_v2_on_the_face: 99
2016-08-07 20:38:27,789 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 59
2016-08-07 20:38:27,789 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 47
2016-08-07 20:38:27,789 - DEBUG --- third_face_to_update: [(140, 107), (107, 70), (70, 59), (59, 61), (61, 106), (106, 140)]
2016-08-07 20:38:27,790 - DEBUG --- fourth_face_to_update: [(99, 60), (60, 47), (47, 50), (50, 97), (97, 92), (92, 99)]
2016-08-07 20:38:27,790 - INFO --- ariadne_step: [4, 61, 60, 106, 99, 59, 47]
2016-08-07 20:38:27,790 - INFO --- END 150: Remove an F3, F4 or F5
2016-08-07 20:38:27,790 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,794 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,795 - INFO --- END 150: Main loop
2016-08-07 20:38:27,795 - INFO --- 
2016-08-07 20:38:27,796 - INFO --- BEGIN 151: Main loop
2016-08-07 20:38:27,796 - INFO --- BEGIN 151: Search the right edge to remove
2016-08-07 20:38:27,796 - DEBUG --- BEGIN 151: test the 0 edge
2016-08-07 20:38:27,796 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,796 - DEBUG --- edge_to_remove: (237, 252)
2016-08-07 20:38:27,797 - DEBUG --- rotated_edge_to_remove: (252, 237)
2016-08-07 20:38:27,797 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,797 - DEBUG --- f1: [(237, 252), (252, 242), (242, 234), (234, 237)]
2016-08-07 20:38:27,797 - DEBUG --- f2: [(228, 231), (231, 258), (258, 259), (259, 213), (213, 252), (252, 237), (237, 228)]
2016-08-07 20:38:27,798 - DEBUG --- edge_to_remove_on_f1: (237, 252)
2016-08-07 20:38:27,798 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,798 - DEBUG --- index_of_edge_to_remove_on_f2: 5
2016-08-07 20:38:27,798 - DEBUG --- Temporary f1_plus_f2: [(237, 228), (228, 231), (231, 258), (258, 259), (259, 213), (213, 252), (252, 242), (242, 234), (234, 237)]
2016-08-07 20:38:27,798 - DEBUG --- f1_plus_f2: [(234, 228), (228, 231), (231, 258), (258, 259), (259, 213), (213, 242), (242, 234)]
2016-08-07 20:38:27,798 - DEBUG --- END: join_faces
2016-08-07 20:38:27,799 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,799 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,799 - DEBUG --- Edge to remove found :-) (237, 252)
2016-08-07 20:38:27,799 - DEBUG --- f1: [(237, 252), (252, 242), (242, 234), (234, 237)]
2016-08-07 20:38:27,800 - DEBUG --- f2: [(228, 231), (231, 258), (258, 259), (259, 213), (213, 252), (252, 237), (237, 228)]
2016-08-07 20:38:27,800 - DEBUG --- f1_plus_f2_temp: [(234, 228), (228, 231), (231, 258), (258, 259), (259, 213), (213, 242), (242, 234)]
2016-08-07 20:38:27,800 - DEBUG --- END 151: test the 0 edge
2016-08-07 20:38:27,800 - INFO --- END 151: Search the right edge to remove. Found: (237, 252)
2016-08-07 20:38:27,800 - INFO --- BEGIN 151: Remove an F3, F4 or F5
2016-08-07 20:38:27,800 - DEBUG --- vertex_to_join_near_v1_on_the_face: 234
2016-08-07 20:38:27,801 - DEBUG --- vertex_to_join_near_v2_on_the_face: 242
2016-08-07 20:38:27,801 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 228
2016-08-07 20:38:27,801 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 213
2016-08-07 20:38:27,801 - DEBUG --- third_face_to_update: [(233, 229), (229, 228), (228, 237), (237, 234), (234, 233)]
2016-08-07 20:38:27,801 - DEBUG --- fourth_face_to_update: [(252, 213), (213, 137), (137, 161), (161, 162), (162, 242), (242, 252)]
2016-08-07 20:38:27,802 - INFO --- ariadne_step: [4, 237, 252, 234, 242, 228, 213]
2016-08-07 20:38:27,802 - INFO --- END 151: Remove an F3, F4 or F5
2016-08-07 20:38:27,802 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,806 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,807 - INFO --- END 151: Main loop
2016-08-07 20:38:27,807 - INFO --- 
2016-08-07 20:38:27,807 - INFO --- BEGIN 152: Main loop
2016-08-07 20:38:27,807 - INFO --- BEGIN 152: Search the right edge to remove
2016-08-07 20:38:27,808 - DEBUG --- BEGIN 152: test the 0 edge
2016-08-07 20:38:27,808 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,808 - DEBUG --- edge_to_remove: (316, 311)
2016-08-07 20:38:27,808 - DEBUG --- rotated_edge_to_remove: (311, 316)
2016-08-07 20:38:27,809 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,809 - DEBUG --- f1: [(316, 311), (311, 310), (310, 317), (317, 316)]
2016-08-07 20:38:27,809 - DEBUG --- f2: [(356, 351), (351, 267), (267, 306), (306, 282), (282, 311), (311, 316), (316, 356)]
2016-08-07 20:38:27,809 - DEBUG --- edge_to_remove_on_f1: (316, 311)
2016-08-07 20:38:27,809 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,810 - DEBUG --- index_of_edge_to_remove_on_f2: 5
2016-08-07 20:38:27,810 - DEBUG --- Temporary f1_plus_f2: [(316, 356), (356, 351), (351, 267), (267, 306), (306, 282), (282, 311), (311, 310), (310, 317), (317, 316)]
2016-08-07 20:38:27,810 - DEBUG --- f1_plus_f2: [(317, 356), (356, 351), (351, 267), (267, 306), (306, 282), (282, 310), (310, 317)]
2016-08-07 20:38:27,810 - DEBUG --- END: join_faces
2016-08-07 20:38:27,810 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,811 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,811 - DEBUG --- Edge to remove found :-) (316, 311)
2016-08-07 20:38:27,811 - DEBUG --- f1: [(316, 311), (311, 310), (310, 317), (317, 316)]
2016-08-07 20:38:27,811 - DEBUG --- f2: [(356, 351), (351, 267), (267, 306), (306, 282), (282, 311), (311, 316), (316, 356)]
2016-08-07 20:38:27,811 - DEBUG --- f1_plus_f2_temp: [(317, 356), (356, 351), (351, 267), (267, 306), (306, 282), (282, 310), (310, 317)]
2016-08-07 20:38:27,812 - DEBUG --- END 152: test the 0 edge
2016-08-07 20:38:27,812 - INFO --- END 152: Search the right edge to remove. Found: (316, 311)
2016-08-07 20:38:27,812 - INFO --- BEGIN 152: Remove an F3, F4 or F5
2016-08-07 20:38:27,812 - DEBUG --- vertex_to_join_near_v1_on_the_face: 317
2016-08-07 20:38:27,812 - DEBUG --- vertex_to_join_near_v2_on_the_face: 310
2016-08-07 20:38:27,813 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 356
2016-08-07 20:38:27,813 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 282
2016-08-07 20:38:27,813 - DEBUG --- third_face_to_update: [(349, 356), (356, 316), (316, 317), (317, 326), (326, 349)]
2016-08-07 20:38:27,813 - DEBUG --- fourth_face_to_update: [(274, 310), (310, 311), (311, 282), (282, 269), (269, 274)]
2016-08-07 20:38:27,813 - INFO --- ariadne_step: [4, 316, 311, 317, 310, 356, 282]
2016-08-07 20:38:27,814 - INFO --- END 152: Remove an F3, F4 or F5
2016-08-07 20:38:27,814 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,818 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,819 - INFO --- END 152: Main loop
2016-08-07 20:38:27,819 - INFO --- 
2016-08-07 20:38:27,819 - INFO --- BEGIN 153: Main loop
2016-08-07 20:38:27,819 - INFO --- BEGIN 153: Search the right edge to remove
2016-08-07 20:38:27,820 - DEBUG --- BEGIN 153: test the 0 edge
2016-08-07 20:38:27,820 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,820 - DEBUG --- edge_to_remove: (74, 114)
2016-08-07 20:38:27,820 - DEBUG --- rotated_edge_to_remove: (114, 74)
2016-08-07 20:38:27,820 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,821 - DEBUG --- f1: [(74, 114), (114, 123), (123, 126), (126, 74)]
2016-08-07 20:38:27,821 - DEBUG --- f2: [(70, 107), (107, 119), (119, 114), (114, 74), (74, 64), (64, 70)]
2016-08-07 20:38:27,821 - DEBUG --- edge_to_remove_on_f1: (74, 114)
2016-08-07 20:38:27,821 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,821 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:27,822 - DEBUG --- Temporary f1_plus_f2: [(74, 64), (64, 70), (70, 107), (107, 119), (119, 114), (114, 123), (123, 126), (126, 74)]
2016-08-07 20:38:27,822 - DEBUG --- f1_plus_f2: [(126, 64), (64, 70), (70, 107), (107, 119), (119, 123), (123, 126)]
2016-08-07 20:38:27,822 - DEBUG --- END: join_faces
2016-08-07 20:38:27,822 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,822 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,823 - DEBUG --- Edge to remove found :-) (74, 114)
2016-08-07 20:38:27,823 - DEBUG --- f1: [(74, 114), (114, 123), (123, 126), (126, 74)]
2016-08-07 20:38:27,823 - DEBUG --- f2: [(70, 107), (107, 119), (119, 114), (114, 74), (74, 64), (64, 70)]
2016-08-07 20:38:27,823 - DEBUG --- f1_plus_f2_temp: [(126, 64), (64, 70), (70, 107), (107, 119), (119, 123), (123, 126)]
2016-08-07 20:38:27,824 - DEBUG --- END 153: test the 0 edge
2016-08-07 20:38:27,824 - INFO --- END 153: Search the right edge to remove. Found: (74, 114)
2016-08-07 20:38:27,824 - INFO --- BEGIN 153: Remove an F3, F4 or F5
2016-08-07 20:38:27,824 - DEBUG --- vertex_to_join_near_v1_on_the_face: 126
2016-08-07 20:38:27,824 - DEBUG --- vertex_to_join_near_v2_on_the_face: 123
2016-08-07 20:38:27,825 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 64
2016-08-07 20:38:27,825 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 119
2016-08-07 20:38:27,825 - DEBUG --- third_face_to_update: [(138, 73), (73, 64), (64, 74), (74, 126), (126, 138)]
2016-08-07 20:38:27,825 - DEBUG --- fourth_face_to_update: [(123, 114), (114, 119), (119, 150), (150, 156), (156, 159), (159, 123)]
2016-08-07 20:38:27,826 - INFO --- ariadne_step: [4, 74, 114, 126, 123, 64, 119]
2016-08-07 20:38:27,826 - INFO --- END 153: Remove an F3, F4 or F5
2016-08-07 20:38:27,827 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,831 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,831 - INFO --- END 153: Main loop
2016-08-07 20:38:27,831 - INFO --- 
2016-08-07 20:38:27,832 - INFO --- BEGIN 154: Main loop
2016-08-07 20:38:27,832 - INFO --- BEGIN 154: Search the right edge to remove
2016-08-07 20:38:27,832 - DEBUG --- BEGIN 154: test the 0 edge
2016-08-07 20:38:27,832 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,832 - DEBUG --- edge_to_remove: (35, 305)
2016-08-07 20:38:27,833 - DEBUG --- rotated_edge_to_remove: (305, 35)
2016-08-07 20:38:27,833 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,833 - DEBUG --- f1: [(35, 305), (305, 266), (266, 363), (363, 35)]
2016-08-07 20:38:27,833 - DEBUG --- f2: [(306, 305), (305, 35), (35, 269), (269, 282), (282, 306)]
2016-08-07 20:38:27,834 - DEBUG --- edge_to_remove_on_f1: (35, 305)
2016-08-07 20:38:27,834 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,834 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:27,834 - DEBUG --- Temporary f1_plus_f2: [(35, 269), (269, 282), (282, 306), (306, 305), (305, 266), (266, 363), (363, 35)]
2016-08-07 20:38:27,834 - DEBUG --- f1_plus_f2: [(363, 269), (269, 282), (282, 306), (306, 266), (266, 363)]
2016-08-07 20:38:27,835 - DEBUG --- END: join_faces
2016-08-07 20:38:27,835 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,835 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,835 - DEBUG --- Edge to remove found :-) (35, 305)
2016-08-07 20:38:27,835 - DEBUG --- f1: [(35, 305), (305, 266), (266, 363), (363, 35)]
2016-08-07 20:38:27,836 - DEBUG --- f2: [(306, 305), (305, 35), (35, 269), (269, 282), (282, 306)]
2016-08-07 20:38:27,836 - DEBUG --- f1_plus_f2_temp: [(363, 269), (269, 282), (282, 306), (306, 266), (266, 363)]
2016-08-07 20:38:27,836 - DEBUG --- END 154: test the 0 edge
2016-08-07 20:38:27,836 - INFO --- END 154: Search the right edge to remove. Found: (35, 305)
2016-08-07 20:38:27,836 - INFO --- BEGIN 154: Remove an F3, F4 or F5
2016-08-07 20:38:27,837 - DEBUG --- vertex_to_join_near_v1_on_the_face: 363
2016-08-07 20:38:27,837 - DEBUG --- vertex_to_join_near_v2_on_the_face: 266
2016-08-07 20:38:27,837 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 269
2016-08-07 20:38:27,837 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 306
2016-08-07 20:38:27,837 - DEBUG --- third_face_to_update: [(269, 35), (35, 363), (363, 341), (341, 352), (352, 223), (223, 274), (274, 269)]
2016-08-07 20:38:27,838 - DEBUG --- fourth_face_to_update: [(305, 306), (306, 267), (267, 266), (266, 305)]
2016-08-07 20:38:27,838 - INFO --- ariadne_step: [4, 35, 305, 363, 266, 269, 306]
2016-08-07 20:38:27,838 - INFO --- END 154: Remove an F3, F4 or F5
2016-08-07 20:38:27,838 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,842 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,843 - INFO --- END 154: Main loop
2016-08-07 20:38:27,843 - INFO --- 
2016-08-07 20:38:27,843 - INFO --- BEGIN 155: Main loop
2016-08-07 20:38:27,844 - INFO --- BEGIN 155: Search the right edge to remove
2016-08-07 20:38:27,844 - DEBUG --- BEGIN 155: test the 0 edge
2016-08-07 20:38:27,844 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:27,844 - DEBUG --- edge_to_remove: (266, 306)
2016-08-07 20:38:27,845 - DEBUG --- rotated_edge_to_remove: (306, 266)
2016-08-07 20:38:27,845 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,845 - DEBUG --- f1: [(266, 306), (306, 267), (267, 266)]
2016-08-07 20:38:27,845 - DEBUG --- f2: [(363, 269), (269, 282), (282, 306), (306, 266), (266, 363)]
2016-08-07 20:38:27,845 - DEBUG --- edge_to_remove_on_f1: (266, 306)
2016-08-07 20:38:27,846 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,846 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:27,846 - DEBUG --- Temporary f1_plus_f2: [(266, 363), (363, 269), (269, 282), (282, 306), (306, 267), (267, 266)]
2016-08-07 20:38:27,846 - DEBUG --- f1_plus_f2: [(267, 363), (363, 269), (269, 282), (282, 267)]
2016-08-07 20:38:27,846 - DEBUG --- END: join_faces
2016-08-07 20:38:27,847 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,847 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,847 - DEBUG --- Edge to remove found :-) (266, 306)
2016-08-07 20:38:27,847 - DEBUG --- f1: [(266, 306), (306, 267), (267, 266)]
2016-08-07 20:38:27,847 - DEBUG --- f2: [(363, 269), (269, 282), (282, 306), (306, 266), (266, 363)]
2016-08-07 20:38:27,848 - DEBUG --- f1_plus_f2_temp: [(267, 363), (363, 269), (269, 282), (282, 267)]
2016-08-07 20:38:27,848 - DEBUG --- END 155: test the 0 edge
2016-08-07 20:38:27,848 - INFO --- END 155: Search the right edge to remove. Found: (266, 306)
2016-08-07 20:38:27,848 - INFO --- BEGIN 155: Remove an F3, F4 or F5
2016-08-07 20:38:27,849 - DEBUG --- vertex_to_join_near_v1_on_the_face: 267
2016-08-07 20:38:27,849 - DEBUG --- vertex_to_join_near_v2_on_the_face: 267
2016-08-07 20:38:27,849 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 363
2016-08-07 20:38:27,849 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 282
2016-08-07 20:38:27,849 - DEBUG --- third_face_to_update: [(363, 266), (266, 267), (267, 351), (351, 124), (124, 341), (341, 363)]
2016-08-07 20:38:27,850 - DEBUG --- fourth_face_to_update: [(317, 356), (356, 351), (351, 267), (267, 306), (306, 282), (282, 310), (310, 317)]
2016-08-07 20:38:27,850 - INFO --- ariadne_step: [3, 266, 306, 267, 267, 363, 282]
2016-08-07 20:38:27,850 - INFO --- END 155: Remove an F3, F4 or F5
2016-08-07 20:38:27,850 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,854 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,854 - INFO --- END 155: Main loop
2016-08-07 20:38:27,855 - INFO --- 
2016-08-07 20:38:27,855 - INFO --- BEGIN 156: Main loop
2016-08-07 20:38:27,855 - INFO --- BEGIN 156: Search the right edge to remove
2016-08-07 20:38:27,855 - DEBUG --- BEGIN 156: test the 0 edge
2016-08-07 20:38:27,856 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,856 - DEBUG --- edge_to_remove: (4, 5)
2016-08-07 20:38:27,856 - DEBUG --- rotated_edge_to_remove: (5, 4)
2016-08-07 20:38:27,856 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,856 - DEBUG --- f1: [(4, 5), (5, 392), (392, 391), (391, 4)]
2016-08-07 20:38:27,857 - DEBUG --- f2: [(4, 54), (54, 40), (40, 31), (31, 32), (32, 5), (5, 4)]
2016-08-07 20:38:27,857 - DEBUG --- edge_to_remove_on_f1: (4, 5)
2016-08-07 20:38:27,857 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,857 - DEBUG --- index_of_edge_to_remove_on_f2: 5
2016-08-07 20:38:27,857 - DEBUG --- Temporary f1_plus_f2: [(4, 54), (54, 40), (40, 31), (31, 32), (32, 5), (5, 392), (392, 391), (391, 4)]
2016-08-07 20:38:27,858 - DEBUG --- f1_plus_f2: [(391, 54), (54, 40), (40, 31), (31, 32), (32, 392), (392, 391)]
2016-08-07 20:38:27,858 - DEBUG --- END: join_faces
2016-08-07 20:38:27,858 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,858 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,858 - DEBUG --- Edge to remove found :-) (4, 5)
2016-08-07 20:38:27,859 - DEBUG --- f1: [(4, 5), (5, 392), (392, 391), (391, 4)]
2016-08-07 20:38:27,859 - DEBUG --- f2: [(4, 54), (54, 40), (40, 31), (31, 32), (32, 5), (5, 4)]
2016-08-07 20:38:27,859 - DEBUG --- f1_plus_f2_temp: [(391, 54), (54, 40), (40, 31), (31, 32), (32, 392), (392, 391)]
2016-08-07 20:38:27,859 - DEBUG --- END 156: test the 0 edge
2016-08-07 20:38:27,859 - INFO --- END 156: Search the right edge to remove. Found: (4, 5)
2016-08-07 20:38:27,860 - INFO --- BEGIN 156: Remove an F3, F4 or F5
2016-08-07 20:38:27,860 - DEBUG --- vertex_to_join_near_v1_on_the_face: 391
2016-08-07 20:38:27,860 - DEBUG --- vertex_to_join_near_v2_on_the_face: 392
2016-08-07 20:38:27,860 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 54
2016-08-07 20:38:27,860 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 32
2016-08-07 20:38:27,861 - DEBUG --- third_face_to_update: [(55, 54), (54, 4), (4, 391), (391, 368), (368, 370), (370, 55)]
2016-08-07 20:38:27,861 - DEBUG --- fourth_face_to_update: [(32, 380), (380, 379), (379, 392), (392, 5), (5, 32)]
2016-08-07 20:38:27,861 - INFO --- ariadne_step: [4, 4, 5, 391, 392, 54, 32]
2016-08-07 20:38:27,861 - INFO --- END 156: Remove an F3, F4 or F5
2016-08-07 20:38:27,862 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,865 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,865 - INFO --- END 156: Main loop
2016-08-07 20:38:27,866 - INFO --- 
2016-08-07 20:38:27,866 - INFO --- BEGIN 157: Main loop
2016-08-07 20:38:27,866 - INFO --- BEGIN 157: Search the right edge to remove
2016-08-07 20:38:27,866 - DEBUG --- BEGIN 157: test the 0 edge
2016-08-07 20:38:27,867 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,867 - DEBUG --- edge_to_remove: (233, 229)
2016-08-07 20:38:27,867 - DEBUG --- rotated_edge_to_remove: (229, 233)
2016-08-07 20:38:27,867 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,867 - DEBUG --- f1: [(233, 229), (229, 228), (228, 234), (234, 233)]
2016-08-07 20:38:27,868 - DEBUG --- f2: [(229, 233), (233, 166), (166, 165), (165, 225), (225, 229)]
2016-08-07 20:38:27,868 - DEBUG --- edge_to_remove_on_f1: (233, 229)
2016-08-07 20:38:27,868 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,868 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:27,868 - DEBUG --- Temporary f1_plus_f2: [(233, 166), (166, 165), (165, 225), (225, 229), (229, 228), (228, 234), (234, 233)]
2016-08-07 20:38:27,869 - DEBUG --- f1_plus_f2: [(234, 166), (166, 165), (165, 225), (225, 228), (228, 234)]
2016-08-07 20:38:27,869 - DEBUG --- END: join_faces
2016-08-07 20:38:27,869 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,869 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,870 - DEBUG --- Edge to remove found :-) (233, 229)
2016-08-07 20:38:27,870 - DEBUG --- f1: [(233, 229), (229, 228), (228, 234), (234, 233)]
2016-08-07 20:38:27,870 - DEBUG --- f2: [(229, 233), (233, 166), (166, 165), (165, 225), (225, 229)]
2016-08-07 20:38:27,870 - DEBUG --- f1_plus_f2_temp: [(234, 166), (166, 165), (165, 225), (225, 228), (228, 234)]
2016-08-07 20:38:27,870 - DEBUG --- END 157: test the 0 edge
2016-08-07 20:38:27,871 - INFO --- END 157: Search the right edge to remove. Found: (233, 229)
2016-08-07 20:38:27,871 - INFO --- BEGIN 157: Remove an F3, F4 or F5
2016-08-07 20:38:27,871 - DEBUG --- vertex_to_join_near_v1_on_the_face: 234
2016-08-07 20:38:27,871 - DEBUG --- vertex_to_join_near_v2_on_the_face: 228
2016-08-07 20:38:27,871 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 166
2016-08-07 20:38:27,871 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 225
2016-08-07 20:38:27,872 - DEBUG --- third_face_to_update: [(166, 233), (233, 234), (234, 242), (242, 162), (162, 166)]
2016-08-07 20:38:27,872 - DEBUG --- fourth_face_to_update: [(40, 52), (52, 231), (231, 228), (228, 229), (229, 225), (225, 217), (217, 29), (29, 31), (31, 40)]
2016-08-07 20:38:27,872 - INFO --- ariadne_step: [4, 233, 229, 234, 228, 166, 225]
2016-08-07 20:38:27,872 - INFO --- END 157: Remove an F3, F4 or F5
2016-08-07 20:38:27,873 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,876 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,877 - INFO --- END 157: Main loop
2016-08-07 20:38:27,877 - INFO --- 
2016-08-07 20:38:27,877 - INFO --- BEGIN 158: Main loop
2016-08-07 20:38:27,877 - INFO --- BEGIN 158: Search the right edge to remove
2016-08-07 20:38:27,877 - DEBUG --- BEGIN 158: test the 0 edge
2016-08-07 20:38:27,878 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,878 - DEBUG --- edge_to_remove: (349, 356)
2016-08-07 20:38:27,878 - DEBUG --- rotated_edge_to_remove: (356, 349)
2016-08-07 20:38:27,878 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,879 - DEBUG --- f1: [(349, 356), (356, 317), (317, 326), (326, 349)]
2016-08-07 20:38:27,879 - DEBUG --- f2: [(79, 124), (124, 351), (351, 356), (356, 349), (349, 348), (348, 340), (340, 79)]
2016-08-07 20:38:27,879 - DEBUG --- edge_to_remove_on_f1: (349, 356)
2016-08-07 20:38:27,879 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,880 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:27,880 - DEBUG --- Temporary f1_plus_f2: [(349, 348), (348, 340), (340, 79), (79, 124), (124, 351), (351, 356), (356, 317), (317, 326), (326, 349)]
2016-08-07 20:38:27,880 - DEBUG --- f1_plus_f2: [(326, 348), (348, 340), (340, 79), (79, 124), (124, 351), (351, 317), (317, 326)]
2016-08-07 20:38:27,881 - DEBUG --- END: join_faces
2016-08-07 20:38:27,881 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,881 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,881 - DEBUG --- Edge to remove found :-) (349, 356)
2016-08-07 20:38:27,881 - DEBUG --- f1: [(349, 356), (356, 317), (317, 326), (326, 349)]
2016-08-07 20:38:27,882 - DEBUG --- f2: [(79, 124), (124, 351), (351, 356), (356, 349), (349, 348), (348, 340), (340, 79)]
2016-08-07 20:38:27,882 - DEBUG --- f1_plus_f2_temp: [(326, 348), (348, 340), (340, 79), (79, 124), (124, 351), (351, 317), (317, 326)]
2016-08-07 20:38:27,882 - DEBUG --- END 158: test the 0 edge
2016-08-07 20:38:27,882 - INFO --- END 158: Search the right edge to remove. Found: (349, 356)
2016-08-07 20:38:27,882 - INFO --- BEGIN 158: Remove an F3, F4 or F5
2016-08-07 20:38:27,883 - DEBUG --- vertex_to_join_near_v1_on_the_face: 326
2016-08-07 20:38:27,883 - DEBUG --- vertex_to_join_near_v2_on_the_face: 317
2016-08-07 20:38:27,883 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 348
2016-08-07 20:38:27,883 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 351
2016-08-07 20:38:27,883 - DEBUG --- third_face_to_update: [(223, 352), (352, 157), (157, 370), (370, 368), (368, 366), (366, 367), (367, 348), (348, 349), (349, 326), (326, 223)]
2016-08-07 20:38:27,884 - DEBUG --- fourth_face_to_update: [(317, 356), (356, 351), (351, 267), (267, 282), (282, 310), (310, 317)]
2016-08-07 20:38:27,885 - INFO --- ariadne_step: [4, 349, 356, 326, 317, 348, 351]
2016-08-07 20:38:27,885 - INFO --- END 158: Remove an F3, F4 or F5
2016-08-07 20:38:27,885 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,888 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,888 - INFO --- END 158: Main loop
2016-08-07 20:38:27,889 - INFO --- 
2016-08-07 20:38:27,889 - INFO --- BEGIN 159: Main loop
2016-08-07 20:38:27,889 - INFO --- BEGIN 159: Search the right edge to remove
2016-08-07 20:38:27,889 - DEBUG --- BEGIN 159: test the 0 edge
2016-08-07 20:38:27,890 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,890 - DEBUG --- edge_to_remove: (274, 310)
2016-08-07 20:38:27,890 - DEBUG --- rotated_edge_to_remove: (310, 274)
2016-08-07 20:38:27,890 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,891 - DEBUG --- f1: [(274, 310), (310, 282), (282, 269), (269, 274)]
2016-08-07 20:38:27,891 - DEBUG --- f2: [(223, 326), (326, 317), (317, 310), (310, 274), (274, 223)]
2016-08-07 20:38:27,891 - DEBUG --- edge_to_remove_on_f1: (274, 310)
2016-08-07 20:38:27,891 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,891 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:27,892 - DEBUG --- Temporary f1_plus_f2: [(274, 223), (223, 326), (326, 317), (317, 310), (310, 282), (282, 269), (269, 274)]
2016-08-07 20:38:27,892 - DEBUG --- f1_plus_f2: [(269, 223), (223, 326), (326, 317), (317, 282), (282, 269)]
2016-08-07 20:38:27,892 - DEBUG --- END: join_faces
2016-08-07 20:38:27,892 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,893 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,893 - DEBUG --- Edge to remove found :-) (274, 310)
2016-08-07 20:38:27,893 - DEBUG --- f1: [(274, 310), (310, 282), (282, 269), (269, 274)]
2016-08-07 20:38:27,893 - DEBUG --- f2: [(223, 326), (326, 317), (317, 310), (310, 274), (274, 223)]
2016-08-07 20:38:27,893 - DEBUG --- f1_plus_f2_temp: [(269, 223), (223, 326), (326, 317), (317, 282), (282, 269)]
2016-08-07 20:38:27,894 - DEBUG --- END 159: test the 0 edge
2016-08-07 20:38:27,894 - INFO --- END 159: Search the right edge to remove. Found: (274, 310)
2016-08-07 20:38:27,894 - INFO --- BEGIN 159: Remove an F3, F4 or F5
2016-08-07 20:38:27,894 - DEBUG --- vertex_to_join_near_v1_on_the_face: 269
2016-08-07 20:38:27,895 - DEBUG --- vertex_to_join_near_v2_on_the_face: 282
2016-08-07 20:38:27,895 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 223
2016-08-07 20:38:27,895 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 317
2016-08-07 20:38:27,895 - DEBUG --- third_face_to_update: [(269, 363), (363, 341), (341, 352), (352, 223), (223, 274), (274, 269)]
2016-08-07 20:38:27,895 - DEBUG --- fourth_face_to_update: [(317, 351), (351, 267), (267, 282), (282, 310), (310, 317)]
2016-08-07 20:38:27,895 - INFO --- ariadne_step: [4, 274, 310, 269, 282, 223, 317]
2016-08-07 20:38:27,896 - INFO --- END 159: Remove an F3, F4 or F5
2016-08-07 20:38:27,896 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,899 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,899 - INFO --- END 159: Main loop
2016-08-07 20:38:27,900 - INFO --- 
2016-08-07 20:38:27,900 - INFO --- BEGIN 160: Main loop
2016-08-07 20:38:27,900 - INFO --- BEGIN 160: Search the right edge to remove
2016-08-07 20:38:27,900 - DEBUG --- BEGIN 160: test the 0 edge
2016-08-07 20:38:27,900 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,901 - DEBUG --- edge_to_remove: (138, 73)
2016-08-07 20:38:27,901 - DEBUG --- rotated_edge_to_remove: (73, 138)
2016-08-07 20:38:27,901 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,901 - DEBUG --- f1: [(138, 73), (73, 64), (64, 126), (126, 138)]
2016-08-07 20:38:27,901 - DEBUG --- f2: [(71, 73), (73, 138), (138, 137), (137, 213), (213, 259), (259, 71)]
2016-08-07 20:38:27,902 - DEBUG --- edge_to_remove_on_f1: (138, 73)
2016-08-07 20:38:27,902 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,902 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:27,902 - DEBUG --- Temporary f1_plus_f2: [(138, 137), (137, 213), (213, 259), (259, 71), (71, 73), (73, 64), (64, 126), (126, 138)]
2016-08-07 20:38:27,902 - DEBUG --- f1_plus_f2: [(126, 137), (137, 213), (213, 259), (259, 71), (71, 64), (64, 126)]
2016-08-07 20:38:27,903 - DEBUG --- END: join_faces
2016-08-07 20:38:27,903 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,903 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,903 - DEBUG --- Edge to remove found :-) (138, 73)
2016-08-07 20:38:27,903 - DEBUG --- f1: [(138, 73), (73, 64), (64, 126), (126, 138)]
2016-08-07 20:38:27,904 - DEBUG --- f2: [(71, 73), (73, 138), (138, 137), (137, 213), (213, 259), (259, 71)]
2016-08-07 20:38:27,904 - DEBUG --- f1_plus_f2_temp: [(126, 137), (137, 213), (213, 259), (259, 71), (71, 64), (64, 126)]
2016-08-07 20:38:27,904 - DEBUG --- END 160: test the 0 edge
2016-08-07 20:38:27,904 - INFO --- END 160: Search the right edge to remove. Found: (138, 73)
2016-08-07 20:38:27,905 - INFO --- BEGIN 160: Remove an F3, F4 or F5
2016-08-07 20:38:27,905 - DEBUG --- vertex_to_join_near_v1_on_the_face: 126
2016-08-07 20:38:27,905 - DEBUG --- vertex_to_join_near_v2_on_the_face: 64
2016-08-07 20:38:27,905 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 137
2016-08-07 20:38:27,905 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 71
2016-08-07 20:38:27,906 - DEBUG --- third_face_to_update: [(161, 137), (137, 138), (138, 126), (126, 123), (123, 159), (159, 161)]
2016-08-07 20:38:27,906 - DEBUG --- fourth_face_to_update: [(73, 71), (71, 63), (63, 59), (59, 70), (70, 64), (64, 73)]
2016-08-07 20:38:27,906 - INFO --- ariadne_step: [4, 138, 73, 126, 64, 137, 71]
2016-08-07 20:38:27,906 - INFO --- END 160: Remove an F3, F4 or F5
2016-08-07 20:38:27,907 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,910 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,910 - INFO --- END 160: Main loop
2016-08-07 20:38:27,910 - INFO --- 
2016-08-07 20:38:27,910 - INFO --- BEGIN 161: Main loop
2016-08-07 20:38:27,911 - INFO --- BEGIN 161: Search the right edge to remove
2016-08-07 20:38:27,911 - DEBUG --- BEGIN 161: test the 0 edge
2016-08-07 20:38:27,911 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,911 - DEBUG --- edge_to_remove: (267, 363)
2016-08-07 20:38:27,911 - DEBUG --- rotated_edge_to_remove: (363, 267)
2016-08-07 20:38:27,912 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,912 - DEBUG --- f1: [(267, 363), (363, 269), (269, 282), (282, 267)]
2016-08-07 20:38:27,912 - DEBUG --- f2: [(363, 267), (267, 351), (351, 124), (124, 341), (341, 363)]
2016-08-07 20:38:27,912 - DEBUG --- edge_to_remove_on_f1: (267, 363)
2016-08-07 20:38:27,913 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,913 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:27,913 - DEBUG --- Temporary f1_plus_f2: [(267, 351), (351, 124), (124, 341), (341, 363), (363, 269), (269, 282), (282, 267)]
2016-08-07 20:38:27,913 - DEBUG --- f1_plus_f2: [(282, 351), (351, 124), (124, 341), (341, 269), (269, 282)]
2016-08-07 20:38:27,913 - DEBUG --- END: join_faces
2016-08-07 20:38:27,914 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,914 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,914 - DEBUG --- Edge to remove found :-) (267, 363)
2016-08-07 20:38:27,914 - DEBUG --- f1: [(267, 363), (363, 269), (269, 282), (282, 267)]
2016-08-07 20:38:27,915 - DEBUG --- f2: [(363, 267), (267, 351), (351, 124), (124, 341), (341, 363)]
2016-08-07 20:38:27,915 - DEBUG --- f1_plus_f2_temp: [(282, 351), (351, 124), (124, 341), (341, 269), (269, 282)]
2016-08-07 20:38:27,915 - DEBUG --- END 161: test the 0 edge
2016-08-07 20:38:27,915 - INFO --- END 161: Search the right edge to remove. Found: (267, 363)
2016-08-07 20:38:27,915 - INFO --- BEGIN 161: Remove an F3, F4 or F5
2016-08-07 20:38:27,916 - DEBUG --- vertex_to_join_near_v1_on_the_face: 282
2016-08-07 20:38:27,916 - DEBUG --- vertex_to_join_near_v2_on_the_face: 269
2016-08-07 20:38:27,916 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 351
2016-08-07 20:38:27,916 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 341
2016-08-07 20:38:27,916 - DEBUG --- third_face_to_update: [(317, 351), (351, 267), (267, 282), (282, 317)]
2016-08-07 20:38:27,917 - DEBUG --- fourth_face_to_update: [(269, 363), (363, 341), (341, 352), (352, 223), (223, 269)]
2016-08-07 20:38:27,917 - INFO --- ariadne_step: [4, 267, 363, 282, 269, 351, 341]
2016-08-07 20:38:27,917 - INFO --- END 161: Remove an F3, F4 or F5
2016-08-07 20:38:27,917 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,920 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,921 - INFO --- END 161: Main loop
2016-08-07 20:38:27,921 - INFO --- 
2016-08-07 20:38:27,921 - INFO --- BEGIN 162: Main loop
2016-08-07 20:38:27,921 - INFO --- BEGIN 162: Search the right edge to remove
2016-08-07 20:38:27,922 - DEBUG --- BEGIN 162: test the 0 edge
2016-08-07 20:38:27,922 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:27,922 - DEBUG --- edge_to_remove: (317, 351)
2016-08-07 20:38:27,922 - DEBUG --- rotated_edge_to_remove: (351, 317)
2016-08-07 20:38:27,923 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,923 - DEBUG --- f1: [(317, 351), (351, 282), (282, 317)]
2016-08-07 20:38:27,923 - DEBUG --- f2: [(326, 348), (348, 340), (340, 79), (79, 124), (124, 351), (351, 317), (317, 326)]
2016-08-07 20:38:27,923 - DEBUG --- edge_to_remove_on_f1: (317, 351)
2016-08-07 20:38:27,923 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,924 - DEBUG --- index_of_edge_to_remove_on_f2: 5
2016-08-07 20:38:27,924 - DEBUG --- Temporary f1_plus_f2: [(317, 326), (326, 348), (348, 340), (340, 79), (79, 124), (124, 351), (351, 282), (282, 317)]
2016-08-07 20:38:27,924 - DEBUG --- f1_plus_f2: [(282, 326), (326, 348), (348, 340), (340, 79), (79, 124), (124, 282)]
2016-08-07 20:38:27,925 - DEBUG --- END: join_faces
2016-08-07 20:38:27,926 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,927 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,928 - DEBUG --- Edge to remove found :-) (317, 351)
2016-08-07 20:38:27,928 - DEBUG --- f1: [(317, 351), (351, 282), (282, 317)]
2016-08-07 20:38:27,929 - DEBUG --- f2: [(326, 348), (348, 340), (340, 79), (79, 124), (124, 351), (351, 317), (317, 326)]
2016-08-07 20:38:27,929 - DEBUG --- f1_plus_f2_temp: [(282, 326), (326, 348), (348, 340), (340, 79), (79, 124), (124, 282)]
2016-08-07 20:38:27,929 - DEBUG --- END 162: test the 0 edge
2016-08-07 20:38:27,929 - INFO --- END 162: Search the right edge to remove. Found: (317, 351)
2016-08-07 20:38:27,929 - INFO --- BEGIN 162: Remove an F3, F4 or F5
2016-08-07 20:38:27,930 - DEBUG --- vertex_to_join_near_v1_on_the_face: 282
2016-08-07 20:38:27,930 - DEBUG --- vertex_to_join_near_v2_on_the_face: 282
2016-08-07 20:38:27,930 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 326
2016-08-07 20:38:27,930 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 124
2016-08-07 20:38:27,930 - DEBUG --- third_face_to_update: [(269, 223), (223, 326), (326, 317), (317, 282), (282, 269)]
2016-08-07 20:38:27,931 - DEBUG --- fourth_face_to_update: [(282, 351), (351, 124), (124, 341), (341, 269), (269, 282)]
2016-08-07 20:38:27,931 - INFO --- ariadne_step: [3, 317, 351, 282, 282, 326, 124]
2016-08-07 20:38:27,931 - INFO --- END 162: Remove an F3, F4 or F5
2016-08-07 20:38:27,931 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,933 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,934 - INFO --- END 162: Main loop
2016-08-07 20:38:27,934 - INFO --- 
2016-08-07 20:38:27,934 - INFO --- BEGIN 163: Main loop
2016-08-07 20:38:27,935 - INFO --- BEGIN 163: Search the right edge to remove
2016-08-07 20:38:27,935 - DEBUG --- BEGIN 163: test the 0 edge
2016-08-07 20:38:27,935 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,935 - DEBUG --- edge_to_remove: (32, 380)
2016-08-07 20:38:27,936 - DEBUG --- rotated_edge_to_remove: (380, 32)
2016-08-07 20:38:27,936 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,936 - DEBUG --- f1: [(32, 380), (380, 379), (379, 392), (392, 32)]
2016-08-07 20:38:27,936 - DEBUG --- f2: [(32, 31), (31, 29), (29, 381), (381, 380), (380, 32)]
2016-08-07 20:38:27,936 - DEBUG --- edge_to_remove_on_f1: (32, 380)
2016-08-07 20:38:27,937 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,937 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:27,937 - DEBUG --- Temporary f1_plus_f2: [(32, 31), (31, 29), (29, 381), (381, 380), (380, 379), (379, 392), (392, 32)]
2016-08-07 20:38:27,937 - DEBUG --- f1_plus_f2: [(392, 31), (31, 29), (29, 381), (381, 379), (379, 392)]
2016-08-07 20:38:27,938 - DEBUG --- END: join_faces
2016-08-07 20:38:27,938 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,938 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,938 - DEBUG --- Edge to remove found :-) (32, 380)
2016-08-07 20:38:27,938 - DEBUG --- f1: [(32, 380), (380, 379), (379, 392), (392, 32)]
2016-08-07 20:38:27,939 - DEBUG --- f2: [(32, 31), (31, 29), (29, 381), (381, 380), (380, 32)]
2016-08-07 20:38:27,939 - DEBUG --- f1_plus_f2_temp: [(392, 31), (31, 29), (29, 381), (381, 379), (379, 392)]
2016-08-07 20:38:27,939 - DEBUG --- END 163: test the 0 edge
2016-08-07 20:38:27,939 - INFO --- END 163: Search the right edge to remove. Found: (32, 380)
2016-08-07 20:38:27,939 - INFO --- BEGIN 163: Remove an F3, F4 or F5
2016-08-07 20:38:27,940 - DEBUG --- vertex_to_join_near_v1_on_the_face: 392
2016-08-07 20:38:27,940 - DEBUG --- vertex_to_join_near_v2_on_the_face: 379
2016-08-07 20:38:27,940 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 31
2016-08-07 20:38:27,940 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 381
2016-08-07 20:38:27,940 - DEBUG --- third_face_to_update: [(391, 54), (54, 40), (40, 31), (31, 32), (32, 392), (392, 391)]
2016-08-07 20:38:27,941 - DEBUG --- fourth_face_to_update: [(365, 367), (367, 366), (366, 379), (379, 380), (380, 381), (381, 365)]
2016-08-07 20:38:27,941 - INFO --- ariadne_step: [4, 32, 380, 392, 379, 31, 381]
2016-08-07 20:38:27,941 - INFO --- END 163: Remove an F3, F4 or F5
2016-08-07 20:38:27,943 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,945 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,946 - INFO --- END 163: Main loop
2016-08-07 20:38:27,946 - INFO --- 
2016-08-07 20:38:27,946 - INFO --- BEGIN 164: Main loop
2016-08-07 20:38:27,946 - INFO --- BEGIN 164: Search the right edge to remove
2016-08-07 20:38:27,947 - DEBUG --- BEGIN 164: test the 0 edge
2016-08-07 20:38:27,947 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,947 - DEBUG --- edge_to_remove: (166, 234)
2016-08-07 20:38:27,947 - DEBUG --- rotated_edge_to_remove: (234, 166)
2016-08-07 20:38:27,948 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,948 - DEBUG --- f1: [(166, 234), (234, 242), (242, 162), (162, 166)]
2016-08-07 20:38:27,948 - DEBUG --- f2: [(234, 166), (166, 165), (165, 225), (225, 228), (228, 234)]
2016-08-07 20:38:27,948 - DEBUG --- edge_to_remove_on_f1: (166, 234)
2016-08-07 20:38:27,948 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,949 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:27,949 - DEBUG --- Temporary f1_plus_f2: [(166, 165), (165, 225), (225, 228), (228, 234), (234, 242), (242, 162), (162, 166)]
2016-08-07 20:38:27,949 - DEBUG --- f1_plus_f2: [(162, 165), (165, 225), (225, 228), (228, 242), (242, 162)]
2016-08-07 20:38:27,949 - DEBUG --- END: join_faces
2016-08-07 20:38:27,949 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,950 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,950 - DEBUG --- Edge to remove found :-) (166, 234)
2016-08-07 20:38:27,950 - DEBUG --- f1: [(166, 234), (234, 242), (242, 162), (162, 166)]
2016-08-07 20:38:27,950 - DEBUG --- f2: [(234, 166), (166, 165), (165, 225), (225, 228), (228, 234)]
2016-08-07 20:38:27,950 - DEBUG --- f1_plus_f2_temp: [(162, 165), (165, 225), (225, 228), (228, 242), (242, 162)]
2016-08-07 20:38:27,950 - DEBUG --- END 164: test the 0 edge
2016-08-07 20:38:27,951 - INFO --- END 164: Search the right edge to remove. Found: (166, 234)
2016-08-07 20:38:27,951 - INFO --- BEGIN 164: Remove an F3, F4 or F5
2016-08-07 20:38:27,951 - DEBUG --- vertex_to_join_near_v1_on_the_face: 162
2016-08-07 20:38:27,951 - DEBUG --- vertex_to_join_near_v2_on_the_face: 242
2016-08-07 20:38:27,951 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 165
2016-08-07 20:38:27,952 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 228
2016-08-07 20:38:27,952 - DEBUG --- third_face_to_update: [(163, 165), (165, 166), (166, 162), (162, 161), (161, 159), (159, 156), (156, 163)]
2016-08-07 20:38:27,952 - DEBUG --- fourth_face_to_update: [(234, 228), (228, 231), (231, 258), (258, 259), (259, 213), (213, 242), (242, 234)]
2016-08-07 20:38:27,953 - INFO --- ariadne_step: [4, 166, 234, 162, 242, 165, 228]
2016-08-07 20:38:27,953 - INFO --- END 164: Remove an F3, F4 or F5
2016-08-07 20:38:27,953 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,955 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,956 - INFO --- END 164: Main loop
2016-08-07 20:38:27,956 - INFO --- 
2016-08-07 20:38:27,956 - INFO --- BEGIN 165: Main loop
2016-08-07 20:38:27,956 - INFO --- BEGIN 165: Search the right edge to remove
2016-08-07 20:38:27,957 - DEBUG --- BEGIN 165: test the 0 edge
2016-08-07 20:38:27,957 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,957 - DEBUG --- edge_to_remove: (269, 341)
2016-08-07 20:38:27,957 - DEBUG --- rotated_edge_to_remove: (341, 269)
2016-08-07 20:38:27,957 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,958 - DEBUG --- f1: [(269, 341), (341, 352), (352, 223), (223, 269)]
2016-08-07 20:38:27,958 - DEBUG --- f2: [(282, 124), (124, 341), (341, 269), (269, 282)]
2016-08-07 20:38:27,958 - DEBUG --- edge_to_remove_on_f1: (269, 341)
2016-08-07 20:38:27,958 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,959 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:27,959 - DEBUG --- Temporary f1_plus_f2: [(269, 282), (282, 124), (124, 341), (341, 352), (352, 223), (223, 269)]
2016-08-07 20:38:27,959 - DEBUG --- f1_plus_f2: [(223, 282), (282, 124), (124, 352), (352, 223)]
2016-08-07 20:38:27,959 - DEBUG --- END: join_faces
2016-08-07 20:38:27,959 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,960 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,960 - DEBUG --- Edge to remove found :-) (269, 341)
2016-08-07 20:38:27,960 - DEBUG --- f1: [(269, 341), (341, 352), (352, 223), (223, 269)]
2016-08-07 20:38:27,960 - DEBUG --- f2: [(282, 124), (124, 341), (341, 269), (269, 282)]
2016-08-07 20:38:27,960 - DEBUG --- f1_plus_f2_temp: [(223, 282), (282, 124), (124, 352), (352, 223)]
2016-08-07 20:38:27,961 - DEBUG --- END 165: test the 0 edge
2016-08-07 20:38:27,961 - INFO --- END 165: Search the right edge to remove. Found: (269, 341)
2016-08-07 20:38:27,961 - INFO --- BEGIN 165: Remove an F3, F4 or F5
2016-08-07 20:38:27,961 - DEBUG --- vertex_to_join_near_v1_on_the_face: 223
2016-08-07 20:38:27,961 - DEBUG --- vertex_to_join_near_v2_on_the_face: 352
2016-08-07 20:38:27,962 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 282
2016-08-07 20:38:27,962 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 124
2016-08-07 20:38:27,962 - DEBUG --- third_face_to_update: [(269, 223), (223, 326), (326, 282), (282, 269)]
2016-08-07 20:38:27,962 - DEBUG --- fourth_face_to_update: [(157, 352), (352, 341), (341, 124), (124, 79), (79, 168), (168, 157)]
2016-08-07 20:38:27,962 - INFO --- ariadne_step: [4, 269, 341, 223, 352, 282, 124]
2016-08-07 20:38:27,963 - INFO --- END 165: Remove an F3, F4 or F5
2016-08-07 20:38:27,963 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,965 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,965 - INFO --- END 165: Main loop
2016-08-07 20:38:27,966 - INFO --- 
2016-08-07 20:38:27,966 - INFO --- BEGIN 166: Main loop
2016-08-07 20:38:27,966 - INFO --- BEGIN 166: Search the right edge to remove
2016-08-07 20:38:27,966 - DEBUG --- BEGIN 166: test the 0 edge
2016-08-07 20:38:27,966 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:27,967 - DEBUG --- edge_to_remove: (282, 223)
2016-08-07 20:38:27,967 - DEBUG --- rotated_edge_to_remove: (223, 282)
2016-08-07 20:38:27,967 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,967 - DEBUG --- f1: [(282, 223), (223, 326), (326, 282)]
2016-08-07 20:38:27,967 - DEBUG --- f2: [(223, 282), (282, 124), (124, 352), (352, 223)]
2016-08-07 20:38:27,968 - DEBUG --- edge_to_remove_on_f1: (282, 223)
2016-08-07 20:38:27,968 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,968 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:27,968 - DEBUG --- Temporary f1_plus_f2: [(282, 124), (124, 352), (352, 223), (223, 326), (326, 282)]
2016-08-07 20:38:27,968 - DEBUG --- f1_plus_f2: [(326, 124), (124, 352), (352, 326)]
2016-08-07 20:38:27,969 - DEBUG --- END: join_faces
2016-08-07 20:38:27,969 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,969 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,969 - DEBUG --- Edge to remove found :-) (282, 223)
2016-08-07 20:38:27,969 - DEBUG --- f1: [(282, 223), (223, 326), (326, 282)]
2016-08-07 20:38:27,970 - DEBUG --- f2: [(223, 282), (282, 124), (124, 352), (352, 223)]
2016-08-07 20:38:27,970 - DEBUG --- f1_plus_f2_temp: [(326, 124), (124, 352), (352, 326)]
2016-08-07 20:38:27,970 - DEBUG --- END 166: test the 0 edge
2016-08-07 20:38:27,970 - INFO --- END 166: Search the right edge to remove. Found: (282, 223)
2016-08-07 20:38:27,970 - INFO --- BEGIN 166: Remove an F3, F4 or F5
2016-08-07 20:38:27,971 - DEBUG --- vertex_to_join_near_v1_on_the_face: 326
2016-08-07 20:38:27,971 - DEBUG --- vertex_to_join_near_v2_on_the_face: 326
2016-08-07 20:38:27,971 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 124
2016-08-07 20:38:27,971 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 352
2016-08-07 20:38:27,971 - DEBUG --- third_face_to_update: [(282, 326), (326, 348), (348, 340), (340, 79), (79, 124), (124, 282)]
2016-08-07 20:38:27,972 - DEBUG --- fourth_face_to_update: [(223, 352), (352, 157), (157, 370), (370, 368), (368, 366), (366, 367), (367, 348), (348, 326), (326, 223)]
2016-08-07 20:38:27,972 - INFO --- ariadne_step: [3, 282, 223, 326, 326, 124, 352]
2016-08-07 20:38:27,972 - INFO --- END 166: Remove an F3, F4 or F5
2016-08-07 20:38:27,972 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,974 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,975 - INFO --- END 166: Main loop
2016-08-07 20:38:27,975 - INFO --- 
2016-08-07 20:38:27,975 - INFO --- BEGIN 167: Main loop
2016-08-07 20:38:27,975 - INFO --- BEGIN 167: Search the right edge to remove
2016-08-07 20:38:27,976 - DEBUG --- BEGIN 167: test the 0 edge
2016-08-07 20:38:27,976 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:27,976 - DEBUG --- edge_to_remove: (326, 124)
2016-08-07 20:38:27,976 - DEBUG --- rotated_edge_to_remove: (124, 326)
2016-08-07 20:38:27,977 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,977 - DEBUG --- f1: [(326, 124), (124, 352), (352, 326)]
2016-08-07 20:38:27,977 - DEBUG --- f2: [(124, 326), (326, 348), (348, 340), (340, 79), (79, 124)]
2016-08-07 20:38:27,977 - DEBUG --- edge_to_remove_on_f1: (326, 124)
2016-08-07 20:38:27,977 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,978 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:27,978 - DEBUG --- Temporary f1_plus_f2: [(326, 348), (348, 340), (340, 79), (79, 124), (124, 352), (352, 326)]
2016-08-07 20:38:27,978 - DEBUG --- f1_plus_f2: [(352, 348), (348, 340), (340, 79), (79, 352)]
2016-08-07 20:38:27,978 - DEBUG --- END: join_faces
2016-08-07 20:38:27,978 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,979 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,979 - DEBUG --- Edge to remove found :-) (326, 124)
2016-08-07 20:38:27,979 - DEBUG --- f1: [(326, 124), (124, 352), (352, 326)]
2016-08-07 20:38:27,979 - DEBUG --- f2: [(124, 326), (326, 348), (348, 340), (340, 79), (79, 124)]
2016-08-07 20:38:27,980 - DEBUG --- f1_plus_f2_temp: [(352, 348), (348, 340), (340, 79), (79, 352)]
2016-08-07 20:38:27,980 - DEBUG --- END 167: test the 0 edge
2016-08-07 20:38:27,980 - INFO --- END 167: Search the right edge to remove. Found: (326, 124)
2016-08-07 20:38:27,980 - INFO --- BEGIN 167: Remove an F3, F4 or F5
2016-08-07 20:38:27,980 - DEBUG --- vertex_to_join_near_v1_on_the_face: 352
2016-08-07 20:38:27,981 - DEBUG --- vertex_to_join_near_v2_on_the_face: 352
2016-08-07 20:38:27,981 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 348
2016-08-07 20:38:27,981 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 79
2016-08-07 20:38:27,981 - DEBUG --- third_face_to_update: [(326, 352), (352, 157), (157, 370), (370, 368), (368, 366), (366, 367), (367, 348), (348, 326)]
2016-08-07 20:38:27,981 - DEBUG --- fourth_face_to_update: [(157, 352), (352, 124), (124, 79), (79, 168), (168, 157)]
2016-08-07 20:38:27,982 - INFO --- ariadne_step: [3, 326, 124, 352, 352, 348, 79]
2016-08-07 20:38:27,982 - INFO --- END 167: Remove an F3, F4 or F5
2016-08-07 20:38:27,982 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,984 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,984 - INFO --- END 167: Main loop
2016-08-07 20:38:27,984 - INFO --- 
2016-08-07 20:38:27,985 - INFO --- BEGIN 168: Main loop
2016-08-07 20:38:27,985 - INFO --- BEGIN 168: Search the right edge to remove
2016-08-07 20:38:27,985 - DEBUG --- BEGIN 168: test the 0 edge
2016-08-07 20:38:27,985 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:27,985 - DEBUG --- edge_to_remove: (157, 352)
2016-08-07 20:38:27,986 - DEBUG --- rotated_edge_to_remove: (352, 157)
2016-08-07 20:38:27,986 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,986 - DEBUG --- f1: [(157, 352), (352, 79), (79, 168), (168, 157)]
2016-08-07 20:38:27,986 - DEBUG --- f2: [(348, 352), (352, 157), (157, 370), (370, 368), (368, 366), (366, 367), (367, 348)]
2016-08-07 20:38:27,986 - DEBUG --- edge_to_remove_on_f1: (157, 352)
2016-08-07 20:38:27,987 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,987 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:27,987 - DEBUG --- Temporary f1_plus_f2: [(157, 370), (370, 368), (368, 366), (366, 367), (367, 348), (348, 352), (352, 79), (79, 168), (168, 157)]
2016-08-07 20:38:27,987 - DEBUG --- f1_plus_f2: [(168, 370), (370, 368), (368, 366), (366, 367), (367, 348), (348, 79), (79, 168)]
2016-08-07 20:38:27,987 - DEBUG --- END: join_faces
2016-08-07 20:38:27,988 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,988 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,988 - DEBUG --- Edge to remove found :-) (157, 352)
2016-08-07 20:38:27,988 - DEBUG --- f1: [(157, 352), (352, 79), (79, 168), (168, 157)]
2016-08-07 20:38:27,988 - DEBUG --- f2: [(348, 352), (352, 157), (157, 370), (370, 368), (368, 366), (366, 367), (367, 348)]
2016-08-07 20:38:27,989 - DEBUG --- f1_plus_f2_temp: [(168, 370), (370, 368), (368, 366), (366, 367), (367, 348), (348, 79), (79, 168)]
2016-08-07 20:38:27,989 - DEBUG --- END 168: test the 0 edge
2016-08-07 20:38:27,989 - INFO --- END 168: Search the right edge to remove. Found: (157, 352)
2016-08-07 20:38:27,989 - INFO --- BEGIN 168: Remove an F3, F4 or F5
2016-08-07 20:38:27,990 - DEBUG --- vertex_to_join_near_v1_on_the_face: 168
2016-08-07 20:38:27,990 - DEBUG --- vertex_to_join_near_v2_on_the_face: 79
2016-08-07 20:38:27,991 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 370
2016-08-07 20:38:27,991 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 348
2016-08-07 20:38:27,991 - DEBUG --- third_face_to_update: [(55, 370), (370, 157), (157, 168), (168, 312), (312, 51), (51, 55)]
2016-08-07 20:38:27,991 - DEBUG --- fourth_face_to_update: [(352, 348), (348, 340), (340, 79), (79, 352)]
2016-08-07 20:38:27,992 - INFO --- ariadne_step: [4, 157, 352, 168, 79, 370, 348]
2016-08-07 20:38:27,992 - INFO --- END 168: Remove an F3, F4 or F5
2016-08-07 20:38:27,992 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:27,994 - DEBUG --- END: check_regularity
2016-08-07 20:38:27,994 - INFO --- END 168: Main loop
2016-08-07 20:38:27,994 - INFO --- 
2016-08-07 20:38:27,994 - INFO --- BEGIN 169: Main loop
2016-08-07 20:38:27,994 - INFO --- BEGIN 169: Search the right edge to remove
2016-08-07 20:38:27,995 - DEBUG --- BEGIN 169: test the 0 edge
2016-08-07 20:38:27,995 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:27,995 - DEBUG --- edge_to_remove: (79, 348)
2016-08-07 20:38:27,995 - DEBUG --- rotated_edge_to_remove: (348, 79)
2016-08-07 20:38:27,996 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:27,996 - DEBUG --- f1: [(79, 348), (348, 340), (340, 79)]
2016-08-07 20:38:27,996 - DEBUG --- f2: [(168, 370), (370, 368), (368, 366), (366, 367), (367, 348), (348, 79), (79, 168)]
2016-08-07 20:38:27,996 - DEBUG --- edge_to_remove_on_f1: (79, 348)
2016-08-07 20:38:27,996 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:27,997 - DEBUG --- index_of_edge_to_remove_on_f2: 5
2016-08-07 20:38:27,997 - DEBUG --- Temporary f1_plus_f2: [(79, 168), (168, 370), (370, 368), (368, 366), (366, 367), (367, 348), (348, 340), (340, 79)]
2016-08-07 20:38:27,997 - DEBUG --- f1_plus_f2: [(340, 168), (168, 370), (370, 368), (368, 366), (366, 367), (367, 340)]
2016-08-07 20:38:27,997 - DEBUG --- END: join_faces
2016-08-07 20:38:27,997 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:27,998 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:27,998 - DEBUG --- Edge to remove found :-) (79, 348)
2016-08-07 20:38:27,998 - DEBUG --- f1: [(79, 348), (348, 340), (340, 79)]
2016-08-07 20:38:27,998 - DEBUG --- f2: [(168, 370), (370, 368), (368, 366), (366, 367), (367, 348), (348, 79), (79, 168)]
2016-08-07 20:38:27,998 - DEBUG --- f1_plus_f2_temp: [(340, 168), (168, 370), (370, 368), (368, 366), (366, 367), (367, 340)]
2016-08-07 20:38:27,999 - DEBUG --- END 169: test the 0 edge
2016-08-07 20:38:27,999 - INFO --- END 169: Search the right edge to remove. Found: (79, 348)
2016-08-07 20:38:27,999 - INFO --- BEGIN 169: Remove an F3, F4 or F5
2016-08-07 20:38:27,999 - DEBUG --- vertex_to_join_near_v1_on_the_face: 340
2016-08-07 20:38:27,999 - DEBUG --- vertex_to_join_near_v2_on_the_face: 340
2016-08-07 20:38:28,000 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 168
2016-08-07 20:38:28,000 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 367
2016-08-07 20:38:28,000 - DEBUG --- third_face_to_update: [(168, 79), (79, 340), (340, 342), (342, 312), (312, 168)]
2016-08-07 20:38:28,000 - DEBUG --- fourth_face_to_update: [(367, 365), (365, 342), (342, 340), (340, 348), (348, 367)]
2016-08-07 20:38:28,000 - INFO --- ariadne_step: [3, 79, 348, 340, 340, 168, 367]
2016-08-07 20:38:28,001 - INFO --- END 169: Remove an F3, F4 or F5
2016-08-07 20:38:28,001 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,002 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,003 - INFO --- END 169: Main loop
2016-08-07 20:38:28,003 - INFO --- 
2016-08-07 20:38:28,003 - INFO --- BEGIN 170: Main loop
2016-08-07 20:38:28,003 - INFO --- BEGIN 170: Search the right edge to remove
2016-08-07 20:38:28,003 - DEBUG --- BEGIN 170: test the 0 edge
2016-08-07 20:38:28,004 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:28,004 - DEBUG --- edge_to_remove: (367, 365)
2016-08-07 20:38:28,004 - DEBUG --- rotated_edge_to_remove: (365, 367)
2016-08-07 20:38:28,004 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,004 - DEBUG --- f1: [(367, 365), (365, 342), (342, 340), (340, 367)]
2016-08-07 20:38:28,005 - DEBUG --- f2: [(365, 367), (367, 366), (366, 379), (379, 381), (381, 365)]
2016-08-07 20:38:28,005 - DEBUG --- edge_to_remove_on_f1: (367, 365)
2016-08-07 20:38:28,006 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,006 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:28,006 - DEBUG --- Temporary f1_plus_f2: [(367, 366), (366, 379), (379, 381), (381, 365), (365, 342), (342, 340), (340, 367)]
2016-08-07 20:38:28,006 - DEBUG --- f1_plus_f2: [(340, 366), (366, 379), (379, 381), (381, 342), (342, 340)]
2016-08-07 20:38:28,006 - DEBUG --- END: join_faces
2016-08-07 20:38:28,007 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,007 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,007 - DEBUG --- Edge to remove found :-) (367, 365)
2016-08-07 20:38:28,007 - DEBUG --- f1: [(367, 365), (365, 342), (342, 340), (340, 367)]
2016-08-07 20:38:28,008 - DEBUG --- f2: [(365, 367), (367, 366), (366, 379), (379, 381), (381, 365)]
2016-08-07 20:38:28,008 - DEBUG --- f1_plus_f2_temp: [(340, 366), (366, 379), (379, 381), (381, 342), (342, 340)]
2016-08-07 20:38:28,008 - DEBUG --- END 170: test the 0 edge
2016-08-07 20:38:28,008 - INFO --- END 170: Search the right edge to remove. Found: (367, 365)
2016-08-07 20:38:28,008 - INFO --- BEGIN 170: Remove an F3, F4 or F5
2016-08-07 20:38:28,009 - DEBUG --- vertex_to_join_near_v1_on_the_face: 340
2016-08-07 20:38:28,009 - DEBUG --- vertex_to_join_near_v2_on_the_face: 342
2016-08-07 20:38:28,009 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 366
2016-08-07 20:38:28,009 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 381
2016-08-07 20:38:28,010 - DEBUG --- third_face_to_update: [(340, 168), (168, 370), (370, 368), (368, 366), (366, 367), (367, 340)]
2016-08-07 20:38:28,013 - DEBUG --- fourth_face_to_update: [(312, 342), (342, 365), (365, 381), (381, 29), (29, 217), (217, 215), (215, 97), (97, 50), (50, 51), (51, 312)]
2016-08-07 20:38:28,013 - INFO --- ariadne_step: [4, 367, 365, 340, 342, 366, 381]
2016-08-07 20:38:28,013 - INFO --- END 170: Remove an F3, F4 or F5
2016-08-07 20:38:28,014 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,016 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,016 - INFO --- END 170: Main loop
2016-08-07 20:38:28,017 - INFO --- 
2016-08-07 20:38:28,017 - INFO --- BEGIN 171: Main loop
2016-08-07 20:38:28,017 - INFO --- BEGIN 171: Search the right edge to remove
2016-08-07 20:38:28,018 - DEBUG --- BEGIN 171: test the 0 edge
2016-08-07 20:38:28,018 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:28,018 - DEBUG --- edge_to_remove: (168, 340)
2016-08-07 20:38:28,018 - DEBUG --- rotated_edge_to_remove: (340, 168)
2016-08-07 20:38:28,019 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,019 - DEBUG --- f1: [(168, 340), (340, 342), (342, 312), (312, 168)]
2016-08-07 20:38:28,019 - DEBUG --- f2: [(340, 168), (168, 370), (370, 368), (368, 366), (366, 340)]
2016-08-07 20:38:28,020 - DEBUG --- edge_to_remove_on_f1: (168, 340)
2016-08-07 20:38:28,020 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,020 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:28,020 - DEBUG --- Temporary f1_plus_f2: [(168, 370), (370, 368), (368, 366), (366, 340), (340, 342), (342, 312), (312, 168)]
2016-08-07 20:38:28,021 - DEBUG --- f1_plus_f2: [(312, 370), (370, 368), (368, 366), (366, 342), (342, 312)]
2016-08-07 20:38:28,021 - DEBUG --- END: join_faces
2016-08-07 20:38:28,021 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,021 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,022 - DEBUG --- Edge to remove found :-) (168, 340)
2016-08-07 20:38:28,022 - DEBUG --- f1: [(168, 340), (340, 342), (342, 312), (312, 168)]
2016-08-07 20:38:28,022 - DEBUG --- f2: [(340, 168), (168, 370), (370, 368), (368, 366), (366, 340)]
2016-08-07 20:38:28,023 - DEBUG --- f1_plus_f2_temp: [(312, 370), (370, 368), (368, 366), (366, 342), (342, 312)]
2016-08-07 20:38:28,023 - DEBUG --- END 171: test the 0 edge
2016-08-07 20:38:28,023 - INFO --- END 171: Search the right edge to remove. Found: (168, 340)
2016-08-07 20:38:28,023 - INFO --- BEGIN 171: Remove an F3, F4 or F5
2016-08-07 20:38:28,024 - DEBUG --- vertex_to_join_near_v1_on_the_face: 312
2016-08-07 20:38:28,025 - DEBUG --- vertex_to_join_near_v2_on_the_face: 342
2016-08-07 20:38:28,025 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 370
2016-08-07 20:38:28,025 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 366
2016-08-07 20:38:28,025 - DEBUG --- third_face_to_update: [(55, 370), (370, 168), (168, 312), (312, 51), (51, 55)]
2016-08-07 20:38:28,026 - DEBUG --- fourth_face_to_update: [(340, 366), (366, 379), (379, 381), (381, 342), (342, 340)]
2016-08-07 20:38:28,026 - INFO --- ariadne_step: [4, 168, 340, 312, 342, 370, 366]
2016-08-07 20:38:28,026 - INFO --- END 171: Remove an F3, F4 or F5
2016-08-07 20:38:28,026 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,028 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,028 - INFO --- END 171: Main loop
2016-08-07 20:38:28,028 - INFO --- 
2016-08-07 20:38:28,028 - INFO --- BEGIN 172: Main loop
2016-08-07 20:38:28,029 - INFO --- BEGIN 172: Search the right edge to remove
2016-08-07 20:38:28,029 - DEBUG --- BEGIN 172: test the 0 edge
2016-08-07 20:38:28,029 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:28,029 - DEBUG --- edge_to_remove: (55, 370)
2016-08-07 20:38:28,030 - DEBUG --- rotated_edge_to_remove: (370, 55)
2016-08-07 20:38:28,030 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,030 - DEBUG --- f1: [(55, 370), (370, 312), (312, 51), (51, 55)]
2016-08-07 20:38:28,030 - DEBUG --- f2: [(55, 54), (54, 391), (391, 368), (368, 370), (370, 55)]
2016-08-07 20:38:28,030 - DEBUG --- edge_to_remove_on_f1: (55, 370)
2016-08-07 20:38:28,031 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,031 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:28,031 - DEBUG --- Temporary f1_plus_f2: [(55, 54), (54, 391), (391, 368), (368, 370), (370, 312), (312, 51), (51, 55)]
2016-08-07 20:38:28,031 - DEBUG --- f1_plus_f2: [(51, 54), (54, 391), (391, 368), (368, 312), (312, 51)]
2016-08-07 20:38:28,031 - DEBUG --- END: join_faces
2016-08-07 20:38:28,032 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,032 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,032 - DEBUG --- Edge to remove found :-) (55, 370)
2016-08-07 20:38:28,032 - DEBUG --- f1: [(55, 370), (370, 312), (312, 51), (51, 55)]
2016-08-07 20:38:28,033 - DEBUG --- f2: [(55, 54), (54, 391), (391, 368), (368, 370), (370, 55)]
2016-08-07 20:38:28,033 - DEBUG --- f1_plus_f2_temp: [(51, 54), (54, 391), (391, 368), (368, 312), (312, 51)]
2016-08-07 20:38:28,033 - DEBUG --- END 172: test the 0 edge
2016-08-07 20:38:28,033 - INFO --- END 172: Search the right edge to remove. Found: (55, 370)
2016-08-07 20:38:28,033 - INFO --- BEGIN 172: Remove an F3, F4 or F5
2016-08-07 20:38:28,034 - DEBUG --- vertex_to_join_near_v1_on_the_face: 51
2016-08-07 20:38:28,034 - DEBUG --- vertex_to_join_near_v2_on_the_face: 312
2016-08-07 20:38:28,034 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 54
2016-08-07 20:38:28,034 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 368
2016-08-07 20:38:28,035 - DEBUG --- third_face_to_update: [(52, 40), (40, 54), (54, 55), (55, 51), (51, 50), (50, 47), (47, 56), (56, 52)]
2016-08-07 20:38:28,035 - DEBUG --- fourth_face_to_update: [(312, 370), (370, 368), (368, 366), (366, 342), (342, 312)]
2016-08-07 20:38:28,035 - INFO --- ariadne_step: [4, 55, 370, 51, 312, 54, 368]
2016-08-07 20:38:28,035 - INFO --- END 172: Remove an F3, F4 or F5
2016-08-07 20:38:28,035 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,037 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,037 - INFO --- END 172: Main loop
2016-08-07 20:38:28,037 - INFO --- 
2016-08-07 20:38:28,038 - INFO --- BEGIN 173: Main loop
2016-08-07 20:38:28,038 - INFO --- BEGIN 173: Search the right edge to remove
2016-08-07 20:38:28,038 - DEBUG --- BEGIN 173: test the 0 edge
2016-08-07 20:38:28,038 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:28,039 - DEBUG --- edge_to_remove: (342, 366)
2016-08-07 20:38:28,039 - DEBUG --- rotated_edge_to_remove: (366, 342)
2016-08-07 20:38:28,039 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,039 - DEBUG --- f1: [(342, 366), (366, 379), (379, 381), (381, 342)]
2016-08-07 20:38:28,039 - DEBUG --- f2: [(312, 368), (368, 366), (366, 342), (342, 312)]
2016-08-07 20:38:28,040 - DEBUG --- edge_to_remove_on_f1: (342, 366)
2016-08-07 20:38:28,040 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,040 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:28,040 - DEBUG --- Temporary f1_plus_f2: [(342, 312), (312, 368), (368, 366), (366, 379), (379, 381), (381, 342)]
2016-08-07 20:38:28,040 - DEBUG --- f1_plus_f2: [(381, 312), (312, 368), (368, 379), (379, 381)]
2016-08-07 20:38:28,041 - DEBUG --- END: join_faces
2016-08-07 20:38:28,041 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,041 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,041 - DEBUG --- Edge to remove found :-) (342, 366)
2016-08-07 20:38:28,042 - DEBUG --- f1: [(342, 366), (366, 379), (379, 381), (381, 342)]
2016-08-07 20:38:28,042 - DEBUG --- f2: [(312, 368), (368, 366), (366, 342), (342, 312)]
2016-08-07 20:38:28,042 - DEBUG --- f1_plus_f2_temp: [(381, 312), (312, 368), (368, 379), (379, 381)]
2016-08-07 20:38:28,042 - DEBUG --- END 173: test the 0 edge
2016-08-07 20:38:28,042 - INFO --- END 173: Search the right edge to remove. Found: (342, 366)
2016-08-07 20:38:28,043 - INFO --- BEGIN 173: Remove an F3, F4 or F5
2016-08-07 20:38:28,043 - DEBUG --- vertex_to_join_near_v1_on_the_face: 381
2016-08-07 20:38:28,043 - DEBUG --- vertex_to_join_near_v2_on_the_face: 379
2016-08-07 20:38:28,043 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 312
2016-08-07 20:38:28,043 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 368
2016-08-07 20:38:28,044 - DEBUG --- third_face_to_update: [(312, 342), (342, 381), (381, 29), (29, 217), (217, 215), (215, 97), (97, 50), (50, 51), (51, 312)]
2016-08-07 20:38:28,044 - DEBUG --- fourth_face_to_update: [(366, 368), (368, 391), (391, 392), (392, 379), (379, 366)]
2016-08-07 20:38:28,044 - INFO --- ariadne_step: [4, 342, 366, 381, 379, 312, 368]
2016-08-07 20:38:28,044 - INFO --- END 173: Remove an F3, F4 or F5
2016-08-07 20:38:28,045 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,046 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,046 - INFO --- END 173: Main loop
2016-08-07 20:38:28,046 - INFO --- 
2016-08-07 20:38:28,046 - INFO --- BEGIN 174: Main loop
2016-08-07 20:38:28,047 - INFO --- BEGIN 174: Search the right edge to remove
2016-08-07 20:38:28,047 - DEBUG --- BEGIN 174: test the 0 edge
2016-08-07 20:38:28,047 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:28,047 - DEBUG --- edge_to_remove: (379, 368)
2016-08-07 20:38:28,047 - DEBUG --- rotated_edge_to_remove: (368, 379)
2016-08-07 20:38:28,048 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,048 - DEBUG --- f1: [(379, 368), (368, 391), (391, 392), (392, 379)]
2016-08-07 20:38:28,049 - DEBUG --- f2: [(381, 312), (312, 368), (368, 379), (379, 381)]
2016-08-07 20:38:28,049 - DEBUG --- edge_to_remove_on_f1: (379, 368)
2016-08-07 20:38:28,049 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,049 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:28,049 - DEBUG --- Temporary f1_plus_f2: [(379, 381), (381, 312), (312, 368), (368, 391), (391, 392), (392, 379)]
2016-08-07 20:38:28,050 - DEBUG --- f1_plus_f2: [(392, 381), (381, 312), (312, 391), (391, 392)]
2016-08-07 20:38:28,050 - DEBUG --- END: join_faces
2016-08-07 20:38:28,050 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,050 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,051 - DEBUG --- Edge to remove found :-) (379, 368)
2016-08-07 20:38:28,051 - DEBUG --- f1: [(379, 368), (368, 391), (391, 392), (392, 379)]
2016-08-07 20:38:28,051 - DEBUG --- f2: [(381, 312), (312, 368), (368, 379), (379, 381)]
2016-08-07 20:38:28,051 - DEBUG --- f1_plus_f2_temp: [(392, 381), (381, 312), (312, 391), (391, 392)]
2016-08-07 20:38:28,051 - DEBUG --- END 174: test the 0 edge
2016-08-07 20:38:28,052 - INFO --- END 174: Search the right edge to remove. Found: (379, 368)
2016-08-07 20:38:28,052 - INFO --- BEGIN 174: Remove an F3, F4 or F5
2016-08-07 20:38:28,052 - DEBUG --- vertex_to_join_near_v1_on_the_face: 392
2016-08-07 20:38:28,052 - DEBUG --- vertex_to_join_near_v2_on_the_face: 391
2016-08-07 20:38:28,052 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 381
2016-08-07 20:38:28,053 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 312
2016-08-07 20:38:28,053 - DEBUG --- third_face_to_update: [(392, 31), (31, 29), (29, 381), (381, 379), (379, 392)]
2016-08-07 20:38:28,053 - DEBUG --- fourth_face_to_update: [(51, 54), (54, 391), (391, 368), (368, 312), (312, 51)]
2016-08-07 20:38:28,053 - INFO --- ariadne_step: [4, 379, 368, 392, 391, 381, 312]
2016-08-07 20:38:28,053 - INFO --- END 174: Remove an F3, F4 or F5
2016-08-07 20:38:28,054 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,055 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,055 - INFO --- END 174: Main loop
2016-08-07 20:38:28,055 - INFO --- 
2016-08-07 20:38:28,055 - INFO --- BEGIN 175: Main loop
2016-08-07 20:38:28,056 - INFO --- BEGIN 175: Search the right edge to remove
2016-08-07 20:38:28,056 - DEBUG --- BEGIN 175: test the 0 edge
2016-08-07 20:38:28,056 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:28,056 - DEBUG --- edge_to_remove: (392, 31)
2016-08-07 20:38:28,056 - DEBUG --- rotated_edge_to_remove: (31, 392)
2016-08-07 20:38:28,057 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,057 - DEBUG --- f1: [(392, 31), (31, 29), (29, 381), (381, 392)]
2016-08-07 20:38:28,057 - DEBUG --- f2: [(391, 54), (54, 40), (40, 31), (31, 392), (392, 391)]
2016-08-07 20:38:28,057 - DEBUG --- edge_to_remove_on_f1: (392, 31)
2016-08-07 20:38:28,057 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,058 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:28,058 - DEBUG --- Temporary f1_plus_f2: [(392, 391), (391, 54), (54, 40), (40, 31), (31, 29), (29, 381), (381, 392)]
2016-08-07 20:38:28,058 - DEBUG --- f1_plus_f2: [(381, 391), (391, 54), (54, 40), (40, 29), (29, 381)]
2016-08-07 20:38:28,058 - DEBUG --- END: join_faces
2016-08-07 20:38:28,058 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,059 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,059 - DEBUG --- Edge to remove found :-) (392, 31)
2016-08-07 20:38:28,059 - DEBUG --- f1: [(392, 31), (31, 29), (29, 381), (381, 392)]
2016-08-07 20:38:28,059 - DEBUG --- f2: [(391, 54), (54, 40), (40, 31), (31, 392), (392, 391)]
2016-08-07 20:38:28,059 - DEBUG --- f1_plus_f2_temp: [(381, 391), (391, 54), (54, 40), (40, 29), (29, 381)]
2016-08-07 20:38:28,060 - DEBUG --- END 175: test the 0 edge
2016-08-07 20:38:28,060 - INFO --- END 175: Search the right edge to remove. Found: (392, 31)
2016-08-07 20:38:28,060 - INFO --- BEGIN 175: Remove an F3, F4 or F5
2016-08-07 20:38:28,060 - DEBUG --- vertex_to_join_near_v1_on_the_face: 381
2016-08-07 20:38:28,060 - DEBUG --- vertex_to_join_near_v2_on_the_face: 29
2016-08-07 20:38:28,061 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 391
2016-08-07 20:38:28,061 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 40
2016-08-07 20:38:28,061 - DEBUG --- third_face_to_update: [(392, 381), (381, 312), (312, 391), (391, 392)]
2016-08-07 20:38:28,061 - DEBUG --- fourth_face_to_update: [(40, 52), (52, 231), (231, 228), (228, 225), (225, 217), (217, 29), (29, 31), (31, 40)]
2016-08-07 20:38:28,061 - INFO --- ariadne_step: [4, 392, 31, 381, 29, 391, 40]
2016-08-07 20:38:28,062 - INFO --- END 175: Remove an F3, F4 or F5
2016-08-07 20:38:28,062 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,063 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,063 - INFO --- END 175: Main loop
2016-08-07 20:38:28,063 - INFO --- 
2016-08-07 20:38:28,064 - INFO --- BEGIN 176: Main loop
2016-08-07 20:38:28,064 - INFO --- BEGIN 176: Search the right edge to remove
2016-08-07 20:38:28,064 - DEBUG --- BEGIN 176: test the 0 edge
2016-08-07 20:38:28,064 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:28,064 - DEBUG --- edge_to_remove: (391, 381)
2016-08-07 20:38:28,065 - DEBUG --- rotated_edge_to_remove: (381, 391)
2016-08-07 20:38:28,065 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,065 - DEBUG --- f1: [(391, 381), (381, 312), (312, 391)]
2016-08-07 20:38:28,065 - DEBUG --- f2: [(381, 391), (391, 54), (54, 40), (40, 29), (29, 381)]
2016-08-07 20:38:28,066 - DEBUG --- edge_to_remove_on_f1: (391, 381)
2016-08-07 20:38:28,066 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,067 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:28,067 - DEBUG --- Temporary f1_plus_f2: [(391, 54), (54, 40), (40, 29), (29, 381), (381, 312), (312, 391)]
2016-08-07 20:38:28,067 - DEBUG --- f1_plus_f2: [(312, 54), (54, 40), (40, 29), (29, 312)]
2016-08-07 20:38:28,067 - DEBUG --- END: join_faces
2016-08-07 20:38:28,068 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,068 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,068 - DEBUG --- Edge to remove found :-) (391, 381)
2016-08-07 20:38:28,068 - DEBUG --- f1: [(391, 381), (381, 312), (312, 391)]
2016-08-07 20:38:28,068 - DEBUG --- f2: [(381, 391), (391, 54), (54, 40), (40, 29), (29, 381)]
2016-08-07 20:38:28,069 - DEBUG --- f1_plus_f2_temp: [(312, 54), (54, 40), (40, 29), (29, 312)]
2016-08-07 20:38:28,069 - DEBUG --- END 176: test the 0 edge
2016-08-07 20:38:28,069 - INFO --- END 176: Search the right edge to remove. Found: (391, 381)
2016-08-07 20:38:28,069 - INFO --- BEGIN 176: Remove an F3, F4 or F5
2016-08-07 20:38:28,069 - DEBUG --- vertex_to_join_near_v1_on_the_face: 312
2016-08-07 20:38:28,070 - DEBUG --- vertex_to_join_near_v2_on_the_face: 312
2016-08-07 20:38:28,070 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 54
2016-08-07 20:38:28,070 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 29
2016-08-07 20:38:28,070 - DEBUG --- third_face_to_update: [(51, 54), (54, 391), (391, 312), (312, 51)]
2016-08-07 20:38:28,070 - DEBUG --- fourth_face_to_update: [(312, 381), (381, 29), (29, 217), (217, 215), (215, 97), (97, 50), (50, 51), (51, 312)]
2016-08-07 20:38:28,071 - INFO --- ariadne_step: [3, 391, 381, 312, 312, 54, 29]
2016-08-07 20:38:28,071 - INFO --- END 176: Remove an F3, F4 or F5
2016-08-07 20:38:28,071 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,072 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,072 - INFO --- END 176: Main loop
2016-08-07 20:38:28,072 - INFO --- 
2016-08-07 20:38:28,072 - INFO --- BEGIN 177: Main loop
2016-08-07 20:38:28,073 - INFO --- BEGIN 177: Search the right edge to remove
2016-08-07 20:38:28,073 - DEBUG --- BEGIN 177: test the 0 edge
2016-08-07 20:38:28,073 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:28,073 - DEBUG --- edge_to_remove: (51, 54)
2016-08-07 20:38:28,074 - DEBUG --- rotated_edge_to_remove: (54, 51)
2016-08-07 20:38:28,074 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,074 - DEBUG --- f1: [(51, 54), (54, 312), (312, 51)]
2016-08-07 20:38:28,074 - DEBUG --- f2: [(52, 40), (40, 54), (54, 51), (51, 50), (50, 47), (47, 56), (56, 52)]
2016-08-07 20:38:28,074 - DEBUG --- edge_to_remove_on_f1: (51, 54)
2016-08-07 20:38:28,075 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,075 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:28,075 - DEBUG --- Temporary f1_plus_f2: [(51, 50), (50, 47), (47, 56), (56, 52), (52, 40), (40, 54), (54, 312), (312, 51)]
2016-08-07 20:38:28,075 - DEBUG --- f1_plus_f2: [(312, 50), (50, 47), (47, 56), (56, 52), (52, 40), (40, 312)]
2016-08-07 20:38:28,075 - DEBUG --- END: join_faces
2016-08-07 20:38:28,076 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,076 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,076 - DEBUG --- Edge to remove found :-) (51, 54)
2016-08-07 20:38:28,076 - DEBUG --- f1: [(51, 54), (54, 312), (312, 51)]
2016-08-07 20:38:28,077 - DEBUG --- f2: [(52, 40), (40, 54), (54, 51), (51, 50), (50, 47), (47, 56), (56, 52)]
2016-08-07 20:38:28,077 - DEBUG --- f1_plus_f2_temp: [(312, 50), (50, 47), (47, 56), (56, 52), (52, 40), (40, 312)]
2016-08-07 20:38:28,077 - DEBUG --- END 177: test the 0 edge
2016-08-07 20:38:28,077 - INFO --- END 177: Search the right edge to remove. Found: (51, 54)
2016-08-07 20:38:28,077 - INFO --- BEGIN 177: Remove an F3, F4 or F5
2016-08-07 20:38:28,077 - DEBUG --- vertex_to_join_near_v1_on_the_face: 312
2016-08-07 20:38:28,078 - DEBUG --- vertex_to_join_near_v2_on_the_face: 312
2016-08-07 20:38:28,078 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 50
2016-08-07 20:38:28,078 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 40
2016-08-07 20:38:28,078 - DEBUG --- third_face_to_update: [(312, 29), (29, 217), (217, 215), (215, 97), (97, 50), (50, 51), (51, 312)]
2016-08-07 20:38:28,078 - DEBUG --- fourth_face_to_update: [(312, 54), (54, 40), (40, 29), (29, 312)]
2016-08-07 20:38:28,079 - INFO --- ariadne_step: [3, 51, 54, 312, 312, 50, 40]
2016-08-07 20:38:28,079 - INFO --- END 177: Remove an F3, F4 or F5
2016-08-07 20:38:28,079 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,080 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,080 - INFO --- END 177: Main loop
2016-08-07 20:38:28,080 - INFO --- 
2016-08-07 20:38:28,081 - INFO --- BEGIN 178: Main loop
2016-08-07 20:38:28,081 - INFO --- BEGIN 178: Search the right edge to remove
2016-08-07 20:38:28,081 - DEBUG --- BEGIN 178: test the 0 edge
2016-08-07 20:38:28,081 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:28,081 - DEBUG --- edge_to_remove: (312, 40)
2016-08-07 20:38:28,082 - DEBUG --- rotated_edge_to_remove: (40, 312)
2016-08-07 20:38:28,082 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,082 - DEBUG --- f1: [(312, 40), (40, 29), (29, 312)]
2016-08-07 20:38:28,082 - DEBUG --- f2: [(312, 50), (50, 47), (47, 56), (56, 52), (52, 40), (40, 312)]
2016-08-07 20:38:28,082 - DEBUG --- edge_to_remove_on_f1: (312, 40)
2016-08-07 20:38:28,083 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,083 - DEBUG --- index_of_edge_to_remove_on_f2: 5
2016-08-07 20:38:28,083 - DEBUG --- Temporary f1_plus_f2: [(312, 50), (50, 47), (47, 56), (56, 52), (52, 40), (40, 29), (29, 312)]
2016-08-07 20:38:28,083 - DEBUG --- f1_plus_f2: [(29, 50), (50, 47), (47, 56), (56, 52), (52, 29)]
2016-08-07 20:38:28,083 - DEBUG --- END: join_faces
2016-08-07 20:38:28,084 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,084 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,085 - DEBUG --- Edge to remove found :-) (312, 40)
2016-08-07 20:38:28,085 - DEBUG --- f1: [(312, 40), (40, 29), (29, 312)]
2016-08-07 20:38:28,085 - DEBUG --- f2: [(312, 50), (50, 47), (47, 56), (56, 52), (52, 40), (40, 312)]
2016-08-07 20:38:28,085 - DEBUG --- f1_plus_f2_temp: [(29, 50), (50, 47), (47, 56), (56, 52), (52, 29)]
2016-08-07 20:38:28,086 - DEBUG --- END 178: test the 0 edge
2016-08-07 20:38:28,086 - INFO --- END 178: Search the right edge to remove. Found: (312, 40)
2016-08-07 20:38:28,086 - INFO --- BEGIN 178: Remove an F3, F4 or F5
2016-08-07 20:38:28,086 - DEBUG --- vertex_to_join_near_v1_on_the_face: 29
2016-08-07 20:38:28,086 - DEBUG --- vertex_to_join_near_v2_on_the_face: 29
2016-08-07 20:38:28,086 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 50
2016-08-07 20:38:28,087 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 52
2016-08-07 20:38:28,087 - DEBUG --- third_face_to_update: [(312, 29), (29, 217), (217, 215), (215, 97), (97, 50), (50, 312)]
2016-08-07 20:38:28,087 - DEBUG --- fourth_face_to_update: [(40, 52), (52, 231), (231, 228), (228, 225), (225, 217), (217, 29), (29, 40)]
2016-08-07 20:38:28,087 - INFO --- ariadne_step: [3, 312, 40, 29, 29, 50, 52]
2016-08-07 20:38:28,088 - INFO --- END 178: Remove an F3, F4 or F5
2016-08-07 20:38:28,088 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,089 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,089 - INFO --- END 178: Main loop
2016-08-07 20:38:28,089 - INFO --- 
2016-08-07 20:38:28,089 - INFO --- BEGIN 179: Main loop
2016-08-07 20:38:28,089 - INFO --- BEGIN 179: Search the right edge to remove
2016-08-07 20:38:28,090 - DEBUG --- BEGIN 179: test the 0 edge
2016-08-07 20:38:28,090 - DEBUG --- len_of_the_face_to_reduce: 5
2016-08-07 20:38:28,090 - DEBUG --- edge_to_remove: (258, 62)
2016-08-07 20:38:28,090 - DEBUG --- rotated_edge_to_remove: (62, 258)
2016-08-07 20:38:28,090 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,091 - DEBUG --- f1: [(258, 62), (62, 63), (63, 71), (71, 259), (259, 258)]
2016-08-07 20:38:28,091 - DEBUG --- f2: [(56, 62), (62, 258), (258, 231), (231, 52), (52, 56)]
2016-08-07 20:38:28,091 - DEBUG --- edge_to_remove_on_f1: (258, 62)
2016-08-07 20:38:28,091 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,092 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:28,092 - DEBUG --- Temporary f1_plus_f2: [(258, 231), (231, 52), (52, 56), (56, 62), (62, 63), (63, 71), (71, 259), (259, 258)]
2016-08-07 20:38:28,092 - DEBUG --- f1_plus_f2: [(259, 231), (231, 52), (52, 56), (56, 63), (63, 71), (71, 259)]
2016-08-07 20:38:28,092 - DEBUG --- END: join_faces
2016-08-07 20:38:28,092 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,093 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,093 - DEBUG --- Edge to remove found :-) (258, 62)
2016-08-07 20:38:28,093 - DEBUG --- f1: [(258, 62), (62, 63), (63, 71), (71, 259), (259, 258)]
2016-08-07 20:38:28,093 - DEBUG --- f2: [(56, 62), (62, 258), (258, 231), (231, 52), (52, 56)]
2016-08-07 20:38:28,093 - DEBUG --- f1_plus_f2_temp: [(259, 231), (231, 52), (52, 56), (56, 63), (63, 71), (71, 259)]
2016-08-07 20:38:28,094 - DEBUG --- END 179: test the 0 edge
2016-08-07 20:38:28,094 - INFO --- END 179: Search the right edge to remove. Found: (258, 62)
2016-08-07 20:38:28,094 - INFO --- BEGIN 179: Remove an F3, F4 or F5
2016-08-07 20:38:28,094 - DEBUG --- vertex_to_join_near_v1_on_the_face: 259
2016-08-07 20:38:28,094 - DEBUG --- vertex_to_join_near_v2_on_the_face: 63
2016-08-07 20:38:28,095 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 231
2016-08-07 20:38:28,095 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 56
2016-08-07 20:38:28,095 - DEBUG --- third_face_to_update: [(242, 228), (228, 231), (231, 258), (258, 259), (259, 213), (213, 242)]
2016-08-07 20:38:28,095 - DEBUG --- fourth_face_to_update: [(106, 59), (59, 63), (63, 62), (62, 56), (56, 47), (47, 99), (99, 106)]
2016-08-07 20:38:28,095 - INFO --- ariadne_step: [5, 258, 62, 259, 63, 231, 56]
2016-08-07 20:38:28,096 - INFO --- END 179: Remove an F3, F4 or F5
2016-08-07 20:38:28,096 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,097 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,097 - INFO --- END 179: Main loop
2016-08-07 20:38:28,097 - INFO --- 
2016-08-07 20:38:28,097 - INFO --- BEGIN 180: Main loop
2016-08-07 20:38:28,097 - INFO --- BEGIN 180: Search the right edge to remove
2016-08-07 20:38:28,098 - DEBUG --- BEGIN 180: test the 0 edge
2016-08-07 20:38:28,098 - DEBUG --- len_of_the_face_to_reduce: 5
2016-08-07 20:38:28,098 - DEBUG --- edge_to_remove: (215, 217)
2016-08-07 20:38:28,098 - DEBUG --- rotated_edge_to_remove: (217, 215)
2016-08-07 20:38:28,099 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,099 - DEBUG --- f1: [(215, 217), (217, 225), (225, 165), (165, 163), (163, 215)]
2016-08-07 20:38:28,099 - DEBUG --- f2: [(50, 29), (29, 217), (217, 215), (215, 97), (97, 50)]
2016-08-07 20:38:28,099 - DEBUG --- edge_to_remove_on_f1: (215, 217)
2016-08-07 20:38:28,099 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,100 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:28,100 - DEBUG --- Temporary f1_plus_f2: [(215, 97), (97, 50), (50, 29), (29, 217), (217, 225), (225, 165), (165, 163), (163, 215)]
2016-08-07 20:38:28,100 - DEBUG --- f1_plus_f2: [(163, 97), (97, 50), (50, 29), (29, 225), (225, 165), (165, 163)]
2016-08-07 20:38:28,100 - DEBUG --- END: join_faces
2016-08-07 20:38:28,100 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,101 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,101 - DEBUG --- Edge to remove found :-) (215, 217)
2016-08-07 20:38:28,101 - DEBUG --- f1: [(215, 217), (217, 225), (225, 165), (165, 163), (163, 215)]
2016-08-07 20:38:28,101 - DEBUG --- f2: [(50, 29), (29, 217), (217, 215), (215, 97), (97, 50)]
2016-08-07 20:38:28,101 - DEBUG --- f1_plus_f2_temp: [(163, 97), (97, 50), (50, 29), (29, 225), (225, 165), (165, 163)]
2016-08-07 20:38:28,102 - DEBUG --- END 180: test the 0 edge
2016-08-07 20:38:28,102 - INFO --- END 180: Search the right edge to remove. Found: (215, 217)
2016-08-07 20:38:28,102 - INFO --- BEGIN 180: Remove an F3, F4 or F5
2016-08-07 20:38:28,102 - DEBUG --- vertex_to_join_near_v1_on_the_face: 163
2016-08-07 20:38:28,102 - DEBUG --- vertex_to_join_near_v2_on_the_face: 225
2016-08-07 20:38:28,103 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 97
2016-08-07 20:38:28,103 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 29
2016-08-07 20:38:28,103 - DEBUG --- third_face_to_update: [(150, 103), (103, 92), (92, 97), (97, 215), (215, 163), (163, 156), (156, 150)]
2016-08-07 20:38:28,103 - DEBUG --- fourth_face_to_update: [(29, 52), (52, 231), (231, 228), (228, 225), (225, 217), (217, 29)]
2016-08-07 20:38:28,103 - INFO --- ariadne_step: [5, 215, 217, 163, 225, 97, 29]
2016-08-07 20:38:28,104 - INFO --- END 180: Remove an F3, F4 or F5
2016-08-07 20:38:28,104 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,105 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,105 - INFO --- END 180: Main loop
2016-08-07 20:38:28,105 - INFO --- 
2016-08-07 20:38:28,105 - INFO --- BEGIN 181: Main loop
2016-08-07 20:38:28,105 - INFO --- BEGIN 181: Search the right edge to remove
2016-08-07 20:38:28,105 - DEBUG --- BEGIN 181: test the 0 edge
2016-08-07 20:38:28,106 - DEBUG --- len_of_the_face_to_reduce: 5
2016-08-07 20:38:28,106 - DEBUG --- edge_to_remove: (140, 103)
2016-08-07 20:38:28,106 - DEBUG --- rotated_edge_to_remove: (103, 140)
2016-08-07 20:38:28,106 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,106 - DEBUG --- f1: [(140, 103), (103, 150), (150, 119), (119, 107), (107, 140)]
2016-08-07 20:38:28,107 - DEBUG --- f2: [(106, 99), (99, 92), (92, 103), (103, 140), (140, 106)]
2016-08-07 20:38:28,107 - DEBUG --- edge_to_remove_on_f1: (140, 103)
2016-08-07 20:38:28,107 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,107 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:28,107 - DEBUG --- Temporary f1_plus_f2: [(140, 106), (106, 99), (99, 92), (92, 103), (103, 150), (150, 119), (119, 107), (107, 140)]
2016-08-07 20:38:28,108 - DEBUG --- f1_plus_f2: [(107, 106), (106, 99), (99, 92), (92, 150), (150, 119), (119, 107)]
2016-08-07 20:38:28,108 - DEBUG --- END: join_faces
2016-08-07 20:38:28,108 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,108 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,108 - DEBUG --- Edge to remove found :-) (140, 103)
2016-08-07 20:38:28,108 - DEBUG --- f1: [(140, 103), (103, 150), (150, 119), (119, 107), (107, 140)]
2016-08-07 20:38:28,109 - DEBUG --- f2: [(106, 99), (99, 92), (92, 103), (103, 140), (140, 106)]
2016-08-07 20:38:28,109 - DEBUG --- f1_plus_f2_temp: [(107, 106), (106, 99), (99, 92), (92, 150), (150, 119), (119, 107)]
2016-08-07 20:38:28,109 - DEBUG --- END 181: test the 0 edge
2016-08-07 20:38:28,109 - INFO --- END 181: Search the right edge to remove. Found: (140, 103)
2016-08-07 20:38:28,110 - INFO --- BEGIN 181: Remove an F3, F4 or F5
2016-08-07 20:38:28,110 - DEBUG --- vertex_to_join_near_v1_on_the_face: 107
2016-08-07 20:38:28,110 - DEBUG --- vertex_to_join_near_v2_on_the_face: 150
2016-08-07 20:38:28,110 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 106
2016-08-07 20:38:28,110 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 92
2016-08-07 20:38:28,110 - DEBUG --- third_face_to_update: [(140, 107), (107, 70), (70, 59), (59, 106), (106, 140)]
2016-08-07 20:38:28,111 - DEBUG --- fourth_face_to_update: [(150, 103), (103, 92), (92, 97), (97, 163), (163, 156), (156, 150)]
2016-08-07 20:38:28,111 - INFO --- ariadne_step: [5, 140, 103, 107, 150, 106, 92]
2016-08-07 20:38:28,111 - INFO --- END 181: Remove an F3, F4 or F5
2016-08-07 20:38:28,111 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,112 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,112 - INFO --- END 181: Main loop
2016-08-07 20:38:28,112 - INFO --- 
2016-08-07 20:38:28,112 - INFO --- BEGIN 182: Main loop
2016-08-07 20:38:28,113 - INFO --- BEGIN 182: Search the right edge to remove
2016-08-07 20:38:28,113 - DEBUG --- BEGIN 182: test the 0 edge
2016-08-07 20:38:28,113 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:28,113 - DEBUG --- edge_to_remove: (106, 107)
2016-08-07 20:38:28,113 - DEBUG --- rotated_edge_to_remove: (107, 106)
2016-08-07 20:38:28,113 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,114 - DEBUG --- f1: [(106, 107), (107, 70), (70, 59), (59, 106)]
2016-08-07 20:38:28,114 - DEBUG --- f2: [(107, 106), (106, 99), (99, 92), (92, 150), (150, 119), (119, 107)]
2016-08-07 20:38:28,114 - DEBUG --- edge_to_remove_on_f1: (106, 107)
2016-08-07 20:38:28,114 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,114 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:28,115 - DEBUG --- Temporary f1_plus_f2: [(106, 99), (99, 92), (92, 150), (150, 119), (119, 107), (107, 70), (70, 59), (59, 106)]
2016-08-07 20:38:28,115 - DEBUG --- f1_plus_f2: [(59, 99), (99, 92), (92, 150), (150, 119), (119, 70), (70, 59)]
2016-08-07 20:38:28,116 - DEBUG --- END: join_faces
2016-08-07 20:38:28,116 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,116 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,116 - DEBUG --- Edge to remove found :-) (106, 107)
2016-08-07 20:38:28,116 - DEBUG --- f1: [(106, 107), (107, 70), (70, 59), (59, 106)]
2016-08-07 20:38:28,117 - DEBUG --- f2: [(107, 106), (106, 99), (99, 92), (92, 150), (150, 119), (119, 107)]
2016-08-07 20:38:28,117 - DEBUG --- f1_plus_f2_temp: [(59, 99), (99, 92), (92, 150), (150, 119), (119, 70), (70, 59)]
2016-08-07 20:38:28,117 - DEBUG --- END 182: test the 0 edge
2016-08-07 20:38:28,117 - INFO --- END 182: Search the right edge to remove. Found: (106, 107)
2016-08-07 20:38:28,117 - INFO --- BEGIN 182: Remove an F3, F4 or F5
2016-08-07 20:38:28,118 - DEBUG --- vertex_to_join_near_v1_on_the_face: 59
2016-08-07 20:38:28,118 - DEBUG --- vertex_to_join_near_v2_on_the_face: 70
2016-08-07 20:38:28,118 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 99
2016-08-07 20:38:28,118 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 119
2016-08-07 20:38:28,118 - DEBUG --- third_face_to_update: [(106, 59), (59, 63), (63, 56), (56, 47), (47, 99), (99, 106)]
2016-08-07 20:38:28,119 - DEBUG --- fourth_face_to_update: [(126, 64), (64, 70), (70, 107), (107, 119), (119, 123), (123, 126)]
2016-08-07 20:38:28,119 - INFO --- ariadne_step: [4, 106, 107, 59, 70, 99, 119]
2016-08-07 20:38:28,119 - INFO --- END 182: Remove an F3, F4 or F5
2016-08-07 20:38:28,119 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,120 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,120 - INFO --- END 182: Main loop
2016-08-07 20:38:28,120 - INFO --- 
2016-08-07 20:38:28,120 - INFO --- BEGIN 183: Main loop
2016-08-07 20:38:28,121 - INFO --- BEGIN 183: Search the right edge to remove
2016-08-07 20:38:28,121 - DEBUG --- BEGIN 183: test the 0 edge
2016-08-07 20:38:28,121 - DEBUG --- len_of_the_face_to_reduce: 5
2016-08-07 20:38:28,121 - DEBUG --- edge_to_remove: (99, 47)
2016-08-07 20:38:28,121 - DEBUG --- rotated_edge_to_remove: (47, 99)
2016-08-07 20:38:28,122 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,122 - DEBUG --- f1: [(99, 47), (47, 50), (50, 97), (97, 92), (92, 99)]
2016-08-07 20:38:28,122 - DEBUG --- f2: [(99, 59), (59, 63), (63, 56), (56, 47), (47, 99)]
2016-08-07 20:38:28,122 - DEBUG --- edge_to_remove_on_f1: (99, 47)
2016-08-07 20:38:28,122 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,122 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:28,123 - DEBUG --- Temporary f1_plus_f2: [(99, 59), (59, 63), (63, 56), (56, 47), (47, 50), (50, 97), (97, 92), (92, 99)]
2016-08-07 20:38:28,123 - DEBUG --- f1_plus_f2: [(92, 59), (59, 63), (63, 56), (56, 50), (50, 97), (97, 92)]
2016-08-07 20:38:28,123 - DEBUG --- END: join_faces
2016-08-07 20:38:28,123 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,123 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,124 - DEBUG --- Edge to remove found :-) (99, 47)
2016-08-07 20:38:28,124 - DEBUG --- f1: [(99, 47), (47, 50), (50, 97), (97, 92), (92, 99)]
2016-08-07 20:38:28,124 - DEBUG --- f2: [(99, 59), (59, 63), (63, 56), (56, 47), (47, 99)]
2016-08-07 20:38:28,124 - DEBUG --- f1_plus_f2_temp: [(92, 59), (59, 63), (63, 56), (56, 50), (50, 97), (97, 92)]
2016-08-07 20:38:28,124 - DEBUG --- END 183: test the 0 edge
2016-08-07 20:38:28,124 - INFO --- END 183: Search the right edge to remove. Found: (99, 47)
2016-08-07 20:38:28,125 - INFO --- BEGIN 183: Remove an F3, F4 or F5
2016-08-07 20:38:28,125 - DEBUG --- vertex_to_join_near_v1_on_the_face: 92
2016-08-07 20:38:28,125 - DEBUG --- vertex_to_join_near_v2_on_the_face: 50
2016-08-07 20:38:28,125 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 59
2016-08-07 20:38:28,125 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 56
2016-08-07 20:38:28,126 - DEBUG --- third_face_to_update: [(59, 99), (99, 92), (92, 150), (150, 119), (119, 70), (70, 59)]
2016-08-07 20:38:28,126 - DEBUG --- fourth_face_to_update: [(29, 50), (50, 47), (47, 56), (56, 52), (52, 29)]
2016-08-07 20:38:28,126 - INFO --- ariadne_step: [5, 99, 47, 92, 50, 59, 56]
2016-08-07 20:38:28,126 - INFO --- END 183: Remove an F3, F4 or F5
2016-08-07 20:38:28,126 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,127 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,127 - INFO --- END 183: Main loop
2016-08-07 20:38:28,127 - INFO --- 
2016-08-07 20:38:28,127 - INFO --- BEGIN 184: Main loop
2016-08-07 20:38:28,128 - INFO --- BEGIN 184: Search the right edge to remove
2016-08-07 20:38:28,128 - DEBUG --- BEGIN 184: test the 0 edge
2016-08-07 20:38:28,128 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:28,128 - DEBUG --- edge_to_remove: (29, 50)
2016-08-07 20:38:28,128 - DEBUG --- rotated_edge_to_remove: (50, 29)
2016-08-07 20:38:28,129 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,129 - DEBUG --- f1: [(29, 50), (50, 56), (56, 52), (52, 29)]
2016-08-07 20:38:28,129 - DEBUG --- f2: [(163, 97), (97, 50), (50, 29), (29, 225), (225, 165), (165, 163)]
2016-08-07 20:38:28,129 - DEBUG --- edge_to_remove_on_f1: (29, 50)
2016-08-07 20:38:28,129 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,129 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:28,130 - DEBUG --- Temporary f1_plus_f2: [(29, 225), (225, 165), (165, 163), (163, 97), (97, 50), (50, 56), (56, 52), (52, 29)]
2016-08-07 20:38:28,130 - DEBUG --- f1_plus_f2: [(52, 225), (225, 165), (165, 163), (163, 97), (97, 56), (56, 52)]
2016-08-07 20:38:28,130 - DEBUG --- END: join_faces
2016-08-07 20:38:28,130 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,130 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,131 - DEBUG --- Edge to remove found :-) (29, 50)
2016-08-07 20:38:28,131 - DEBUG --- f1: [(29, 50), (50, 56), (56, 52), (52, 29)]
2016-08-07 20:38:28,132 - DEBUG --- f2: [(163, 97), (97, 50), (50, 29), (29, 225), (225, 165), (165, 163)]
2016-08-07 20:38:28,132 - DEBUG --- f1_plus_f2_temp: [(52, 225), (225, 165), (165, 163), (163, 97), (97, 56), (56, 52)]
2016-08-07 20:38:28,132 - DEBUG --- END 184: test the 0 edge
2016-08-07 20:38:28,132 - INFO --- END 184: Search the right edge to remove. Found: (29, 50)
2016-08-07 20:38:28,132 - INFO --- BEGIN 184: Remove an F3, F4 or F5
2016-08-07 20:38:28,133 - DEBUG --- vertex_to_join_near_v1_on_the_face: 52
2016-08-07 20:38:28,133 - DEBUG --- vertex_to_join_near_v2_on_the_face: 56
2016-08-07 20:38:28,133 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 225
2016-08-07 20:38:28,133 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 97
2016-08-07 20:38:28,133 - DEBUG --- third_face_to_update: [(29, 52), (52, 231), (231, 228), (228, 225), (225, 29)]
2016-08-07 20:38:28,134 - DEBUG --- fourth_face_to_update: [(92, 59), (59, 63), (63, 56), (56, 50), (50, 97), (97, 92)]
2016-08-07 20:38:28,134 - INFO --- ariadne_step: [4, 29, 50, 52, 56, 225, 97]
2016-08-07 20:38:28,134 - INFO --- END 184: Remove an F3, F4 or F5
2016-08-07 20:38:28,134 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,135 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,135 - INFO --- END 184: Main loop
2016-08-07 20:38:28,136 - INFO --- 
2016-08-07 20:38:28,136 - INFO --- BEGIN 185: Main loop
2016-08-07 20:38:28,136 - INFO --- BEGIN 185: Search the right edge to remove
2016-08-07 20:38:28,136 - DEBUG --- BEGIN 185: test the 0 edge
2016-08-07 20:38:28,136 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:28,137 - DEBUG --- edge_to_remove: (225, 52)
2016-08-07 20:38:28,137 - DEBUG --- rotated_edge_to_remove: (52, 225)
2016-08-07 20:38:28,137 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,137 - DEBUG --- f1: [(225, 52), (52, 231), (231, 228), (228, 225)]
2016-08-07 20:38:28,138 - DEBUG --- f2: [(52, 225), (225, 165), (165, 163), (163, 97), (97, 56), (56, 52)]
2016-08-07 20:38:28,138 - DEBUG --- edge_to_remove_on_f1: (225, 52)
2016-08-07 20:38:28,138 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,139 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:28,139 - DEBUG --- Temporary f1_plus_f2: [(225, 165), (165, 163), (163, 97), (97, 56), (56, 52), (52, 231), (231, 228), (228, 225)]
2016-08-07 20:38:28,139 - DEBUG --- f1_plus_f2: [(228, 165), (165, 163), (163, 97), (97, 56), (56, 231), (231, 228)]
2016-08-07 20:38:28,139 - DEBUG --- END: join_faces
2016-08-07 20:38:28,140 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,140 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,140 - DEBUG --- Edge to remove found :-) (225, 52)
2016-08-07 20:38:28,140 - DEBUG --- f1: [(225, 52), (52, 231), (231, 228), (228, 225)]
2016-08-07 20:38:28,140 - DEBUG --- f2: [(52, 225), (225, 165), (165, 163), (163, 97), (97, 56), (56, 52)]
2016-08-07 20:38:28,141 - DEBUG --- f1_plus_f2_temp: [(228, 165), (165, 163), (163, 97), (97, 56), (56, 231), (231, 228)]
2016-08-07 20:38:28,141 - DEBUG --- END 185: test the 0 edge
2016-08-07 20:38:28,141 - INFO --- END 185: Search the right edge to remove. Found: (225, 52)
2016-08-07 20:38:28,141 - INFO --- BEGIN 185: Remove an F3, F4 or F5
2016-08-07 20:38:28,142 - DEBUG --- vertex_to_join_near_v1_on_the_face: 228
2016-08-07 20:38:28,144 - DEBUG --- vertex_to_join_near_v2_on_the_face: 231
2016-08-07 20:38:28,144 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 165
2016-08-07 20:38:28,145 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 56
2016-08-07 20:38:28,145 - DEBUG --- third_face_to_update: [(162, 165), (165, 225), (225, 228), (228, 242), (242, 162)]
2016-08-07 20:38:28,146 - DEBUG --- fourth_face_to_update: [(259, 231), (231, 52), (52, 56), (56, 63), (63, 71), (71, 259)]
2016-08-07 20:38:28,146 - INFO --- ariadne_step: [4, 225, 52, 228, 231, 165, 56]
2016-08-07 20:38:28,146 - INFO --- END 185: Remove an F3, F4 or F5
2016-08-07 20:38:28,146 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,147 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,147 - INFO --- END 185: Main loop
2016-08-07 20:38:28,147 - INFO --- 
2016-08-07 20:38:28,147 - INFO --- BEGIN 186: Main loop
2016-08-07 20:38:28,148 - INFO --- BEGIN 186: Search the right edge to remove
2016-08-07 20:38:28,148 - DEBUG --- BEGIN 186: test the 0 edge
2016-08-07 20:38:28,148 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:28,148 - DEBUG --- edge_to_remove: (162, 165)
2016-08-07 20:38:28,148 - DEBUG --- rotated_edge_to_remove: (165, 162)
2016-08-07 20:38:28,149 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,149 - DEBUG --- f1: [(162, 165), (165, 228), (228, 242), (242, 162)]
2016-08-07 20:38:28,149 - DEBUG --- f2: [(163, 165), (165, 162), (162, 161), (161, 159), (159, 156), (156, 163)]
2016-08-07 20:38:28,149 - DEBUG --- edge_to_remove_on_f1: (162, 165)
2016-08-07 20:38:28,149 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,150 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:28,150 - DEBUG --- Temporary f1_plus_f2: [(162, 161), (161, 159), (159, 156), (156, 163), (163, 165), (165, 228), (228, 242), (242, 162)]
2016-08-07 20:38:28,150 - DEBUG --- f1_plus_f2: [(242, 161), (161, 159), (159, 156), (156, 163), (163, 228), (228, 242)]
2016-08-07 20:38:28,150 - DEBUG --- END: join_faces
2016-08-07 20:38:28,151 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,151 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,151 - DEBUG --- Edge to remove found :-) (162, 165)
2016-08-07 20:38:28,151 - DEBUG --- f1: [(162, 165), (165, 228), (228, 242), (242, 162)]
2016-08-07 20:38:28,151 - DEBUG --- f2: [(163, 165), (165, 162), (162, 161), (161, 159), (159, 156), (156, 163)]
2016-08-07 20:38:28,152 - DEBUG --- f1_plus_f2_temp: [(242, 161), (161, 159), (159, 156), (156, 163), (163, 228), (228, 242)]
2016-08-07 20:38:28,152 - DEBUG --- END 186: test the 0 edge
2016-08-07 20:38:28,152 - INFO --- END 186: Search the right edge to remove. Found: (162, 165)
2016-08-07 20:38:28,152 - INFO --- BEGIN 186: Remove an F3, F4 or F5
2016-08-07 20:38:28,153 - DEBUG --- vertex_to_join_near_v1_on_the_face: 242
2016-08-07 20:38:28,153 - DEBUG --- vertex_to_join_near_v2_on_the_face: 228
2016-08-07 20:38:28,153 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 161
2016-08-07 20:38:28,153 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 163
2016-08-07 20:38:28,153 - DEBUG --- third_face_to_update: [(242, 213), (213, 137), (137, 161), (161, 162), (162, 242)]
2016-08-07 20:38:28,154 - DEBUG --- fourth_face_to_update: [(228, 165), (165, 163), (163, 97), (97, 56), (56, 231), (231, 228)]
2016-08-07 20:38:28,154 - INFO --- ariadne_step: [4, 162, 165, 242, 228, 161, 163]
2016-08-07 20:38:28,154 - INFO --- END 186: Remove an F3, F4 or F5
2016-08-07 20:38:28,154 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,155 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,155 - INFO --- END 186: Main loop
2016-08-07 20:38:28,155 - INFO --- 
2016-08-07 20:38:28,155 - INFO --- BEGIN 187: Main loop
2016-08-07 20:38:28,156 - INFO --- BEGIN 187: Search the right edge to remove
2016-08-07 20:38:28,156 - DEBUG --- BEGIN 187: test the 0 edge
2016-08-07 20:38:28,156 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:28,156 - DEBUG --- edge_to_remove: (242, 213)
2016-08-07 20:38:28,156 - DEBUG --- rotated_edge_to_remove: (213, 242)
2016-08-07 20:38:28,157 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,157 - DEBUG --- f1: [(242, 213), (213, 137), (137, 161), (161, 242)]
2016-08-07 20:38:28,157 - DEBUG --- f2: [(242, 228), (228, 231), (231, 259), (259, 213), (213, 242)]
2016-08-07 20:38:28,157 - DEBUG --- edge_to_remove_on_f1: (242, 213)
2016-08-07 20:38:28,157 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,158 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:28,158 - DEBUG --- Temporary f1_plus_f2: [(242, 228), (228, 231), (231, 259), (259, 213), (213, 137), (137, 161), (161, 242)]
2016-08-07 20:38:28,160 - DEBUG --- f1_plus_f2: [(161, 228), (228, 231), (231, 259), (259, 137), (137, 161)]
2016-08-07 20:38:28,160 - DEBUG --- END: join_faces
2016-08-07 20:38:28,160 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,161 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,161 - DEBUG --- Edge to remove found :-) (242, 213)
2016-08-07 20:38:28,161 - DEBUG --- f1: [(242, 213), (213, 137), (137, 161), (161, 242)]
2016-08-07 20:38:28,161 - DEBUG --- f2: [(242, 228), (228, 231), (231, 259), (259, 213), (213, 242)]
2016-08-07 20:38:28,162 - DEBUG --- f1_plus_f2_temp: [(161, 228), (228, 231), (231, 259), (259, 137), (137, 161)]
2016-08-07 20:38:28,162 - DEBUG --- END 187: test the 0 edge
2016-08-07 20:38:28,163 - INFO --- END 187: Search the right edge to remove. Found: (242, 213)
2016-08-07 20:38:28,163 - INFO --- BEGIN 187: Remove an F3, F4 or F5
2016-08-07 20:38:28,163 - DEBUG --- vertex_to_join_near_v1_on_the_face: 161
2016-08-07 20:38:28,163 - DEBUG --- vertex_to_join_near_v2_on_the_face: 137
2016-08-07 20:38:28,164 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 228
2016-08-07 20:38:28,164 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 259
2016-08-07 20:38:28,164 - DEBUG --- third_face_to_update: [(242, 161), (161, 159), (159, 156), (156, 163), (163, 228), (228, 242)]
2016-08-07 20:38:28,164 - DEBUG --- fourth_face_to_update: [(126, 137), (137, 213), (213, 259), (259, 71), (71, 64), (64, 126)]
2016-08-07 20:38:28,164 - INFO --- ariadne_step: [4, 242, 213, 161, 137, 228, 259]
2016-08-07 20:38:28,165 - INFO --- END 187: Remove an F3, F4 or F5
2016-08-07 20:38:28,165 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,165 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,166 - INFO --- END 187: Main loop
2016-08-07 20:38:28,166 - INFO --- 
2016-08-07 20:38:28,166 - INFO --- BEGIN 188: Main loop
2016-08-07 20:38:28,166 - INFO --- BEGIN 188: Search the right edge to remove
2016-08-07 20:38:28,166 - DEBUG --- BEGIN 188: test the 0 edge
2016-08-07 20:38:28,167 - DEBUG --- len_of_the_face_to_reduce: 5
2016-08-07 20:38:28,167 - DEBUG --- edge_to_remove: (123, 119)
2016-08-07 20:38:28,167 - DEBUG --- rotated_edge_to_remove: (119, 123)
2016-08-07 20:38:28,167 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,167 - DEBUG --- f1: [(123, 119), (119, 150), (150, 156), (156, 159), (159, 123)]
2016-08-07 20:38:28,168 - DEBUG --- f2: [(126, 64), (64, 70), (70, 119), (119, 123), (123, 126)]
2016-08-07 20:38:28,168 - DEBUG --- edge_to_remove_on_f1: (123, 119)
2016-08-07 20:38:28,168 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,168 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:28,168 - DEBUG --- Temporary f1_plus_f2: [(123, 126), (126, 64), (64, 70), (70, 119), (119, 150), (150, 156), (156, 159), (159, 123)]
2016-08-07 20:38:28,169 - DEBUG --- f1_plus_f2: [(159, 126), (126, 64), (64, 70), (70, 150), (150, 156), (156, 159)]
2016-08-07 20:38:28,169 - DEBUG --- END: join_faces
2016-08-07 20:38:28,169 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,169 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,169 - DEBUG --- Edge to remove found :-) (123, 119)
2016-08-07 20:38:28,170 - DEBUG --- f1: [(123, 119), (119, 150), (150, 156), (156, 159), (159, 123)]
2016-08-07 20:38:28,170 - DEBUG --- f2: [(126, 64), (64, 70), (70, 119), (119, 123), (123, 126)]
2016-08-07 20:38:28,170 - DEBUG --- f1_plus_f2_temp: [(159, 126), (126, 64), (64, 70), (70, 150), (150, 156), (156, 159)]
2016-08-07 20:38:28,170 - DEBUG --- END 188: test the 0 edge
2016-08-07 20:38:28,170 - INFO --- END 188: Search the right edge to remove. Found: (123, 119)
2016-08-07 20:38:28,171 - INFO --- BEGIN 188: Remove an F3, F4 or F5
2016-08-07 20:38:28,171 - DEBUG --- vertex_to_join_near_v1_on_the_face: 159
2016-08-07 20:38:28,171 - DEBUG --- vertex_to_join_near_v2_on_the_face: 150
2016-08-07 20:38:28,171 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 126
2016-08-07 20:38:28,171 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 70
2016-08-07 20:38:28,172 - DEBUG --- third_face_to_update: [(161, 137), (137, 126), (126, 123), (123, 159), (159, 161)]
2016-08-07 20:38:28,172 - DEBUG --- fourth_face_to_update: [(59, 92), (92, 150), (150, 119), (119, 70), (70, 59)]
2016-08-07 20:38:28,172 - INFO --- ariadne_step: [5, 123, 119, 159, 150, 126, 70]
2016-08-07 20:38:28,172 - INFO --- END 188: Remove an F3, F4 or F5
2016-08-07 20:38:28,172 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,173 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,173 - INFO --- END 188: Main loop
2016-08-07 20:38:28,173 - INFO --- 
2016-08-07 20:38:28,174 - INFO --- BEGIN 189: Main loop
2016-08-07 20:38:28,174 - INFO --- BEGIN 189: Search the right edge to remove
2016-08-07 20:38:28,174 - DEBUG --- BEGIN 189: test the 0 edge
2016-08-07 20:38:28,174 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:28,174 - DEBUG --- edge_to_remove: (161, 137)
2016-08-07 20:38:28,175 - DEBUG --- rotated_edge_to_remove: (137, 161)
2016-08-07 20:38:28,176 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,176 - DEBUG --- f1: [(161, 137), (137, 126), (126, 159), (159, 161)]
2016-08-07 20:38:28,177 - DEBUG --- f2: [(161, 228), (228, 231), (231, 259), (259, 137), (137, 161)]
2016-08-07 20:38:28,177 - DEBUG --- edge_to_remove_on_f1: (161, 137)
2016-08-07 20:38:28,177 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,177 - DEBUG --- index_of_edge_to_remove_on_f2: 4
2016-08-07 20:38:28,178 - DEBUG --- Temporary f1_plus_f2: [(161, 228), (228, 231), (231, 259), (259, 137), (137, 126), (126, 159), (159, 161)]
2016-08-07 20:38:28,178 - DEBUG --- f1_plus_f2: [(159, 228), (228, 231), (231, 259), (259, 126), (126, 159)]
2016-08-07 20:38:28,178 - DEBUG --- END: join_faces
2016-08-07 20:38:28,178 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,178 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,179 - DEBUG --- Edge to remove found :-) (161, 137)
2016-08-07 20:38:28,179 - DEBUG --- f1: [(161, 137), (137, 126), (126, 159), (159, 161)]
2016-08-07 20:38:28,179 - DEBUG --- f2: [(161, 228), (228, 231), (231, 259), (259, 137), (137, 161)]
2016-08-07 20:38:28,179 - DEBUG --- f1_plus_f2_temp: [(159, 228), (228, 231), (231, 259), (259, 126), (126, 159)]
2016-08-07 20:38:28,179 - DEBUG --- END 189: test the 0 edge
2016-08-07 20:38:28,180 - INFO --- END 189: Search the right edge to remove. Found: (161, 137)
2016-08-07 20:38:28,180 - INFO --- BEGIN 189: Remove an F3, F4 or F5
2016-08-07 20:38:28,180 - DEBUG --- vertex_to_join_near_v1_on_the_face: 159
2016-08-07 20:38:28,180 - DEBUG --- vertex_to_join_near_v2_on_the_face: 126
2016-08-07 20:38:28,181 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 228
2016-08-07 20:38:28,181 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 259
2016-08-07 20:38:28,181 - DEBUG --- third_face_to_update: [(228, 161), (161, 159), (159, 156), (156, 163), (163, 228)]
2016-08-07 20:38:28,181 - DEBUG --- fourth_face_to_update: [(126, 137), (137, 259), (259, 71), (71, 64), (64, 126)]
2016-08-07 20:38:28,181 - INFO --- ariadne_step: [4, 161, 137, 159, 126, 228, 259]
2016-08-07 20:38:28,182 - INFO --- END 189: Remove an F3, F4 or F5
2016-08-07 20:38:28,182 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,182 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,182 - INFO --- END 189: Main loop
2016-08-07 20:38:28,183 - INFO --- 
2016-08-07 20:38:28,183 - INFO --- BEGIN 190: Main loop
2016-08-07 20:38:28,183 - INFO --- BEGIN 190: Search the right edge to remove
2016-08-07 20:38:28,183 - DEBUG --- BEGIN 190: test the 0 edge
2016-08-07 20:38:28,183 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:28,184 - DEBUG --- edge_to_remove: (59, 92)
2016-08-07 20:38:28,184 - DEBUG --- rotated_edge_to_remove: (92, 59)
2016-08-07 20:38:28,184 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,184 - DEBUG --- f1: [(59, 92), (92, 150), (150, 70), (70, 59)]
2016-08-07 20:38:28,185 - DEBUG --- f2: [(92, 59), (59, 63), (63, 56), (56, 97), (97, 92)]
2016-08-07 20:38:28,185 - DEBUG --- edge_to_remove_on_f1: (59, 92)
2016-08-07 20:38:28,185 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,185 - DEBUG --- index_of_edge_to_remove_on_f2: 0
2016-08-07 20:38:28,185 - DEBUG --- Temporary f1_plus_f2: [(59, 63), (63, 56), (56, 97), (97, 92), (92, 150), (150, 70), (70, 59)]
2016-08-07 20:38:28,186 - DEBUG --- f1_plus_f2: [(70, 63), (63, 56), (56, 97), (97, 150), (150, 70)]
2016-08-07 20:38:28,186 - DEBUG --- END: join_faces
2016-08-07 20:38:28,186 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,186 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,186 - DEBUG --- Edge to remove found :-) (59, 92)
2016-08-07 20:38:28,187 - DEBUG --- f1: [(59, 92), (92, 150), (150, 70), (70, 59)]
2016-08-07 20:38:28,187 - DEBUG --- f2: [(92, 59), (59, 63), (63, 56), (56, 97), (97, 92)]
2016-08-07 20:38:28,187 - DEBUG --- f1_plus_f2_temp: [(70, 63), (63, 56), (56, 97), (97, 150), (150, 70)]
2016-08-07 20:38:28,187 - DEBUG --- END 190: test the 0 edge
2016-08-07 20:38:28,187 - INFO --- END 190: Search the right edge to remove. Found: (59, 92)
2016-08-07 20:38:28,188 - INFO --- BEGIN 190: Remove an F3, F4 or F5
2016-08-07 20:38:28,188 - DEBUG --- vertex_to_join_near_v1_on_the_face: 70
2016-08-07 20:38:28,188 - DEBUG --- vertex_to_join_near_v2_on_the_face: 150
2016-08-07 20:38:28,188 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 63
2016-08-07 20:38:28,188 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 97
2016-08-07 20:38:28,188 - DEBUG --- third_face_to_update: [(64, 71), (71, 63), (63, 59), (59, 70), (70, 64)]
2016-08-07 20:38:28,189 - DEBUG --- fourth_face_to_update: [(150, 92), (92, 97), (97, 163), (163, 156), (156, 150)]
2016-08-07 20:38:28,190 - INFO --- ariadne_step: [4, 59, 92, 70, 150, 63, 97]
2016-08-07 20:38:28,190 - INFO --- END 190: Remove an F3, F4 or F5
2016-08-07 20:38:28,190 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,190 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,190 - INFO --- END 190: Main loop
2016-08-07 20:38:28,191 - INFO --- 
2016-08-07 20:38:28,191 - INFO --- BEGIN 191: Main loop
2016-08-07 20:38:28,191 - INFO --- BEGIN 191: Search the right edge to remove
2016-08-07 20:38:28,191 - DEBUG --- BEGIN 191: test the 0 edge
2016-08-07 20:38:28,191 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:28,191 - DEBUG --- edge_to_remove: (126, 259)
2016-08-07 20:38:28,192 - DEBUG --- rotated_edge_to_remove: (259, 126)
2016-08-07 20:38:28,192 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,192 - DEBUG --- f1: [(126, 259), (259, 71), (71, 64), (64, 126)]
2016-08-07 20:38:28,192 - DEBUG --- f2: [(159, 228), (228, 231), (231, 259), (259, 126), (126, 159)]
2016-08-07 20:38:28,192 - DEBUG --- edge_to_remove_on_f1: (126, 259)
2016-08-07 20:38:28,193 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,193 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:28,193 - DEBUG --- Temporary f1_plus_f2: [(126, 159), (159, 228), (228, 231), (231, 259), (259, 71), (71, 64), (64, 126)]
2016-08-07 20:38:28,193 - DEBUG --- f1_plus_f2: [(64, 159), (159, 228), (228, 231), (231, 71), (71, 64)]
2016-08-07 20:38:28,193 - DEBUG --- END: join_faces
2016-08-07 20:38:28,194 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,194 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,194 - DEBUG --- Edge to remove found :-) (126, 259)
2016-08-07 20:38:28,194 - DEBUG --- f1: [(126, 259), (259, 71), (71, 64), (64, 126)]
2016-08-07 20:38:28,194 - DEBUG --- f2: [(159, 228), (228, 231), (231, 259), (259, 126), (126, 159)]
2016-08-07 20:38:28,194 - DEBUG --- f1_plus_f2_temp: [(64, 159), (159, 228), (228, 231), (231, 71), (71, 64)]
2016-08-07 20:38:28,195 - DEBUG --- END 191: test the 0 edge
2016-08-07 20:38:28,195 - INFO --- END 191: Search the right edge to remove. Found: (126, 259)
2016-08-07 20:38:28,195 - INFO --- BEGIN 191: Remove an F3, F4 or F5
2016-08-07 20:38:28,195 - DEBUG --- vertex_to_join_near_v1_on_the_face: 64
2016-08-07 20:38:28,196 - DEBUG --- vertex_to_join_near_v2_on_the_face: 71
2016-08-07 20:38:28,196 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 159
2016-08-07 20:38:28,196 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 231
2016-08-07 20:38:28,196 - DEBUG --- third_face_to_update: [(159, 126), (126, 64), (64, 70), (70, 150), (150, 156), (156, 159)]
2016-08-07 20:38:28,196 - DEBUG --- fourth_face_to_update: [(259, 231), (231, 56), (56, 63), (63, 71), (71, 259)]
2016-08-07 20:38:28,197 - INFO --- ariadne_step: [4, 126, 259, 64, 71, 159, 231]
2016-08-07 20:38:28,197 - INFO --- END 191: Remove an F3, F4 or F5
2016-08-07 20:38:28,197 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,197 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,197 - INFO --- END 191: Main loop
2016-08-07 20:38:28,198 - INFO --- 
2016-08-07 20:38:28,198 - INFO --- BEGIN 192: Main loop
2016-08-07 20:38:28,198 - INFO --- BEGIN 192: Search the right edge to remove
2016-08-07 20:38:28,198 - DEBUG --- BEGIN 192: test the 0 edge
2016-08-07 20:38:28,199 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:28,199 - DEBUG --- edge_to_remove: (228, 159)
2016-08-07 20:38:28,199 - DEBUG --- rotated_edge_to_remove: (159, 228)
2016-08-07 20:38:28,199 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,199 - DEBUG --- f1: [(228, 159), (159, 156), (156, 163), (163, 228)]
2016-08-07 20:38:28,200 - DEBUG --- f2: [(64, 159), (159, 228), (228, 231), (231, 71), (71, 64)]
2016-08-07 20:38:28,200 - DEBUG --- edge_to_remove_on_f1: (228, 159)
2016-08-07 20:38:28,200 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,200 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:28,200 - DEBUG --- Temporary f1_plus_f2: [(228, 231), (231, 71), (71, 64), (64, 159), (159, 156), (156, 163), (163, 228)]
2016-08-07 20:38:28,200 - DEBUG --- f1_plus_f2: [(163, 231), (231, 71), (71, 64), (64, 156), (156, 163)]
2016-08-07 20:38:28,201 - DEBUG --- END: join_faces
2016-08-07 20:38:28,201 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,201 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,201 - DEBUG --- Edge to remove found :-) (228, 159)
2016-08-07 20:38:28,201 - DEBUG --- f1: [(228, 159), (159, 156), (156, 163), (163, 228)]
2016-08-07 20:38:28,202 - DEBUG --- f2: [(64, 159), (159, 228), (228, 231), (231, 71), (71, 64)]
2016-08-07 20:38:28,202 - DEBUG --- f1_plus_f2_temp: [(163, 231), (231, 71), (71, 64), (64, 156), (156, 163)]
2016-08-07 20:38:28,202 - DEBUG --- END 192: test the 0 edge
2016-08-07 20:38:28,202 - INFO --- END 192: Search the right edge to remove. Found: (228, 159)
2016-08-07 20:38:28,202 - INFO --- BEGIN 192: Remove an F3, F4 or F5
2016-08-07 20:38:28,202 - DEBUG --- vertex_to_join_near_v1_on_the_face: 163
2016-08-07 20:38:28,203 - DEBUG --- vertex_to_join_near_v2_on_the_face: 156
2016-08-07 20:38:28,203 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 231
2016-08-07 20:38:28,203 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 64
2016-08-07 20:38:28,203 - DEBUG --- third_face_to_update: [(228, 163), (163, 97), (97, 56), (56, 231), (231, 228)]
2016-08-07 20:38:28,203 - DEBUG --- fourth_face_to_update: [(159, 64), (64, 70), (70, 150), (150, 156), (156, 159)]
2016-08-07 20:38:28,204 - INFO --- ariadne_step: [4, 228, 159, 163, 156, 231, 64]
2016-08-07 20:38:28,204 - INFO --- END 192: Remove an F3, F4 or F5
2016-08-07 20:38:28,204 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,204 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,204 - INFO --- END 192: Main loop
2016-08-07 20:38:28,205 - INFO --- 
2016-08-07 20:38:28,205 - INFO --- BEGIN 193: Main loop
2016-08-07 20:38:28,205 - INFO --- BEGIN 193: Search the right edge to remove
2016-08-07 20:38:28,205 - DEBUG --- BEGIN 193: test the 0 edge
2016-08-07 20:38:28,206 - DEBUG --- len_of_the_face_to_reduce: 4
2016-08-07 20:38:28,206 - DEBUG --- edge_to_remove: (64, 71)
2016-08-07 20:38:28,206 - DEBUG --- rotated_edge_to_remove: (71, 64)
2016-08-07 20:38:28,206 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,206 - DEBUG --- f1: [(64, 71), (71, 63), (63, 70), (70, 64)]
2016-08-07 20:38:28,207 - DEBUG --- f2: [(163, 231), (231, 71), (71, 64), (64, 156), (156, 163)]
2016-08-07 20:38:28,207 - DEBUG --- edge_to_remove_on_f1: (64, 71)
2016-08-07 20:38:28,207 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,207 - DEBUG --- index_of_edge_to_remove_on_f2: 2
2016-08-07 20:38:28,208 - DEBUG --- Temporary f1_plus_f2: [(64, 156), (156, 163), (163, 231), (231, 71), (71, 63), (63, 70), (70, 64)]
2016-08-07 20:38:28,208 - DEBUG --- f1_plus_f2: [(70, 156), (156, 163), (163, 231), (231, 63), (63, 70)]
2016-08-07 20:38:28,208 - DEBUG --- END: join_faces
2016-08-07 20:38:28,208 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,209 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,209 - DEBUG --- Edge to remove found :-) (64, 71)
2016-08-07 20:38:28,209 - DEBUG --- f1: [(64, 71), (71, 63), (63, 70), (70, 64)]
2016-08-07 20:38:28,209 - DEBUG --- f2: [(163, 231), (231, 71), (71, 64), (64, 156), (156, 163)]
2016-08-07 20:38:28,209 - DEBUG --- f1_plus_f2_temp: [(70, 156), (156, 163), (163, 231), (231, 63), (63, 70)]
2016-08-07 20:38:28,210 - DEBUG --- END 193: test the 0 edge
2016-08-07 20:38:28,210 - INFO --- END 193: Search the right edge to remove. Found: (64, 71)
2016-08-07 20:38:28,210 - INFO --- BEGIN 193: Remove an F3, F4 or F5
2016-08-07 20:38:28,210 - DEBUG --- vertex_to_join_near_v1_on_the_face: 70
2016-08-07 20:38:28,211 - DEBUG --- vertex_to_join_near_v2_on_the_face: 63
2016-08-07 20:38:28,211 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 156
2016-08-07 20:38:28,211 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 231
2016-08-07 20:38:28,211 - DEBUG --- third_face_to_update: [(156, 64), (64, 70), (70, 150), (150, 156)]
2016-08-07 20:38:28,211 - DEBUG --- fourth_face_to_update: [(71, 231), (231, 56), (56, 63), (63, 71)]
2016-08-07 20:38:28,212 - INFO --- ariadne_step: [4, 64, 71, 70, 63, 156, 231]
2016-08-07 20:38:28,212 - INFO --- END 193: Remove an F3, F4 or F5
2016-08-07 20:38:28,212 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,212 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,212 - INFO --- END 193: Main loop
2016-08-07 20:38:28,213 - INFO --- 
2016-08-07 20:38:28,213 - INFO --- BEGIN 194: Main loop
2016-08-07 20:38:28,213 - INFO --- BEGIN 194: Search the right edge to remove
2016-08-07 20:38:28,213 - DEBUG --- BEGIN 194: test the 0 edge
2016-08-07 20:38:28,213 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:28,213 - DEBUG --- edge_to_remove: (63, 231)
2016-08-07 20:38:28,214 - DEBUG --- rotated_edge_to_remove: (231, 63)
2016-08-07 20:38:28,214 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,214 - DEBUG --- f1: [(63, 231), (231, 56), (56, 63)]
2016-08-07 20:38:28,214 - DEBUG --- f2: [(70, 156), (156, 163), (163, 231), (231, 63), (63, 70)]
2016-08-07 20:38:28,214 - DEBUG --- edge_to_remove_on_f1: (63, 231)
2016-08-07 20:38:28,215 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,215 - DEBUG --- index_of_edge_to_remove_on_f2: 3
2016-08-07 20:38:28,215 - DEBUG --- Temporary f1_plus_f2: [(63, 70), (70, 156), (156, 163), (163, 231), (231, 56), (56, 63)]
2016-08-07 20:38:28,215 - DEBUG --- f1_plus_f2: [(56, 70), (70, 156), (156, 163), (163, 56)]
2016-08-07 20:38:28,215 - DEBUG --- END: join_faces
2016-08-07 20:38:28,216 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,216 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,217 - DEBUG --- Edge to remove found :-) (63, 231)
2016-08-07 20:38:28,217 - DEBUG --- f1: [(63, 231), (231, 56), (56, 63)]
2016-08-07 20:38:28,217 - DEBUG --- f2: [(70, 156), (156, 163), (163, 231), (231, 63), (63, 70)]
2016-08-07 20:38:28,217 - DEBUG --- f1_plus_f2_temp: [(56, 70), (70, 156), (156, 163), (163, 56)]
2016-08-07 20:38:28,218 - DEBUG --- END 194: test the 0 edge
2016-08-07 20:38:28,218 - INFO --- END 194: Search the right edge to remove. Found: (63, 231)
2016-08-07 20:38:28,218 - INFO --- BEGIN 194: Remove an F3, F4 or F5
2016-08-07 20:38:28,218 - DEBUG --- vertex_to_join_near_v1_on_the_face: 56
2016-08-07 20:38:28,218 - DEBUG --- vertex_to_join_near_v2_on_the_face: 56
2016-08-07 20:38:28,219 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 70
2016-08-07 20:38:28,219 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 163
2016-08-07 20:38:28,219 - DEBUG --- third_face_to_update: [(70, 63), (63, 56), (56, 97), (97, 150), (150, 70)]
2016-08-07 20:38:28,219 - DEBUG --- fourth_face_to_update: [(231, 163), (163, 97), (97, 56), (56, 231)]
2016-08-07 20:38:28,219 - INFO --- ariadne_step: [3, 63, 231, 56, 56, 70, 163]
2016-08-07 20:38:28,220 - INFO --- END 194: Remove an F3, F4 or F5
2016-08-07 20:38:28,220 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,220 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,220 - INFO --- END 194: Main loop
2016-08-07 20:38:28,220 - INFO --- 
2016-08-07 20:38:28,221 - INFO --- BEGIN 195: Main loop
2016-08-07 20:38:28,221 - INFO --- BEGIN 195: Search the right edge to remove
2016-08-07 20:38:28,221 - DEBUG --- BEGIN 195: test the 0 edge
2016-08-07 20:38:28,221 - DEBUG --- len_of_the_face_to_reduce: 3
2016-08-07 20:38:28,221 - DEBUG --- edge_to_remove: (156, 70)
2016-08-07 20:38:28,222 - DEBUG --- rotated_edge_to_remove: (70, 156)
2016-08-07 20:38:28,222 - DEBUG --- BEGIN: join_faces
2016-08-07 20:38:28,222 - DEBUG --- f1: [(156, 70), (70, 150), (150, 156)]
2016-08-07 20:38:28,222 - DEBUG --- f2: [(56, 70), (70, 156), (156, 163), (163, 56)]
2016-08-07 20:38:28,222 - DEBUG --- edge_to_remove_on_f1: (156, 70)
2016-08-07 20:38:28,223 - DEBUG --- index_of_edge_to_remove_on_f1: 0
2016-08-07 20:38:28,223 - DEBUG --- index_of_edge_to_remove_on_f2: 1
2016-08-07 20:38:28,223 - DEBUG --- Temporary f1_plus_f2: [(156, 163), (163, 56), (56, 70), (70, 150), (150, 156)]
2016-08-07 20:38:28,223 - DEBUG --- f1_plus_f2: [(150, 163), (163, 56), (56, 150)]
2016-08-07 20:38:28,223 - DEBUG --- END: join_faces
2016-08-07 20:38:28,224 - DEBUG --- BEGIN: is_the_graph_one_edge_connected
2016-08-07 20:38:28,224 - DEBUG --- END: is_the_graph_one_edge_connected
2016-08-07 20:38:28,224 - DEBUG --- Edge to remove found :-) (156, 70)
2016-08-07 20:38:28,224 - DEBUG --- f1: [(156, 70), (70, 150), (150, 156)]
2016-08-07 20:38:28,224 - DEBUG --- f2: [(56, 70), (70, 156), (156, 163), (163, 56)]
2016-08-07 20:38:28,225 - DEBUG --- f1_plus_f2_temp: [(150, 163), (163, 56), (56, 150)]
2016-08-07 20:38:28,225 - DEBUG --- END 195: test the 0 edge
2016-08-07 20:38:28,225 - INFO --- END 195: Search the right edge to remove. Found: (156, 70)
2016-08-07 20:38:28,225 - INFO --- BEGIN 195: Remove an F3, F4 or F5
2016-08-07 20:38:28,225 - DEBUG --- vertex_to_join_near_v1_on_the_face: 150
2016-08-07 20:38:28,226 - DEBUG --- vertex_to_join_near_v2_on_the_face: 150
2016-08-07 20:38:28,226 - DEBUG --- vertex_to_join_near_v1_not_on_the_face: 163
2016-08-07 20:38:28,226 - DEBUG --- vertex_to_join_near_v2_not_on_the_face: 56
2016-08-07 20:38:28,226 - DEBUG --- third_face_to_update: [(150, 97), (97, 163), (163, 156), (156, 150)]
2016-08-07 20:38:28,226 - DEBUG --- fourth_face_to_update: [(70, 56), (56, 97), (97, 150), (150, 70)]
2016-08-07 20:38:28,227 - INFO --- ariadne_step: [3, 156, 70, 150, 150, 163, 56]
2016-08-07 20:38:28,227 - INFO --- END 195: Remove an F3, F4 or F5
2016-08-07 20:38:28,227 - DEBUG --- BEGIN: check_regularity
2016-08-07 20:38:28,227 - DEBUG --- END: check_regularity
2016-08-07 20:38:28,228 - DEBUG --- The graph has been reduced
2016-08-07 20:38:28,228 - DEBUG --- Face: [(150, 97), (97, 163), (163, 150)]
2016-08-07 20:38:28,228 - DEBUG --- Face: [(56, 163), (163, 97), (97, 56)]
2016-08-07 20:38:28,228 - DEBUG --- Face: [(150, 56), (56, 97), (97, 150)]
2016-08-07 20:38:28,228 - DEBUG --- Face: [(150, 163), (163, 56), (56, 150)]
2016-08-07 20:38:28,229 - INFO --- END 195: Main loop
2016-08-07 20:38:28,229 - INFO --- 
2016-08-07 20:38:28,229 - INFO --- --------------------
2016-08-07 20:38:28,229 - INFO --- END: Reduction phase
2016-08-07 20:38:28,229 - INFO --- --------------------
2016-08-07 20:38:28,229 - INFO --- 
2016-08-07 20:38:28,230 - INFO --- -----------------------------------------
2016-08-07 20:38:28,230 - INFO --- BEGIN: Print Ariadne's string information
2016-08-07 20:38:28,230 - INFO --- -----------------------------------------
2016-08-07 20:38:28,230 - INFO --- ariadne_string: [3, 49, 58, 48, 48, 47, 56]
2016-08-07 20:38:28,230 - INFO --- ariadne_string: [3, 108, 105, 106, 106, 110, 61]
2016-08-07 20:38:28,230 - INFO --- ariadne_string: [3, 100, 94, 95, 95, 99, 96]
2016-08-07 20:38:28,231 - INFO --- ariadne_string: [3, 330, 273, 1, 1, 112, 274]
2016-08-07 20:38:28,231 - INFO --- ariadne_string: [3, 371, 372, 324, 324, 375, 349]
2016-08-07 20:38:28,231 - INFO --- ariadne_string: [3, 175, 178, 207, 207, 180, 177]
2016-08-07 20:38:28,231 - INFO --- ariadne_string: [3, 192, 186, 187, 187, 191, 188]
2016-08-07 20:38:28,231 - INFO --- ariadne_string: [3, 271, 385, 2, 2, 270, 374]
2016-08-07 20:38:28,231 - INFO --- ariadne_string: [3, 96, 104, 93, 93, 95, 99]
2016-08-07 20:38:28,232 - INFO --- ariadne_string: [3, 328, 313, 314, 314, 274, 310]
2016-08-07 20:38:28,232 - INFO --- ariadne_string: [3, 264, 262, 263, 263, 33, 28]
2016-08-07 20:38:28,232 - INFO --- ariadne_string: [3, 390, 386, 388, 388, 389, 384]
2016-08-07 20:38:28,232 - INFO --- ariadne_string: [3, 338, 339, 347, 347, 340, 79]
2016-08-07 20:38:28,232 - INFO --- ariadne_string: [3, 130, 133, 183, 183, 134, 132]
2016-08-07 20:38:28,233 - INFO --- ariadne_string: [3, 265, 14, 15, 15, 6, 7]
2016-08-07 20:38:28,233 - INFO --- ariadne_string: [3, 179, 201, 301, 301, 146, 190]
2016-08-07 20:38:28,233 - INFO --- ariadne_string: [3, 246, 334, 235, 235, 135, 333]
2016-08-07 20:38:28,233 - INFO --- ariadne_string: [3, 359, 343, 342, 342, 365, 336]
2016-08-07 20:38:28,233 - INFO --- ariadne_string: [3, 285, 276, 277, 277, 284, 278]
2016-08-07 20:38:28,234 - INFO --- ariadne_string: [3, 45, 41, 42, 42, 44, 43]
2016-08-07 20:38:28,234 - INFO --- ariadne_string: [3, 376, 329, 373, 373, 375, 327]
2016-08-07 20:38:28,234 - INFO --- ariadne_string: [3, 350, 90, 124, 124, 351, 101]
2016-08-07 20:38:28,234 - INFO --- ariadne_string: [3, 204, 205, 208, 208, 206, 203]
2016-08-07 20:38:28,234 - INFO --- ariadne_string: [3, 297, 299, 302, 302, 281, 298]
2016-08-07 20:38:28,234 - INFO --- ariadne_string: [3, 315, 318, 319, 319, 311, 316]
2016-08-07 20:38:28,235 - INFO --- ariadne_string: [3, 36, 39, 38, 38, 30, 43]
2016-08-07 20:38:28,235 - INFO --- ariadne_string: [3, 251, 245, 248, 248, 250, 237]
2016-08-07 20:38:28,235 - INFO --- ariadne_string: [3, 218, 220, 216, 216, 217, 164]
2016-08-07 20:38:28,235 - INFO --- ariadne_string: [3, 300, 304, 298, 298, 296, 305]
2016-08-07 20:38:28,235 - INFO --- ariadne_string: [3, 369, 378, 366, 366, 368, 379]
2016-08-07 20:38:28,235 - INFO --- ariadne_string: [3, 303, 24, 35, 35, 302, 363]
2016-08-07 20:38:28,236 - INFO --- ariadne_string: [3, 325, 357, 358, 358, 324, 349]
2016-08-07 20:38:28,236 - INFO --- ariadne_string: [3, 279, 346, 257, 257, 268, 337]
2016-08-07 20:38:28,236 - INFO --- ariadne_string: [3, 22, 26, 21, 21, 20, 9]
2016-08-07 20:38:28,236 - INFO --- ariadne_string: [3, 227, 221, 222, 222, 219, 225]
2016-08-07 20:38:28,236 - INFO --- ariadne_string: [3, 109, 111, 143, 143, 107, 110]
2016-08-07 20:38:28,237 - INFO --- ariadne_string: [3, 149, 151, 153, 153, 148, 150]
2016-08-07 20:38:28,237 - INFO --- ariadne_string: [3, 202, 206, 200, 200, 197, 208]
2016-08-07 20:38:28,237 - INFO --- ariadne_string: [3, 85, 67, 69, 69, 81, 66]
2016-08-07 20:38:28,237 - INFO --- ariadne_string: [3, 203, 207, 177, 177, 208, 180]
2016-08-07 20:38:28,237 - INFO --- ariadne_string: [3, 314, 272, 274, 274, 310, 269]
2016-08-07 20:38:28,237 - INFO --- ariadne_string: [3, 101, 347, 79, 79, 124, 340]
2016-08-07 20:38:28,238 - INFO --- ariadne_string: [3, 143, 110, 140, 140, 107, 106]
2016-08-07 20:38:28,238 - INFO --- ariadne_string: [3, 6, 15, 3, 3, 5, 7]
2016-08-07 20:38:28,238 - INFO --- ariadne_string: [3, 219, 222, 217, 217, 37, 225]
2016-08-07 20:38:28,239 - INFO --- ariadne_string: [3, 389, 388, 387, 387, 383, 384]
2016-08-07 20:38:28,239 - INFO --- ariadne_string: [3, 53, 48, 56, 56, 52, 47]
2016-08-07 20:38:28,239 - INFO --- ariadne_string: [3, 10, 21, 9, 9, 8, 20]
2016-08-07 20:38:28,239 - INFO --- ariadne_string: [3, 208, 199, 200, 200, 177, 176]
2016-08-07 20:38:28,239 - INFO --- ariadne_string: [3, 2, 270, 374, 374, 0, 269]
2016-08-07 20:38:28,240 - INFO --- ariadne_string: [3, 93, 95, 99, 99, 60, 92]
2016-08-07 20:38:28,240 - INFO --- ariadne_string: [3, 42, 44, 43, 43, 40, 52]
2016-08-07 20:38:28,240 - INFO --- ariadne_string: [3, 373, 375, 327, 327, 46, 324]
2016-08-07 20:38:28,240 - INFO --- ariadne_string: [3, 358, 324, 349, 349, 356, 327]
2016-08-07 20:38:28,240 - INFO --- ariadne_string: [3, 257, 268, 337, 337, 290, 212]
2016-08-07 20:38:28,241 - INFO --- ariadne_string: [3, 290, 337, 336, 336, 190, 212]
2016-08-07 20:38:28,241 - INFO --- ariadne_string: [3, 387, 383, 384, 384, 362, 364]
2016-08-07 20:38:28,241 - INFO --- ariadne_string: [3, 200, 177, 176, 176, 197, 180]
2016-08-07 20:38:28,241 - INFO --- ariadne_string: [3, 384, 362, 364, 364, 377, 360]
2016-08-07 20:38:28,241 - INFO --- ariadne_string: [3, 364, 377, 360, 360, 361, 367]
2016-08-07 20:38:28,241 - INFO --- ariadne_string: [3, 360, 361, 367, 367, 365, 348]
2016-08-07 20:38:28,242 - INFO --- ariadne_string: [4, 288, 287, 283, 284, 295, 289]
2016-08-07 20:38:28,242 - INFO --- ariadne_string: [4, 214, 158, 152, 150, 103, 156]
2016-08-07 20:38:28,242 - INFO --- ariadne_string: [4, 76, 121, 78, 122, 75, 120]
2016-08-07 20:38:28,242 - INFO --- ariadne_string: [4, 250, 241, 238, 234, 248, 242]
2016-08-07 20:38:28,242 - INFO --- ariadne_string: [3, 248, 238, 237, 237, 247, 234]
2016-08-07 20:38:28,243 - INFO --- ariadne_string: [4, 25, 393, 12, 394, 23, 395]
2016-08-07 20:38:28,243 - INFO --- ariadne_string: [3, 23, 12, 11, 11, 20, 394]
2016-08-07 20:38:28,243 - INFO --- ariadne_string: [3, 9, 20, 11, 11, 8, 19]
2016-08-07 20:38:28,243 - INFO --- ariadne_string: [4, 88, 91, 87, 89, 81, 83]
2016-08-07 20:38:28,243 - INFO --- ariadne_string: [3, 89, 83, 84, 84, 87, 81]
2016-08-07 20:38:28,243 - INFO --- ariadne_string: [3, 84, 87, 81, 81, 82, 86]
2016-08-07 20:38:28,244 - INFO --- ariadne_string: [3, 81, 82, 86, 86, 69, 80]
2016-08-07 20:38:28,244 - INFO --- ariadne_string: [3, 69, 86, 66, 66, 65, 80]
2016-08-07 20:38:28,244 - INFO --- ariadne_string: [3, 66, 80, 72, 72, 65, 73]
2016-08-07 20:38:28,244 - INFO --- ariadne_string: [3, 72, 65, 73, 73, 71, 64]
2016-08-07 20:38:28,244 - INFO --- ariadne_string: [4, 240, 167, 239, 166, 209, 162]
2016-08-07 20:38:28,245 - INFO --- ariadne_string: [4, 211, 210, 252, 242, 213, 209]
2016-08-07 20:38:28,245 - INFO --- ariadne_string: [4, 333, 332, 345, 344, 235, 331]
2016-08-07 20:38:28,245 - INFO --- ariadne_string: [3, 335, 344, 331, 331, 212, 345]
2016-08-07 20:38:28,245 - INFO --- ariadne_string: [3, 235, 345, 224, 224, 135, 331]
2016-08-07 20:38:28,245 - INFO --- ariadne_string: [3, 331, 212, 224, 224, 68, 336]
2016-08-07 20:38:28,245 - INFO --- ariadne_string: [4, 115, 120, 74, 75, 114, 122]
2016-08-07 20:38:28,246 - INFO --- ariadne_string: [3, 78, 75, 122, 122, 77, 74]
2016-08-07 20:38:28,246 - INFO --- ariadne_string: [4, 142, 145, 139, 144, 141, 147]
2016-08-07 20:38:28,247 - INFO --- ariadne_string: [4, 260, 261, 254, 255, 249, 244]
2016-08-07 20:38:28,247 - INFO --- ariadne_string: [4, 34, 382, 29, 381, 37, 365]
2016-08-07 20:38:28,247 - INFO --- ariadne_string: [4, 195, 171, 189, 170, 194, 131]
2016-08-07 20:38:28,247 - INFO --- ariadne_string: [3, 188, 194, 189, 189, 187, 191]
2016-08-07 20:38:28,247 - INFO --- ariadne_string: [3, 189, 187, 191, 191, 170, 181]
2016-08-07 20:38:28,248 - INFO --- ariadne_string: [4, 154, 127, 125, 123, 155, 128]
2016-08-07 20:38:28,248 - INFO --- ariadne_string: [4, 322, 321, 355, 353, 309, 320]
2016-08-07 20:38:28,248 - INFO --- ariadne_string: [3, 309, 355, 354, 354, 308, 353]
2016-08-07 20:38:28,248 - INFO --- ariadne_string: [4, 232, 226, 229, 225, 233, 165]
2016-08-07 20:38:28,248 - INFO --- ariadne_string: [4, 148, 118, 147, 117, 153, 119]
2016-08-07 20:38:28,249 - INFO --- ariadne_string: [4, 172, 180, 185, 198, 173, 176]
2016-08-07 20:38:28,249 - INFO --- ariadne_string: [3, 176, 197, 198, 198, 174, 196]
2016-08-07 20:38:28,249 - INFO --- ariadne_string: [3, 198, 174, 196, 196, 185, 129]
2016-08-07 20:38:28,249 - INFO --- ariadne_string: [3, 185, 196, 184, 184, 173, 129]
2016-08-07 20:38:28,249 - INFO --- ariadne_string: [3, 129, 134, 184, 184, 136, 183]
2016-08-07 20:38:28,250 - INFO --- ariadne_string: [4, 112, 1, 223, 0, 326, 274]
2016-08-07 20:38:28,250 - INFO --- ariadne_string: [4, 146, 301, 168, 312, 135, 190]
2016-08-07 20:38:28,250 - INFO --- ariadne_string: [3, 190, 323, 312, 312, 336, 51]
2016-08-07 20:38:28,250 - INFO --- ariadne_string: [4, 132, 193, 183, 182, 131, 191]
2016-08-07 20:38:28,250 - INFO --- ariadne_string: [3, 181, 182, 191, 191, 173, 183]
2016-08-07 20:38:28,250 - INFO --- ariadne_string: [4, 216, 164, 215, 163, 217, 165]
2016-08-07 20:38:28,251 - INFO --- ariadne_string: [4, 263, 28, 18, 17, 33, 27]
2016-08-07 20:38:28,251 - INFO --- ariadne_string: [4, 13, 281, 35, 302, 374, 280]
2016-08-07 20:38:28,251 - INFO --- ariadne_string: [4, 283, 295, 284, 289, 286, 294]
2016-08-07 20:38:28,251 - INFO --- ariadne_string: [4, 152, 141, 103, 102, 150, 139]
2016-08-07 20:38:28,251 - INFO --- ariadne_string: [4, 11, 19, 394, 395, 8, 16]
2016-08-07 20:38:28,252 - INFO --- ariadne_string: [4, 239, 209, 166, 162, 233, 242]
2016-08-07 20:38:28,252 - INFO --- ariadne_string: [4, 224, 135, 68, 57, 336, 168]
2016-08-07 20:38:28,252 - INFO --- ariadne_string: [4, 77, 122, 138, 126, 73, 74]
2016-08-07 20:38:28,252 - INFO --- ariadne_string: [4, 144, 147, 116, 117, 139, 153]
2016-08-07 20:38:28,252 - INFO --- ariadne_string: [3, 117, 153, 119, 119, 116, 150]
2016-08-07 20:38:28,253 - INFO --- ariadne_string: [4, 254, 253, 249, 247, 255, 252]
2016-08-07 20:38:28,253 - INFO --- ariadne_string: [4, 38, 37, 30, 29, 43, 217]
2016-08-07 20:38:28,253 - INFO --- ariadne_string: [4, 354, 308, 353, 320, 351, 307]
2016-08-07 20:38:28,253 - INFO --- ariadne_string: [4, 46, 327, 223, 326, 352, 349]
2016-08-07 20:38:28,253 - INFO --- ariadne_string: [4, 374, 0, 269, 274, 35, 223]
2016-08-07 20:38:28,253 - INFO --- ariadne_string: [4, 191, 170, 173, 169, 183, 131]
2016-08-07 20:38:28,254 - INFO --- ariadne_string: [3, 183, 173, 184, 184, 131, 169]
2016-08-07 20:38:28,254 - INFO --- ariadne_string: [3, 184, 131, 169, 169, 136, 128]
2016-08-07 20:38:28,254 - INFO --- ariadne_string: [4, 18, 33, 17, 27, 7, 32]
2016-08-07 20:38:28,254 - INFO --- ariadne_string: [4, 302, 280, 298, 296, 35, 278]
2016-08-07 20:38:28,254 - INFO --- ariadne_string: [4, 286, 284, 275, 277, 306, 289]
2016-08-07 20:38:28,255 - INFO --- ariadne_string: [4, 394, 8, 395, 16, 392, 7]
2016-08-07 20:38:28,255 - INFO --- ariadne_string: [3, 16, 7, 17, 17, 395, 3]
2016-08-07 20:38:28,255 - INFO --- ariadne_string: [4, 113, 57, 157, 168, 352, 68]
2016-08-07 20:38:28,255 - INFO --- ariadne_string: [4, 139, 116, 140, 107, 102, 119]
2016-08-07 20:38:28,255 - INFO --- ariadne_string: [4, 255, 249, 244, 243, 256, 247]
2016-08-07 20:38:28,255 - INFO --- ariadne_string: [4, 43, 30, 40, 31, 52, 29]
2016-08-07 20:38:28,256 - INFO --- ariadne_string: [4, 320, 307, 319, 311, 353, 282]
2016-08-07 20:38:28,256 - INFO --- ariadne_string: [4, 169, 128, 160, 159, 136, 123]
2016-08-07 20:38:28,256 - INFO --- ariadne_string: [3, 136, 160, 161, 161, 137, 159]
2016-08-07 20:38:28,256 - INFO --- ariadne_string: [4, 291, 292, 278, 296, 289, 293]
2016-08-07 20:38:28,256 - INFO --- ariadne_string: [3, 277, 289, 278, 278, 275, 294]
2016-08-07 20:38:28,257 - INFO --- ariadne_string: [4, 17, 395, 3, 392, 27, 379]
2016-08-07 20:38:28,257 - INFO --- ariadne_string: [4, 68, 336, 168, 312, 79, 342]
2016-08-07 20:38:28,257 - INFO --- ariadne_string: [4, 98, 102, 106, 140, 99, 103]
2016-08-07 20:38:28,257 - INFO --- ariadne_string: [4, 243, 247, 236, 237, 244, 252]
2016-08-07 20:38:28,257 - INFO --- ariadne_string: [4, 256, 244, 231, 230, 258, 236]
2016-08-07 20:38:28,258 - INFO --- ariadne_string: [3, 230, 236, 228, 228, 231, 237]
2016-08-07 20:38:28,258 - INFO --- ariadne_string: [4, 353, 319, 356, 316, 351, 311]
2016-08-07 20:38:28,258 - INFO --- ariadne_string: [4, 125, 155, 123, 159, 114, 156]
2016-08-07 20:38:28,258 - INFO --- ariadne_string: [4, 298, 296, 305, 293, 35, 278]
2016-08-07 20:38:28,259 - INFO --- ariadne_string: [3, 278, 294, 293, 293, 275, 306]
2016-08-07 20:38:28,259 - INFO --- ariadne_string: [3, 293, 275, 306, 306, 305, 282]
2016-08-07 20:38:28,259 - INFO --- ariadne_string: [4, 27, 3, 32, 5, 380, 392]
2016-08-07 20:38:28,259 - INFO --- ariadne_string: [4, 61, 60, 106, 99, 59, 47]
2016-08-07 20:38:28,260 - INFO --- ariadne_string: [4, 237, 252, 234, 242, 228, 213]
2016-08-07 20:38:28,260 - INFO --- ariadne_string: [4, 316, 311, 317, 310, 356, 282]
2016-08-07 20:38:28,260 - INFO --- ariadne_string: [4, 74, 114, 126, 123, 64, 119]
2016-08-07 20:38:28,260 - INFO --- ariadne_string: [4, 35, 305, 363, 266, 269, 306]
2016-08-07 20:38:28,260 - INFO --- ariadne_string: [3, 266, 306, 267, 267, 363, 282]
2016-08-07 20:38:28,261 - INFO --- ariadne_string: [4, 4, 5, 391, 392, 54, 32]
2016-08-07 20:38:28,261 - INFO --- ariadne_string: [4, 233, 229, 234, 228, 166, 225]
2016-08-07 20:38:28,261 - INFO --- ariadne_string: [4, 349, 356, 326, 317, 348, 351]
2016-08-07 20:38:28,261 - INFO --- ariadne_string: [4, 274, 310, 269, 282, 223, 317]
2016-08-07 20:38:28,262 - INFO --- ariadne_string: [4, 138, 73, 126, 64, 137, 71]
2016-08-07 20:38:28,262 - INFO --- ariadne_string: [4, 267, 363, 282, 269, 351, 341]
2016-08-07 20:38:28,262 - INFO --- ariadne_string: [3, 317, 351, 282, 282, 326, 124]
2016-08-07 20:38:28,262 - INFO --- ariadne_string: [4, 32, 380, 392, 379, 31, 381]
2016-08-07 20:38:28,262 - INFO --- ariadne_string: [4, 166, 234, 162, 242, 165, 228]
2016-08-07 20:38:28,263 - INFO --- ariadne_string: [4, 269, 341, 223, 352, 282, 124]
2016-08-07 20:38:28,263 - INFO --- ariadne_string: [3, 282, 223, 326, 326, 124, 352]
2016-08-07 20:38:28,263 - INFO --- ariadne_string: [3, 326, 124, 352, 352, 348, 79]
2016-08-07 20:38:28,263 - INFO --- ariadne_string: [4, 157, 352, 168, 79, 370, 348]
2016-08-07 20:38:28,263 - INFO --- ariadne_string: [3, 79, 348, 340, 340, 168, 367]
2016-08-07 20:38:28,264 - INFO --- ariadne_string: [4, 367, 365, 340, 342, 366, 381]
2016-08-07 20:38:28,264 - INFO --- ariadne_string: [4, 168, 340, 312, 342, 370, 366]
2016-08-07 20:38:28,264 - INFO --- ariadne_string: [4, 55, 370, 51, 312, 54, 368]
2016-08-07 20:38:28,264 - INFO --- ariadne_string: [4, 342, 366, 381, 379, 312, 368]
2016-08-07 20:38:28,264 - INFO --- ariadne_string: [4, 379, 368, 392, 391, 381, 312]
2016-08-07 20:38:28,265 - INFO --- ariadne_string: [4, 392, 31, 381, 29, 391, 40]
2016-08-07 20:38:28,265 - INFO --- ariadne_string: [3, 391, 381, 312, 312, 54, 29]
2016-08-07 20:38:28,265 - INFO --- ariadne_string: [3, 51, 54, 312, 312, 50, 40]
2016-08-07 20:38:28,265 - INFO --- ariadne_string: [3, 312, 40, 29, 29, 50, 52]
2016-08-07 20:38:28,265 - INFO --- ariadne_string: [5, 258, 62, 259, 63, 231, 56]
2016-08-07 20:38:28,266 - INFO --- ariadne_string: [5, 215, 217, 163, 225, 97, 29]
2016-08-07 20:38:28,266 - INFO --- ariadne_string: [5, 140, 103, 107, 150, 106, 92]
2016-08-07 20:38:28,266 - INFO --- ariadne_string: [4, 106, 107, 59, 70, 99, 119]
2016-08-07 20:38:28,266 - INFO --- ariadne_string: [5, 99, 47, 92, 50, 59, 56]
2016-08-07 20:38:28,266 - INFO --- ariadne_string: [4, 29, 50, 52, 56, 225, 97]
2016-08-07 20:38:28,267 - INFO --- ariadne_string: [4, 225, 52, 228, 231, 165, 56]
2016-08-07 20:38:28,267 - INFO --- ariadne_string: [4, 162, 165, 242, 228, 161, 163]
2016-08-07 20:38:28,267 - INFO --- ariadne_string: [4, 242, 213, 161, 137, 228, 259]
2016-08-07 20:38:28,267 - INFO --- ariadne_string: [5, 123, 119, 159, 150, 126, 70]
2016-08-07 20:38:28,267 - INFO --- ariadne_string: [4, 161, 137, 159, 126, 228, 259]
2016-08-07 20:38:28,268 - INFO --- ariadne_string: [4, 59, 92, 70, 150, 63, 97]
2016-08-07 20:38:28,268 - INFO --- ariadne_string: [4, 126, 259, 64, 71, 159, 231]
2016-08-07 20:38:28,268 - INFO --- ariadne_string: [4, 228, 159, 163, 156, 231, 64]
2016-08-07 20:38:28,268 - INFO --- ariadne_string: [4, 64, 71, 70, 63, 156, 231]
2016-08-07 20:38:28,268 - INFO --- ariadne_string: [3, 63, 231, 56, 56, 70, 163]
2016-08-07 20:38:28,268 - INFO --- ariadne_string: [3, 156, 70, 150, 150, 163, 56]
2016-08-07 20:38:28,269 - INFO --- ---------------------------------------
2016-08-07 20:38:28,269 - INFO --- END: Print Ariadne's string information
2016-08-07 20:38:28,269 - INFO --- ---------------------------------------
2016-08-07 20:38:28,269 - INFO --- 
2016-08-07 20:38:28,269 - INFO --- ---------------------------
2016-08-07 20:38:28,270 - INFO --- BEGIN: Reconstruction phase
2016-08-07 20:38:28,270 - INFO --- ---------------------------
2016-08-07 20:38:28,271 - INFO --- ariadne_step: [3, 156, 70, 150, 150, 163, 56]
2016-08-07 20:38:28,271 - INFO --- BEGIN: restore an F3
2016-08-07 20:38:28,271 - DEBUG --- Edges: [(56, 97, 'red'), (56, 150, 'green'), (56, 163, 'blue'), (97, 150, 'blue'), (97, 163, 'green'), (150, 163, 'red')], is_regular: True
2016-08-07 20:38:28,272 - DEBUG --- vertex_to_join_near_v1_on_the_face: 150, vertex_to_join_near_v2_on_the_face: 150, vertex_to_join_near_v1_not_on_the_face: 163, vertex_to_join_near_v2_not_on_the_face: 56
2016-08-07 20:38:28,272 - DEBUG --- previous_edge_color_at_v1: red, previous_edge_color_at_v2: green
2016-08-07 20:38:28,272 - DEBUG --- previous_edge_color_at_v1: red, previous_edge_color_at_v2: green, new_edge_color: blue
2016-08-07 20:38:28,273 - DEBUG --- Edges: [(97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'red'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 163, 'blue'), (56, 70, 'green'), (70, 156, 'blue')], is_regular: True
2016-08-07 20:38:28,273 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,273 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,273 - INFO --- END: restore an F3
2016-08-07 20:38:28,273 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,274 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,274 - INFO --- ariadne_step: [3, 63, 231, 56, 56, 70, 163]
2016-08-07 20:38:28,274 - INFO --- BEGIN: restore an F3
2016-08-07 20:38:28,274 - DEBUG --- Edges: [(97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'red'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 163, 'blue'), (56, 70, 'green'), (70, 156, 'blue')], is_regular: True
2016-08-07 20:38:28,275 - DEBUG --- vertex_to_join_near_v1_on_the_face: 56, vertex_to_join_near_v2_on_the_face: 56, vertex_to_join_near_v1_not_on_the_face: 70, vertex_to_join_near_v2_not_on_the_face: 163
2016-08-07 20:38:28,275 - DEBUG --- previous_edge_color_at_v1: green, previous_edge_color_at_v2: blue
2016-08-07 20:38:28,275 - DEBUG --- previous_edge_color_at_v1: green, previous_edge_color_at_v2: blue, new_edge_color: red
2016-08-07 20:38:28,275 - DEBUG --- Edges: [(97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'red'), (163, 231, 'blue'), (63, 70, 'green'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'blue'), (56, 231, 'green'), (70, 156, 'blue'), (63, 231, 'red')], is_regular: True
2016-08-07 20:38:28,276 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,276 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,277 - INFO --- END: restore an F3
2016-08-07 20:38:28,277 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,277 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,278 - INFO --- ariadne_step: [4, 64, 71, 70, 63, 156, 231]
2016-08-07 20:38:28,278 - INFO --- BEGIN: restore an F4
2016-08-07 20:38:28,278 - DEBUG --- Edges: [(97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'red'), (163, 231, 'blue'), (63, 70, 'green'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'blue'), (56, 231, 'green'), (70, 156, 'blue'), (63, 231, 'red')], is_regular: True
2016-08-07 20:38:28,278 - DEBUG --- previous_edge_color_at_v1: blue, previous_edge_color_at_v2: red
2016-08-07 20:38:28,279 - DEBUG --- edge_color_of_top_edge: green
2016-08-07 20:38:28,279 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (70, 156), (63, 231), blue, red
2016-08-07 20:38:28,279 - DEBUG --- out_of_scope_color: green
2016-08-07 20:38:28,280 - DEBUG --- current_color: blue
2016-08-07 20:38:28,280 - DEBUG --- Loop: current_edge: (70, 156), current_color: blue, next_color: red
2016-08-07 20:38:28,280 - DEBUG --- tmp_next_edges_to_check: [(70, 156, 'blue'), (150, 156, 'green'), (156, 163, 'red')]
2016-08-07 20:38:28,280 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 163, 'red')]
2016-08-07 20:38:28,280 - DEBUG --- current_color: red, next_color: blue, current_edge: (156, 163, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,281 - DEBUG --- Loop: current_edge: (156, 163, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,281 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'red'), (163, 231, 'blue')]
2016-08-07 20:38:28,281 - DEBUG --- vertex: 163, edges_to_check: [(97, 163, 'green'), (163, 231, 'blue')]
2016-08-07 20:38:28,281 - DEBUG --- current_color: blue, next_color: red, current_edge: (163, 231, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,281 - DEBUG --- Loop: current_edge: (163, 231, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,282 - DEBUG --- tmp_next_edges_to_check: [(56, 231, 'green'), (63, 231, 'red'), (163, 231, 'blue')]
2016-08-07 20:38:28,282 - DEBUG --- vertex: 231, edges_to_check: [(56, 231, 'green'), (63, 231, 'red')]
2016-08-07 20:38:28,282 - DEBUG --- current_color: red, next_color: blue, current_edge: (63, 231, 'red'), are_edges_on_the_same_kempe_cycle: True, is_the_end_of_search_process: True
2016-08-07 20:38:28,282 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: True
2016-08-07 20:38:28,282 - INFO --- BEGIN: restore an F4 - The two edges are on the same Kempe cycle
2016-08-07 20:38:28,283 - DEBUG --- Edges: [(97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'red'), (163, 231, 'blue'), (63, 70, 'green'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'blue'), (56, 231, 'green'), (70, 156, 'blue'), (63, 231, 'red')], is_regular: True
2016-08-07 20:38:28,283 - DEBUG --- bbb: [(97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'red'), (163, 231, 'blue'), (63, 70, 'green'), (64, 70, 'blue'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'blue'), (56, 231, 'green'), (63, 71, 'red')], is_regular: False
2016-08-07 20:38:28,283 - DEBUG --- BEGIN: kempe_chain_color_swap: (64, 70), blue, red
2016-08-07 20:38:28,283 - DEBUG --- degree: 3
2016-08-07 20:38:28,284 - DEBUG --- Loop: current_edge: (64, 70), current_color: blue, next_color: red
2016-08-07 20:38:28,284 - DEBUG --- Vertex at direction: 70
2016-08-07 20:38:28,284 - DEBUG --- Edges: [(97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'red'), (163, 231, 'blue'), (63, 70, 'green'), (64, 70, 'blue'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'blue'), (56, 231, 'green'), (63, 71, 'red')], is_regular: False
2016-08-07 20:38:28,284 - DEBUG --- tmp_next_edges_to_check: [(63, 70, 'green'), (64, 70, 'blue'), (70, 150, 'red')]
2016-08-07 20:38:28,285 - DEBUG --- vertex: 70, edges_to_check: [(63, 70, 'green'), (70, 150, 'red')]
2016-08-07 20:38:28,285 - DEBUG --- degree: 3
2016-08-07 20:38:28,285 - DEBUG --- Loop: current_edge: (70, 150, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,286 - DEBUG --- Vertex at direction: 150
2016-08-07 20:38:28,286 - DEBUG --- Edges: [(97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'red'), (163, 231, 'blue'), (63, 70, 'green'), (64, 70, 'red'), (150, 156, 'green'), (70, 150, 'blue'), (56, 97, 'red'), (56, 63, 'blue'), (56, 231, 'green'), (63, 71, 'red')], is_regular: False
2016-08-07 20:38:28,286 - DEBUG --- tmp_next_edges_to_check: [(70, 150, 'blue'), (97, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,286 - DEBUG --- vertex: 150, edges_to_check: [(97, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,287 - DEBUG --- degree: 3
2016-08-07 20:38:28,287 - DEBUG --- Loop: current_edge: (97, 150, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,287 - DEBUG --- Vertex at direction: 97
2016-08-07 20:38:28,287 - DEBUG --- Edges: [(97, 150, 'red'), (97, 163, 'green'), (156, 163, 'red'), (163, 231, 'blue'), (63, 70, 'green'), (64, 70, 'red'), (150, 156, 'green'), (70, 150, 'blue'), (56, 97, 'red'), (56, 63, 'blue'), (56, 231, 'green'), (63, 71, 'red')], is_regular: False
2016-08-07 20:38:28,288 - DEBUG --- tmp_next_edges_to_check: [(56, 97, 'red'), (97, 150, 'red'), (97, 163, 'green')]
2016-08-07 20:38:28,288 - DEBUG --- vertex: 97, edges_to_check: [(56, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:28,288 - DEBUG --- degree: 3
2016-08-07 20:38:28,288 - DEBUG --- Loop: current_edge: (56, 97, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,289 - DEBUG --- Vertex at direction: 56
2016-08-07 20:38:28,289 - DEBUG --- Edges: [(97, 150, 'red'), (97, 163, 'green'), (156, 163, 'red'), (163, 231, 'blue'), (63, 70, 'green'), (64, 70, 'red'), (150, 156, 'green'), (70, 150, 'blue'), (56, 97, 'blue'), (56, 63, 'blue'), (56, 231, 'green'), (63, 71, 'red')], is_regular: False
2016-08-07 20:38:28,289 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'blue'), (56, 97, 'blue'), (56, 231, 'green')]
2016-08-07 20:38:28,289 - DEBUG --- vertex: 56, edges_to_check: [(56, 63, 'blue'), (56, 231, 'green')]
2016-08-07 20:38:28,289 - DEBUG --- degree: 3
2016-08-07 20:38:28,290 - DEBUG --- Loop: current_edge: (56, 63, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,290 - DEBUG --- Vertex at direction: 63
2016-08-07 20:38:28,290 - DEBUG --- Edges: [(97, 150, 'red'), (97, 163, 'green'), (156, 163, 'red'), (163, 231, 'blue'), (63, 70, 'green'), (64, 70, 'red'), (150, 156, 'green'), (70, 150, 'blue'), (56, 97, 'blue'), (56, 63, 'red'), (56, 231, 'green'), (63, 71, 'red')], is_regular: False
2016-08-07 20:38:28,291 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'red'), (63, 70, 'green'), (63, 71, 'red')]
2016-08-07 20:38:28,291 - DEBUG --- vertex: 63, edges_to_check: [(63, 70, 'green'), (63, 71, 'red')]
2016-08-07 20:38:28,291 - DEBUG --- degree: 1
2016-08-07 20:38:28,291 - DEBUG --- END: kempe_chain_color_swap
2016-08-07 20:38:28,292 - DEBUG --- Edges: [(64, 71, 'green'), (97, 150, 'red'), (97, 163, 'green'), (156, 163, 'red'), (163, 231, 'blue'), (63, 70, 'green'), (64, 70, 'red'), (71, 231, 'red'), (150, 156, 'green'), (70, 150, 'blue'), (56, 97, 'blue'), (56, 63, 'red'), (56, 231, 'green'), (64, 156, 'blue'), (63, 71, 'blue')], is_regular: True
2016-08-07 20:38:28,292 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,292 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,292 - INFO --- END: restore an F4 - The two edges are on the same Kempe cycle
2016-08-07 20:38:28,293 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,293 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,293 - INFO --- ariadne_step: [4, 228, 159, 163, 156, 231, 64]
2016-08-07 20:38:28,293 - INFO --- BEGIN: restore an F4
2016-08-07 20:38:28,294 - DEBUG --- Edges: [(64, 71, 'green'), (97, 150, 'red'), (97, 163, 'green'), (156, 163, 'red'), (163, 231, 'blue'), (63, 70, 'green'), (64, 70, 'red'), (71, 231, 'red'), (150, 156, 'green'), (70, 150, 'blue'), (56, 97, 'blue'), (56, 63, 'red'), (56, 231, 'green'), (64, 156, 'blue'), (63, 71, 'blue')], is_regular: True
2016-08-07 20:38:28,294 - DEBUG --- previous_edge_color_at_v1: blue, previous_edge_color_at_v2: blue
2016-08-07 20:38:28,295 - DEBUG --- edge_color_of_top_edge: red
2016-08-07 20:38:28,295 - INFO --- BEGIN: restore an F4 - Same color at v1 and v2
2016-08-07 20:38:28,295 - DEBUG --- Edges: [(64, 71, 'green'), (97, 150, 'red'), (97, 163, 'green'), (156, 163, 'red'), (163, 231, 'blue'), (63, 70, 'green'), (64, 70, 'red'), (71, 231, 'red'), (150, 156, 'green'), (70, 150, 'blue'), (56, 97, 'blue'), (56, 63, 'red'), (56, 231, 'green'), (64, 156, 'blue'), (63, 71, 'blue')], is_regular: True
2016-08-07 20:38:28,296 - DEBUG --- Edges: [(64, 71, 'green'), (64, 159, 'blue'), (97, 150, 'red'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'green'), (63, 70, 'green'), (64, 70, 'red'), (71, 231, 'red'), (228, 231, 'blue'), (150, 156, 'green'), (70, 150, 'blue'), (56, 97, 'blue'), (56, 63, 'red'), (56, 231, 'green'), (63, 71, 'blue'), (156, 159, 'red')], is_regular: True
2016-08-07 20:38:28,296 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,296 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,296 - INFO --- END: restore an F4 - Same color at v1 and v2
2016-08-07 20:38:28,297 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,297 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,297 - INFO --- ariadne_step: [4, 126, 259, 64, 71, 159, 231]
2016-08-07 20:38:28,297 - INFO --- BEGIN: restore an F4
2016-08-07 20:38:28,298 - DEBUG --- Edges: [(64, 71, 'green'), (64, 159, 'blue'), (97, 150, 'red'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'green'), (63, 70, 'green'), (64, 70, 'red'), (71, 231, 'red'), (228, 231, 'blue'), (150, 156, 'green'), (70, 150, 'blue'), (56, 97, 'blue'), (56, 63, 'red'), (56, 231, 'green'), (63, 71, 'blue'), (156, 159, 'red')], is_regular: True
2016-08-07 20:38:28,298 - DEBUG --- previous_edge_color_at_v1: blue, previous_edge_color_at_v2: red
2016-08-07 20:38:28,298 - DEBUG --- edge_color_of_top_edge: green
2016-08-07 20:38:28,298 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (64, 159), (71, 231), blue, red
2016-08-07 20:38:28,298 - DEBUG --- out_of_scope_color: green
2016-08-07 20:38:28,299 - DEBUG --- current_color: blue
2016-08-07 20:38:28,299 - DEBUG --- Loop: current_edge: (64, 159), current_color: blue, next_color: red
2016-08-07 20:38:28,299 - DEBUG --- tmp_next_edges_to_check: [(64, 159, 'blue'), (156, 159, 'red'), (159, 228, 'green')]
2016-08-07 20:38:28,299 - DEBUG --- vertex: 159, edges_to_check: [(156, 159, 'red'), (159, 228, 'green')]
2016-08-07 20:38:28,299 - DEBUG --- current_color: red, next_color: blue, current_edge: (156, 159, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,300 - DEBUG --- Loop: current_edge: (156, 159, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,300 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'red'), (156, 163, 'blue')]
2016-08-07 20:38:28,300 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 163, 'blue')]
2016-08-07 20:38:28,300 - DEBUG --- current_color: blue, next_color: red, current_edge: (156, 163, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,300 - DEBUG --- Loop: current_edge: (156, 163, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,301 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red')]
2016-08-07 20:38:28,301 - DEBUG --- vertex: 163, edges_to_check: [(97, 163, 'green'), (163, 228, 'red')]
2016-08-07 20:38:28,301 - DEBUG --- current_color: red, next_color: blue, current_edge: (163, 228, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,301 - DEBUG --- Loop: current_edge: (163, 228, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,301 - DEBUG --- tmp_next_edges_to_check: [(159, 228, 'green'), (163, 228, 'red'), (228, 231, 'blue')]
2016-08-07 20:38:28,302 - DEBUG --- vertex: 228, edges_to_check: [(159, 228, 'green'), (228, 231, 'blue')]
2016-08-07 20:38:28,302 - DEBUG --- current_color: blue, next_color: red, current_edge: (228, 231, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,302 - DEBUG --- Loop: current_edge: (228, 231, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,302 - DEBUG --- tmp_next_edges_to_check: [(56, 231, 'green'), (71, 231, 'red'), (228, 231, 'blue')]
2016-08-07 20:38:28,303 - DEBUG --- vertex: 231, edges_to_check: [(56, 231, 'green'), (71, 231, 'red')]
2016-08-07 20:38:28,303 - DEBUG --- current_color: red, next_color: blue, current_edge: (71, 231, 'red'), are_edges_on_the_same_kempe_cycle: True, is_the_end_of_search_process: True
2016-08-07 20:38:28,303 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: True
2016-08-07 20:38:28,303 - INFO --- BEGIN: restore an F4 - The two edges are on the same Kempe cycle
2016-08-07 20:38:28,303 - DEBUG --- Edges: [(64, 71, 'green'), (64, 159, 'blue'), (97, 150, 'red'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'green'), (63, 70, 'green'), (64, 70, 'red'), (71, 231, 'red'), (228, 231, 'blue'), (150, 156, 'green'), (70, 150, 'blue'), (56, 97, 'blue'), (56, 63, 'red'), (56, 231, 'green'), (63, 71, 'blue'), (156, 159, 'red')], is_regular: True
2016-08-07 20:38:28,304 - DEBUG --- bbb: [(64, 71, 'green'), (64, 126, 'blue'), (97, 150, 'red'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'green'), (63, 70, 'green'), (64, 70, 'red'), (228, 231, 'blue'), (71, 259, 'red'), (150, 156, 'green'), (70, 150, 'blue'), (56, 97, 'blue'), (56, 63, 'red'), (56, 231, 'green'), (63, 71, 'blue'), (156, 159, 'red')], is_regular: False
2016-08-07 20:38:28,304 - DEBUG --- BEGIN: kempe_chain_color_swap: (126, 64), blue, red
2016-08-07 20:38:28,304 - DEBUG --- degree: 3
2016-08-07 20:38:28,304 - DEBUG --- Loop: current_edge: (126, 64), current_color: blue, next_color: red
2016-08-07 20:38:28,304 - DEBUG --- Vertex at direction: 64
2016-08-07 20:38:28,305 - DEBUG --- Edges: [(64, 71, 'green'), (64, 126, 'blue'), (97, 150, 'red'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'green'), (63, 70, 'green'), (64, 70, 'red'), (228, 231, 'blue'), (71, 259, 'red'), (150, 156, 'green'), (70, 150, 'blue'), (56, 97, 'blue'), (56, 63, 'red'), (56, 231, 'green'), (63, 71, 'blue'), (156, 159, 'red')], is_regular: False
2016-08-07 20:38:28,305 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'red'), (64, 71, 'green'), (64, 126, 'blue')]
2016-08-07 20:38:28,305 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'red'), (64, 71, 'green')]
2016-08-07 20:38:28,305 - DEBUG --- degree: 3
2016-08-07 20:38:28,305 - DEBUG --- Loop: current_edge: (64, 70, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,306 - DEBUG --- Vertex at direction: 70
2016-08-07 20:38:28,306 - DEBUG --- Edges: [(64, 71, 'green'), (64, 126, 'red'), (97, 150, 'red'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'green'), (63, 70, 'green'), (64, 70, 'blue'), (228, 231, 'blue'), (71, 259, 'red'), (150, 156, 'green'), (70, 150, 'blue'), (56, 97, 'blue'), (56, 63, 'red'), (56, 231, 'green'), (63, 71, 'blue'), (156, 159, 'red')], is_regular: False
2016-08-07 20:38:28,306 - DEBUG --- tmp_next_edges_to_check: [(63, 70, 'green'), (64, 70, 'blue'), (70, 150, 'blue')]
2016-08-07 20:38:28,306 - DEBUG --- vertex: 70, edges_to_check: [(63, 70, 'green'), (70, 150, 'blue')]
2016-08-07 20:38:28,307 - DEBUG --- degree: 3
2016-08-07 20:38:28,307 - DEBUG --- Loop: current_edge: (70, 150, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,307 - DEBUG --- Vertex at direction: 150
2016-08-07 20:38:28,307 - DEBUG --- Edges: [(64, 71, 'green'), (64, 126, 'red'), (97, 150, 'red'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'green'), (63, 70, 'green'), (64, 70, 'blue'), (228, 231, 'blue'), (71, 259, 'red'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'blue'), (56, 63, 'red'), (56, 231, 'green'), (63, 71, 'blue'), (156, 159, 'red')], is_regular: False
2016-08-07 20:38:28,308 - DEBUG --- tmp_next_edges_to_check: [(70, 150, 'red'), (97, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,308 - DEBUG --- vertex: 150, edges_to_check: [(97, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,308 - DEBUG --- degree: 3
2016-08-07 20:38:28,308 - DEBUG --- Loop: current_edge: (97, 150, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,309 - DEBUG --- Vertex at direction: 97
2016-08-07 20:38:28,309 - DEBUG --- Edges: [(64, 71, 'green'), (64, 126, 'red'), (97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'green'), (63, 70, 'green'), (64, 70, 'blue'), (228, 231, 'blue'), (71, 259, 'red'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'blue'), (56, 63, 'red'), (56, 231, 'green'), (63, 71, 'blue'), (156, 159, 'red')], is_regular: False
2016-08-07 20:38:28,309 - DEBUG --- tmp_next_edges_to_check: [(56, 97, 'blue'), (97, 150, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,309 - DEBUG --- vertex: 97, edges_to_check: [(56, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,310 - DEBUG --- degree: 3
2016-08-07 20:38:28,310 - DEBUG --- Loop: current_edge: (56, 97, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,310 - DEBUG --- Vertex at direction: 56
2016-08-07 20:38:28,310 - DEBUG --- Edges: [(64, 71, 'green'), (64, 126, 'red'), (97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'green'), (63, 70, 'green'), (64, 70, 'blue'), (228, 231, 'blue'), (71, 259, 'red'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'red'), (56, 231, 'green'), (63, 71, 'blue'), (156, 159, 'red')], is_regular: False
2016-08-07 20:38:28,310 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'red'), (56, 97, 'red'), (56, 231, 'green')]
2016-08-07 20:38:28,311 - DEBUG --- vertex: 56, edges_to_check: [(56, 63, 'red'), (56, 231, 'green')]
2016-08-07 20:38:28,311 - DEBUG --- degree: 3
2016-08-07 20:38:28,311 - DEBUG --- Loop: current_edge: (56, 63, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,311 - DEBUG --- Vertex at direction: 63
2016-08-07 20:38:28,311 - DEBUG --- Edges: [(64, 71, 'green'), (64, 126, 'red'), (97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'green'), (63, 70, 'green'), (64, 70, 'blue'), (228, 231, 'blue'), (71, 259, 'red'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'blue'), (56, 231, 'green'), (63, 71, 'blue'), (156, 159, 'red')], is_regular: False
2016-08-07 20:38:28,312 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'blue'), (63, 70, 'green'), (63, 71, 'blue')]
2016-08-07 20:38:28,312 - DEBUG --- vertex: 63, edges_to_check: [(63, 70, 'green'), (63, 71, 'blue')]
2016-08-07 20:38:28,312 - DEBUG --- degree: 3
2016-08-07 20:38:28,312 - DEBUG --- Loop: current_edge: (63, 71, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,312 - DEBUG --- Vertex at direction: 71
2016-08-07 20:38:28,313 - DEBUG --- Edges: [(64, 71, 'green'), (64, 126, 'red'), (97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'green'), (63, 70, 'green'), (64, 70, 'blue'), (228, 231, 'blue'), (71, 259, 'red'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'blue'), (56, 231, 'green'), (63, 71, 'red'), (156, 159, 'red')], is_regular: False
2016-08-07 20:38:28,313 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'red'), (64, 71, 'green'), (71, 259, 'red')]
2016-08-07 20:38:28,313 - DEBUG --- vertex: 71, edges_to_check: [(64, 71, 'green'), (71, 259, 'red')]
2016-08-07 20:38:28,313 - DEBUG --- degree: 1
2016-08-07 20:38:28,314 - DEBUG --- END: kempe_chain_color_swap
2016-08-07 20:38:28,314 - DEBUG --- Edges: [(64, 71, 'green'), (64, 126, 'red'), (97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'green'), (63, 70, 'green'), (64, 70, 'blue'), (228, 231, 'blue'), (231, 259, 'red'), (71, 259, 'blue'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'blue'), (56, 231, 'green'), (63, 71, 'red'), (156, 159, 'red'), (126, 259, 'green'), (126, 159, 'blue')], is_regular: True
2016-08-07 20:38:28,314 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,314 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,315 - INFO --- END: restore an F4 - The two edges are on the same Kempe cycle
2016-08-07 20:38:28,315 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,315 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,315 - INFO --- ariadne_step: [4, 59, 92, 70, 150, 63, 97]
2016-08-07 20:38:28,316 - INFO --- BEGIN: restore an F4
2016-08-07 20:38:28,316 - DEBUG --- Edges: [(64, 71, 'green'), (64, 126, 'red'), (97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'green'), (63, 70, 'green'), (64, 70, 'blue'), (228, 231, 'blue'), (231, 259, 'red'), (71, 259, 'blue'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'blue'), (56, 231, 'green'), (63, 71, 'red'), (156, 159, 'red'), (126, 259, 'green'), (126, 159, 'blue')], is_regular: True
2016-08-07 20:38:28,316 - DEBUG --- previous_edge_color_at_v1: green, previous_edge_color_at_v2: blue
2016-08-07 20:38:28,316 - DEBUG --- edge_color_of_top_edge: red
2016-08-07 20:38:28,317 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (70, 63), (150, 97), green, blue
2016-08-07 20:38:28,317 - DEBUG --- out_of_scope_color: red
2016-08-07 20:38:28,317 - DEBUG --- current_color: green
2016-08-07 20:38:28,317 - DEBUG --- Loop: current_edge: (70, 63), current_color: green, next_color: blue
2016-08-07 20:38:28,317 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'blue'), (63, 70, 'green'), (63, 71, 'red')]
2016-08-07 20:38:28,318 - DEBUG --- vertex: 63, edges_to_check: [(56, 63, 'blue'), (63, 71, 'red')]
2016-08-07 20:38:28,318 - DEBUG --- current_color: blue, next_color: green, current_edge: (56, 63, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,318 - DEBUG --- Loop: current_edge: (56, 63, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,318 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'blue'), (56, 97, 'red'), (56, 231, 'green')]
2016-08-07 20:38:28,318 - DEBUG --- vertex: 56, edges_to_check: [(56, 97, 'red'), (56, 231, 'green')]
2016-08-07 20:38:28,319 - DEBUG --- current_color: green, next_color: blue, current_edge: (56, 231, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,319 - DEBUG --- Loop: current_edge: (56, 231, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,319 - DEBUG --- tmp_next_edges_to_check: [(56, 231, 'green'), (228, 231, 'blue'), (231, 259, 'red')]
2016-08-07 20:38:28,319 - DEBUG --- vertex: 231, edges_to_check: [(228, 231, 'blue'), (231, 259, 'red')]
2016-08-07 20:38:28,319 - DEBUG --- current_color: blue, next_color: green, current_edge: (228, 231, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,320 - DEBUG --- Loop: current_edge: (228, 231, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,320 - DEBUG --- tmp_next_edges_to_check: [(159, 228, 'green'), (163, 228, 'red'), (228, 231, 'blue')]
2016-08-07 20:38:28,321 - DEBUG --- vertex: 228, edges_to_check: [(159, 228, 'green'), (163, 228, 'red')]
2016-08-07 20:38:28,321 - DEBUG --- current_color: green, next_color: blue, current_edge: (159, 228, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,321 - DEBUG --- Loop: current_edge: (159, 228, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,321 - DEBUG --- tmp_next_edges_to_check: [(126, 159, 'blue'), (156, 159, 'red'), (159, 228, 'green')]
2016-08-07 20:38:28,322 - DEBUG --- vertex: 159, edges_to_check: [(126, 159, 'blue'), (156, 159, 'red')]
2016-08-07 20:38:28,322 - DEBUG --- current_color: blue, next_color: green, current_edge: (126, 159, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,322 - DEBUG --- Loop: current_edge: (126, 159, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,322 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'red'), (126, 159, 'blue'), (126, 259, 'green')]
2016-08-07 20:38:28,322 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'red'), (126, 259, 'green')]
2016-08-07 20:38:28,323 - DEBUG --- current_color: green, next_color: blue, current_edge: (126, 259, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,323 - DEBUG --- Loop: current_edge: (126, 259, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,323 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'blue'), (126, 259, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,323 - DEBUG --- vertex: 259, edges_to_check: [(71, 259, 'blue'), (231, 259, 'red')]
2016-08-07 20:38:28,323 - DEBUG --- current_color: blue, next_color: green, current_edge: (71, 259, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,324 - DEBUG --- Loop: current_edge: (71, 259, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,324 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'red'), (64, 71, 'green'), (71, 259, 'blue')]
2016-08-07 20:38:28,324 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'red'), (64, 71, 'green')]
2016-08-07 20:38:28,324 - DEBUG --- current_color: green, next_color: blue, current_edge: (64, 71, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,325 - DEBUG --- Loop: current_edge: (64, 71, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,325 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'blue'), (64, 71, 'green'), (64, 126, 'red')]
2016-08-07 20:38:28,325 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'blue'), (64, 126, 'red')]
2016-08-07 20:38:28,325 - DEBUG --- current_color: blue, next_color: green, current_edge: (64, 70, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,325 - DEBUG --- Loop: current_edge: (64, 70, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,326 - DEBUG --- tmp_next_edges_to_check: [(63, 70, 'green'), (64, 70, 'blue'), (70, 150, 'red')]
2016-08-07 20:38:28,326 - DEBUG --- vertex: 70, edges_to_check: [(63, 70, 'green'), (70, 150, 'red')]
2016-08-07 20:38:28,326 - DEBUG --- current_color: green, next_color: blue, current_edge: (63, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:28,326 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:28,326 - INFO --- BEGIN: restore an F4 - The two edges are NOT on the same Kempe cycle
2016-08-07 20:38:28,327 - DEBUG --- Edges: [(64, 71, 'green'), (64, 126, 'red'), (97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'green'), (63, 70, 'green'), (64, 70, 'blue'), (228, 231, 'blue'), (231, 259, 'red'), (71, 259, 'blue'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'blue'), (56, 231, 'green'), (63, 71, 'red'), (156, 159, 'red'), (126, 259, 'green'), (126, 159, 'blue')], is_regular: True
2016-08-07 20:38:28,327 - DEBUG --- BEGIN: kempe_chain_color_swap: (70, 63), green, blue
2016-08-07 20:38:28,327 - DEBUG --- degree: 3
2016-08-07 20:38:28,327 - DEBUG --- Loop: current_edge: (70, 63), current_color: green, next_color: blue
2016-08-07 20:38:28,328 - DEBUG --- Vertex at direction: 63
2016-08-07 20:38:28,328 - DEBUG --- Edges: [(64, 71, 'green'), (64, 126, 'red'), (97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'green'), (63, 70, 'green'), (64, 70, 'blue'), (228, 231, 'blue'), (231, 259, 'red'), (71, 259, 'blue'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'blue'), (56, 231, 'green'), (63, 71, 'red'), (156, 159, 'red'), (126, 259, 'green'), (126, 159, 'blue')], is_regular: True
2016-08-07 20:38:28,328 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'blue'), (63, 70, 'green'), (63, 71, 'red')]
2016-08-07 20:38:28,329 - DEBUG --- vertex: 63, edges_to_check: [(56, 63, 'blue'), (63, 71, 'red')]
2016-08-07 20:38:28,329 - DEBUG --- degree: 3
2016-08-07 20:38:28,329 - DEBUG --- Loop: current_edge: (56, 63, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,329 - DEBUG --- Vertex at direction: 56
2016-08-07 20:38:28,329 - DEBUG --- Edges: [(64, 71, 'green'), (64, 126, 'red'), (97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'green'), (63, 70, 'blue'), (64, 70, 'blue'), (228, 231, 'blue'), (231, 259, 'red'), (71, 259, 'blue'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'green'), (63, 71, 'red'), (156, 159, 'red'), (126, 259, 'green'), (126, 159, 'blue')], is_regular: True
2016-08-07 20:38:28,330 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'green'), (56, 97, 'red'), (56, 231, 'green')]
2016-08-07 20:38:28,330 - DEBUG --- vertex: 56, edges_to_check: [(56, 97, 'red'), (56, 231, 'green')]
2016-08-07 20:38:28,330 - DEBUG --- degree: 3
2016-08-07 20:38:28,330 - DEBUG --- Loop: current_edge: (56, 231, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,330 - DEBUG --- Vertex at direction: 231
2016-08-07 20:38:28,331 - DEBUG --- Edges: [(64, 71, 'green'), (64, 126, 'red'), (97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'green'), (63, 70, 'blue'), (64, 70, 'blue'), (228, 231, 'blue'), (231, 259, 'red'), (71, 259, 'blue'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (63, 71, 'red'), (156, 159, 'red'), (126, 259, 'green'), (126, 159, 'blue')], is_regular: True
2016-08-07 20:38:28,331 - DEBUG --- tmp_next_edges_to_check: [(56, 231, 'blue'), (228, 231, 'blue'), (231, 259, 'red')]
2016-08-07 20:38:28,331 - DEBUG --- vertex: 231, edges_to_check: [(228, 231, 'blue'), (231, 259, 'red')]
2016-08-07 20:38:28,331 - DEBUG --- degree: 3
2016-08-07 20:38:28,332 - DEBUG --- Loop: current_edge: (228, 231, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,332 - DEBUG --- Vertex at direction: 228
2016-08-07 20:38:28,332 - DEBUG --- Edges: [(64, 71, 'green'), (64, 126, 'red'), (97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'green'), (63, 70, 'blue'), (64, 70, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (71, 259, 'blue'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (63, 71, 'red'), (156, 159, 'red'), (126, 259, 'green'), (126, 159, 'blue')], is_regular: True
2016-08-07 20:38:28,332 - DEBUG --- tmp_next_edges_to_check: [(159, 228, 'green'), (163, 228, 'red'), (228, 231, 'green')]
2016-08-07 20:38:28,333 - DEBUG --- vertex: 228, edges_to_check: [(159, 228, 'green'), (163, 228, 'red')]
2016-08-07 20:38:28,333 - DEBUG --- degree: 3
2016-08-07 20:38:28,333 - DEBUG --- Loop: current_edge: (159, 228, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,333 - DEBUG --- Vertex at direction: 159
2016-08-07 20:38:28,334 - DEBUG --- Edges: [(64, 71, 'green'), (64, 126, 'red'), (97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'blue'), (63, 70, 'blue'), (64, 70, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (71, 259, 'blue'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (63, 71, 'red'), (156, 159, 'red'), (126, 259, 'green'), (126, 159, 'blue')], is_regular: True
2016-08-07 20:38:28,334 - DEBUG --- tmp_next_edges_to_check: [(126, 159, 'blue'), (156, 159, 'red'), (159, 228, 'blue')]
2016-08-07 20:38:28,334 - DEBUG --- vertex: 159, edges_to_check: [(126, 159, 'blue'), (156, 159, 'red')]
2016-08-07 20:38:28,334 - DEBUG --- degree: 3
2016-08-07 20:38:28,334 - DEBUG --- Loop: current_edge: (126, 159, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,335 - DEBUG --- Vertex at direction: 126
2016-08-07 20:38:28,335 - DEBUG --- Edges: [(64, 71, 'green'), (64, 126, 'red'), (97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'blue'), (63, 70, 'blue'), (64, 70, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (71, 259, 'blue'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (63, 71, 'red'), (156, 159, 'red'), (126, 259, 'green'), (126, 159, 'green')], is_regular: True
2016-08-07 20:38:28,335 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'red'), (126, 159, 'green'), (126, 259, 'green')]
2016-08-07 20:38:28,335 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'red'), (126, 259, 'green')]
2016-08-07 20:38:28,336 - DEBUG --- degree: 3
2016-08-07 20:38:28,336 - DEBUG --- Loop: current_edge: (126, 259, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,336 - DEBUG --- Vertex at direction: 259
2016-08-07 20:38:28,336 - DEBUG --- Edges: [(64, 71, 'green'), (64, 126, 'red'), (97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'blue'), (63, 70, 'blue'), (64, 70, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (71, 259, 'blue'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (63, 71, 'red'), (156, 159, 'red'), (126, 259, 'blue'), (126, 159, 'green')], is_regular: True
2016-08-07 20:38:28,337 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'blue'), (126, 259, 'blue'), (231, 259, 'red')]
2016-08-07 20:38:28,337 - DEBUG --- vertex: 259, edges_to_check: [(71, 259, 'blue'), (231, 259, 'red')]
2016-08-07 20:38:28,337 - DEBUG --- degree: 3
2016-08-07 20:38:28,337 - DEBUG --- Loop: current_edge: (71, 259, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,338 - DEBUG --- Vertex at direction: 71
2016-08-07 20:38:28,338 - DEBUG --- Edges: [(64, 71, 'green'), (64, 126, 'red'), (97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'blue'), (63, 70, 'blue'), (64, 70, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (71, 259, 'green'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (63, 71, 'red'), (156, 159, 'red'), (126, 259, 'blue'), (126, 159, 'green')], is_regular: True
2016-08-07 20:38:28,338 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'red'), (64, 71, 'green'), (71, 259, 'green')]
2016-08-07 20:38:28,338 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'red'), (64, 71, 'green')]
2016-08-07 20:38:28,338 - DEBUG --- degree: 3
2016-08-07 20:38:28,339 - DEBUG --- Loop: current_edge: (64, 71, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,339 - DEBUG --- Vertex at direction: 64
2016-08-07 20:38:28,339 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'blue'), (63, 70, 'blue'), (64, 70, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (71, 259, 'green'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (63, 71, 'red'), (156, 159, 'red'), (126, 259, 'blue'), (126, 159, 'green')], is_regular: True
2016-08-07 20:38:28,339 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'blue'), (64, 71, 'blue'), (64, 126, 'red')]
2016-08-07 20:38:28,340 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'blue'), (64, 126, 'red')]
2016-08-07 20:38:28,340 - DEBUG --- degree: 3
2016-08-07 20:38:28,340 - DEBUG --- Loop: current_edge: (64, 70, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,340 - DEBUG --- Vertex at direction: 70
2016-08-07 20:38:28,340 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 150, 'blue'), (97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'blue'), (63, 70, 'blue'), (64, 70, 'green'), (228, 231, 'green'), (231, 259, 'red'), (71, 259, 'green'), (150, 156, 'green'), (70, 150, 'red'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (63, 71, 'red'), (156, 159, 'red'), (126, 259, 'blue'), (126, 159, 'green')], is_regular: True
2016-08-07 20:38:28,341 - DEBUG --- tmp_next_edges_to_check: [(63, 70, 'blue'), (64, 70, 'green'), (70, 150, 'red')]
2016-08-07 20:38:28,341 - DEBUG --- vertex: 70, edges_to_check: [(63, 70, 'blue'), (70, 150, 'red')]
2016-08-07 20:38:28,341 - DEBUG --- END: kempe_chain_color_swap
2016-08-07 20:38:28,342 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 163, 'green'), (92, 97, 'blue'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (228, 231, 'green'), (231, 259, 'red'), (156, 159, 'red'), (71, 259, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (150, 156, 'green'), (70, 150, 'blue'), (92, 150, 'red'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (59, 92, 'green'), (126, 259, 'blue'), (126, 159, 'green')], is_regular: True
2016-08-07 20:38:28,342 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,342 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,342 - INFO --- END: restore an F4 - The two edges are NOT on the same Kempe cycle
2016-08-07 20:38:28,343 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,343 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,343 - INFO --- ariadne_step: [4, 161, 137, 159, 126, 228, 259]
2016-08-07 20:38:28,343 - INFO --- BEGIN: restore an F4
2016-08-07 20:38:28,344 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 163, 'green'), (92, 97, 'blue'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (228, 231, 'green'), (231, 259, 'red'), (156, 159, 'red'), (71, 259, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (150, 156, 'green'), (70, 150, 'blue'), (92, 150, 'red'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (59, 92, 'green'), (126, 259, 'blue'), (126, 159, 'green')], is_regular: True
2016-08-07 20:38:28,344 - DEBUG --- previous_edge_color_at_v1: blue, previous_edge_color_at_v2: blue
2016-08-07 20:38:28,344 - DEBUG --- edge_color_of_top_edge: green
2016-08-07 20:38:28,344 - INFO --- BEGIN: restore an F4 - Same color at v1 and v2
2016-08-07 20:38:28,345 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 163, 'green'), (92, 97, 'blue'), (156, 163, 'blue'), (163, 228, 'red'), (159, 228, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (228, 231, 'green'), (231, 259, 'red'), (156, 159, 'red'), (71, 259, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (150, 156, 'green'), (70, 150, 'blue'), (92, 150, 'red'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (59, 92, 'green'), (126, 259, 'blue'), (126, 159, 'green')], is_regular: True
2016-08-07 20:38:28,346 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 163, 'green'), (92, 97, 'blue'), (156, 163, 'blue'), (163, 228, 'red'), (161, 228, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (228, 231, 'green'), (231, 259, 'red'), (137, 161, 'red'), (71, 259, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (156, 159, 'red'), (137, 259, 'blue'), (150, 156, 'green'), (70, 150, 'blue'), (92, 150, 'red'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (59, 92, 'green'), (126, 137, 'green'), (159, 161, 'green'), (126, 159, 'blue')], is_regular: True
2016-08-07 20:38:28,346 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,346 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,347 - INFO --- END: restore an F4 - Same color at v1 and v2
2016-08-07 20:38:28,347 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,347 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,347 - INFO --- ariadne_step: [5, 123, 119, 159, 150, 126, 70]
2016-08-07 20:38:28,348 - INFO --- BEGIN: restore an F5
2016-08-07 20:38:28,348 - DEBUG --- c1: blue, c2: blue, c3: red, c4: green
2016-08-07 20:38:28,348 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (126, 159), (70, 150), blue, red
2016-08-07 20:38:28,348 - DEBUG --- out_of_scope_color: green
2016-08-07 20:38:28,348 - DEBUG --- current_color: blue
2016-08-07 20:38:28,349 - DEBUG --- Loop: current_edge: (126, 159), current_color: blue, next_color: red
2016-08-07 20:38:28,349 - DEBUG --- tmp_next_edges_to_check: [(126, 159, 'blue'), (156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,349 - DEBUG --- vertex: 159, edges_to_check: [(156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,349 - DEBUG --- current_color: red, next_color: blue, current_edge: (156, 159, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,350 - DEBUG --- Loop: current_edge: (156, 159, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,350 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'red'), (156, 163, 'blue')]
2016-08-07 20:38:28,350 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 163, 'blue')]
2016-08-07 20:38:28,350 - DEBUG --- current_color: blue, next_color: red, current_edge: (156, 163, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,350 - DEBUG --- Loop: current_edge: (156, 163, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,351 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'blue'), (163, 228, 'red')]
2016-08-07 20:38:28,351 - DEBUG --- vertex: 163, edges_to_check: [(97, 163, 'green'), (163, 228, 'red')]
2016-08-07 20:38:28,351 - DEBUG --- current_color: red, next_color: blue, current_edge: (163, 228, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,351 - DEBUG --- Loop: current_edge: (163, 228, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,351 - DEBUG --- tmp_next_edges_to_check: [(161, 228, 'blue'), (163, 228, 'red'), (228, 231, 'green')]
2016-08-07 20:38:28,352 - DEBUG --- vertex: 228, edges_to_check: [(161, 228, 'blue'), (228, 231, 'green')]
2016-08-07 20:38:28,352 - DEBUG --- current_color: blue, next_color: red, current_edge: (161, 228, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,352 - DEBUG --- Loop: current_edge: (161, 228, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,352 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'red'), (159, 161, 'green'), (161, 228, 'blue')]
2016-08-07 20:38:28,352 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,353 - DEBUG --- current_color: red, next_color: blue, current_edge: (137, 161, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,353 - DEBUG --- Loop: current_edge: (137, 161, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,353 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'red'), (137, 259, 'blue')]
2016-08-07 20:38:28,353 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 259, 'blue')]
2016-08-07 20:38:28,354 - DEBUG --- current_color: blue, next_color: red, current_edge: (137, 259, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,354 - DEBUG --- Loop: current_edge: (137, 259, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,354 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'green'), (137, 259, 'blue'), (231, 259, 'red')]
2016-08-07 20:38:28,354 - DEBUG --- vertex: 259, edges_to_check: [(71, 259, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,354 - DEBUG --- current_color: red, next_color: blue, current_edge: (231, 259, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,355 - DEBUG --- Loop: current_edge: (231, 259, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,355 - DEBUG --- tmp_next_edges_to_check: [(56, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,355 - DEBUG --- vertex: 231, edges_to_check: [(56, 231, 'blue'), (228, 231, 'green')]
2016-08-07 20:38:28,355 - DEBUG --- current_color: blue, next_color: red, current_edge: (56, 231, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,355 - DEBUG --- Loop: current_edge: (56, 231, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,356 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'green'), (56, 97, 'red'), (56, 231, 'blue')]
2016-08-07 20:38:28,356 - DEBUG --- vertex: 56, edges_to_check: [(56, 63, 'green'), (56, 97, 'red')]
2016-08-07 20:38:28,356 - DEBUG --- current_color: red, next_color: blue, current_edge: (56, 97, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,356 - DEBUG --- Loop: current_edge: (56, 97, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,357 - DEBUG --- tmp_next_edges_to_check: [(56, 97, 'red'), (92, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,357 - DEBUG --- vertex: 97, edges_to_check: [(92, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,357 - DEBUG --- current_color: blue, next_color: red, current_edge: (92, 97, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,357 - DEBUG --- Loop: current_edge: (92, 97, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,357 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,358 - DEBUG --- vertex: 92, edges_to_check: [(59, 92, 'green'), (92, 150, 'red')]
2016-08-07 20:38:28,358 - DEBUG --- current_color: red, next_color: blue, current_edge: (92, 150, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,358 - DEBUG --- Loop: current_edge: (92, 150, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,358 - DEBUG --- tmp_next_edges_to_check: [(70, 150, 'blue'), (92, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,359 - DEBUG --- vertex: 150, edges_to_check: [(70, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,359 - DEBUG --- current_color: blue, next_color: red, current_edge: (70, 150, 'blue'), are_edges_on_the_same_kempe_cycle: True, is_the_end_of_search_process: True
2016-08-07 20:38:28,359 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: True
2016-08-07 20:38:28,359 - DEBUG --- CASE-F5-C1==C2-SameKempeLoop-C1-C3
2016-08-07 20:38:28,359 - DEBUG --- BEGIN: kempe_chain_color_swap: (123, 159), blue, red
2016-08-07 20:38:28,360 - DEBUG --- degree: 3
2016-08-07 20:38:28,360 - DEBUG --- Loop: current_edge: (123, 159), current_color: blue, next_color: red
2016-08-07 20:38:28,360 - DEBUG --- Vertex at direction: 159
2016-08-07 20:38:28,360 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 163, 'green'), (92, 97, 'blue'), (156, 163, 'blue'), (163, 228, 'red'), (161, 228, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (228, 231, 'green'), (231, 259, 'red'), (137, 161, 'red'), (71, 259, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (59, 92, 'green'), (156, 159, 'red'), (137, 259, 'blue'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (126, 137, 'green'), (159, 161, 'green'), (123, 159, 'blue')], is_regular: False
2016-08-07 20:38:28,360 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'blue'), (156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,361 - DEBUG --- vertex: 159, edges_to_check: [(156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,361 - DEBUG --- degree: 3
2016-08-07 20:38:28,361 - DEBUG --- Loop: current_edge: (156, 159, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,361 - DEBUG --- Vertex at direction: 156
2016-08-07 20:38:28,361 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 163, 'green'), (92, 97, 'blue'), (156, 163, 'blue'), (163, 228, 'red'), (161, 228, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (228, 231, 'green'), (231, 259, 'red'), (137, 161, 'red'), (71, 259, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (59, 92, 'green'), (156, 159, 'blue'), (137, 259, 'blue'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (126, 137, 'green'), (159, 161, 'green'), (123, 159, 'red')], is_regular: False
2016-08-07 20:38:28,362 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'blue'), (156, 163, 'blue')]
2016-08-07 20:38:28,362 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 163, 'blue')]
2016-08-07 20:38:28,362 - DEBUG --- degree: 3
2016-08-07 20:38:28,362 - DEBUG --- Loop: current_edge: (156, 163, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,362 - DEBUG --- Vertex at direction: 163
2016-08-07 20:38:28,363 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 163, 'green'), (92, 97, 'blue'), (156, 163, 'red'), (163, 228, 'red'), (161, 228, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (228, 231, 'green'), (231, 259, 'red'), (137, 161, 'red'), (71, 259, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (59, 92, 'green'), (156, 159, 'blue'), (137, 259, 'blue'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (126, 137, 'green'), (159, 161, 'green'), (123, 159, 'red')], is_regular: False
2016-08-07 20:38:28,363 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'red'), (163, 228, 'red')]
2016-08-07 20:38:28,363 - DEBUG --- vertex: 163, edges_to_check: [(97, 163, 'green'), (163, 228, 'red')]
2016-08-07 20:38:28,363 - DEBUG --- degree: 3
2016-08-07 20:38:28,363 - DEBUG --- Loop: current_edge: (163, 228, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,364 - DEBUG --- Vertex at direction: 228
2016-08-07 20:38:28,364 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 163, 'green'), (92, 97, 'blue'), (156, 163, 'red'), (163, 228, 'blue'), (161, 228, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (228, 231, 'green'), (231, 259, 'red'), (137, 161, 'red'), (71, 259, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (59, 92, 'green'), (156, 159, 'blue'), (137, 259, 'blue'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (126, 137, 'green'), (159, 161, 'green'), (123, 159, 'red')], is_regular: False
2016-08-07 20:38:28,364 - DEBUG --- tmp_next_edges_to_check: [(161, 228, 'blue'), (163, 228, 'blue'), (228, 231, 'green')]
2016-08-07 20:38:28,364 - DEBUG --- vertex: 228, edges_to_check: [(161, 228, 'blue'), (228, 231, 'green')]
2016-08-07 20:38:28,364 - DEBUG --- degree: 3
2016-08-07 20:38:28,365 - DEBUG --- Loop: current_edge: (161, 228, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,365 - DEBUG --- Vertex at direction: 161
2016-08-07 20:38:28,365 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 163, 'green'), (92, 97, 'blue'), (156, 163, 'red'), (163, 228, 'blue'), (161, 228, 'red'), (64, 70, 'green'), (59, 70, 'red'), (228, 231, 'green'), (231, 259, 'red'), (137, 161, 'red'), (71, 259, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (59, 92, 'green'), (156, 159, 'blue'), (137, 259, 'blue'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (126, 137, 'green'), (159, 161, 'green'), (123, 159, 'red')], is_regular: False
2016-08-07 20:38:28,365 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'red'), (159, 161, 'green'), (161, 228, 'red')]
2016-08-07 20:38:28,366 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,366 - DEBUG --- degree: 3
2016-08-07 20:38:28,366 - DEBUG --- Loop: current_edge: (137, 161, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,366 - DEBUG --- Vertex at direction: 137
2016-08-07 20:38:28,366 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 163, 'green'), (92, 97, 'blue'), (156, 163, 'red'), (163, 228, 'blue'), (161, 228, 'red'), (64, 70, 'green'), (59, 70, 'red'), (228, 231, 'green'), (231, 259, 'red'), (137, 161, 'blue'), (71, 259, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (59, 92, 'green'), (156, 159, 'blue'), (137, 259, 'blue'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (126, 137, 'green'), (159, 161, 'green'), (123, 159, 'red')], is_regular: False
2016-08-07 20:38:28,367 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'blue'), (137, 259, 'blue')]
2016-08-07 20:38:28,367 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 259, 'blue')]
2016-08-07 20:38:28,367 - DEBUG --- degree: 3
2016-08-07 20:38:28,367 - DEBUG --- Loop: current_edge: (137, 259, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,368 - DEBUG --- Vertex at direction: 259
2016-08-07 20:38:28,368 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 163, 'green'), (92, 97, 'blue'), (156, 163, 'red'), (163, 228, 'blue'), (161, 228, 'red'), (64, 70, 'green'), (59, 70, 'red'), (228, 231, 'green'), (231, 259, 'red'), (137, 161, 'blue'), (71, 259, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (59, 92, 'green'), (156, 159, 'blue'), (137, 259, 'red'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (126, 137, 'green'), (159, 161, 'green'), (123, 159, 'red')], is_regular: False
2016-08-07 20:38:28,368 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'green'), (137, 259, 'red'), (231, 259, 'red')]
2016-08-07 20:38:28,368 - DEBUG --- vertex: 259, edges_to_check: [(71, 259, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,368 - DEBUG --- degree: 3
2016-08-07 20:38:28,369 - DEBUG --- Loop: current_edge: (231, 259, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,369 - DEBUG --- Vertex at direction: 231
2016-08-07 20:38:28,369 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 163, 'green'), (92, 97, 'blue'), (156, 163, 'red'), (163, 228, 'blue'), (161, 228, 'red'), (64, 70, 'green'), (59, 70, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (137, 161, 'blue'), (71, 259, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (59, 92, 'green'), (156, 159, 'blue'), (137, 259, 'red'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (126, 137, 'green'), (159, 161, 'green'), (123, 159, 'red')], is_regular: False
2016-08-07 20:38:28,369 - DEBUG --- tmp_next_edges_to_check: [(56, 231, 'blue'), (228, 231, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,369 - DEBUG --- vertex: 231, edges_to_check: [(56, 231, 'blue'), (228, 231, 'green')]
2016-08-07 20:38:28,370 - DEBUG --- degree: 3
2016-08-07 20:38:28,370 - DEBUG --- Loop: current_edge: (56, 231, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,370 - DEBUG --- Vertex at direction: 56
2016-08-07 20:38:28,370 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 163, 'green'), (92, 97, 'blue'), (156, 163, 'red'), (163, 228, 'blue'), (161, 228, 'red'), (64, 70, 'green'), (59, 70, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (137, 161, 'blue'), (71, 259, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (59, 92, 'green'), (156, 159, 'blue'), (137, 259, 'red'), (56, 97, 'red'), (56, 63, 'green'), (56, 231, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (126, 137, 'green'), (159, 161, 'green'), (123, 159, 'red')], is_regular: False
2016-08-07 20:38:28,371 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'green'), (56, 97, 'red'), (56, 231, 'red')]
2016-08-07 20:38:28,371 - DEBUG --- vertex: 56, edges_to_check: [(56, 63, 'green'), (56, 97, 'red')]
2016-08-07 20:38:28,371 - DEBUG --- degree: 3
2016-08-07 20:38:28,371 - DEBUG --- Loop: current_edge: (56, 97, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,371 - DEBUG --- Vertex at direction: 97
2016-08-07 20:38:28,372 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 163, 'green'), (92, 97, 'blue'), (156, 163, 'red'), (163, 228, 'blue'), (161, 228, 'red'), (64, 70, 'green'), (59, 70, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (137, 161, 'blue'), (71, 259, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (59, 92, 'green'), (156, 159, 'blue'), (137, 259, 'red'), (56, 97, 'blue'), (56, 63, 'green'), (56, 231, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (126, 137, 'green'), (159, 161, 'green'), (123, 159, 'red')], is_regular: False
2016-08-07 20:38:28,372 - DEBUG --- tmp_next_edges_to_check: [(56, 97, 'blue'), (92, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,372 - DEBUG --- vertex: 97, edges_to_check: [(92, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,372 - DEBUG --- degree: 3
2016-08-07 20:38:28,373 - DEBUG --- Loop: current_edge: (92, 97, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,373 - DEBUG --- Vertex at direction: 92
2016-08-07 20:38:28,374 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 163, 'green'), (92, 97, 'red'), (156, 163, 'red'), (163, 228, 'blue'), (161, 228, 'red'), (64, 70, 'green'), (59, 70, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (137, 161, 'blue'), (71, 259, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (59, 92, 'green'), (156, 159, 'blue'), (137, 259, 'red'), (56, 97, 'blue'), (56, 63, 'green'), (56, 231, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (126, 137, 'green'), (159, 161, 'green'), (123, 159, 'red')], is_regular: False
2016-08-07 20:38:28,374 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'red'), (92, 150, 'red')]
2016-08-07 20:38:28,374 - DEBUG --- vertex: 92, edges_to_check: [(59, 92, 'green'), (92, 150, 'red')]
2016-08-07 20:38:28,375 - DEBUG --- degree: 3
2016-08-07 20:38:28,375 - DEBUG --- Loop: current_edge: (92, 150, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,375 - DEBUG --- Vertex at direction: 150
2016-08-07 20:38:28,375 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 163, 'green'), (92, 97, 'red'), (156, 163, 'red'), (163, 228, 'blue'), (161, 228, 'red'), (64, 70, 'green'), (59, 70, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (137, 161, 'blue'), (71, 259, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (59, 92, 'green'), (156, 159, 'blue'), (137, 259, 'red'), (56, 97, 'blue'), (56, 63, 'green'), (56, 231, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'blue'), (126, 137, 'green'), (159, 161, 'green'), (123, 159, 'red')], is_regular: False
2016-08-07 20:38:28,375 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'blue'), (119, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,376 - DEBUG --- vertex: 150, edges_to_check: [(119, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,376 - DEBUG --- degree: 1
2016-08-07 20:38:28,376 - DEBUG --- END: kempe_chain_color_swap
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
2016-08-07 20:38:28,376 - INFO --- ------------------
2016-08-07 20:38:28,377 - INFO --- BEGIN: Print stats
2016-08-07 20:38:28,377 - INFO --- ------------------
2016-08-07 20:38:28,377 - INFO --- Stat: CASE-F2-01 = 0 times
2016-08-07 20:38:28,377 - INFO --- Stat: CASE-F3-01 = 2 times
2016-08-07 20:38:28,377 - INFO --- Stat: CASE-F4-01 = 2 times
2016-08-07 20:38:28,378 - INFO --- Stat: CASE-F4-02 = 2 times
2016-08-07 20:38:28,378 - INFO --- Stat: CASE-F4-03 = 1 times
2016-08-07 20:38:28,378 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:28,378 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-Swap-C1-C2-At-v2 = 0 times
2016-08-07 20:38:28,378 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:28,379 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-Swap-C2-C1-At-v2 = 0 times
2016-08-07 20:38:28,379 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4==C1-Shortest-KempeLoop = 0 times
2016-08-07 20:38:28,379 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C3 = 1 times
2016-08-07 20:38:28,379 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C4 = 0 times
2016-08-07 20:38:28,379 - INFO --- Stat: CASE-F5-C1==C2-Swap-C3-C4-OnTop = 0 times
2016-08-07 20:38:28,380 - INFO --- ----------------
2016-08-07 20:38:28,380 - INFO --- END: Print stats
2016-08-07 20:38:28,380 - INFO --- ----------------
2016-08-07 20:38:28,380 - INFO --- END: restore an F5
2016-08-07 20:38:28,380 - INFO --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 163, 'green'), (92, 97, 'red'), (156, 163, 'red'), (163, 228, 'blue'), (161, 228, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (137, 161, 'blue'), (71, 259, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (59, 92, 'green'), (156, 159, 'blue'), (137, 259, 'red'), (56, 97, 'blue'), (56, 63, 'green'), (56, 231, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue'), (159, 161, 'green'), (123, 159, 'red')], is_regular: True
2016-08-07 20:38:28,381 - INFO --- vertex: 64, edges: [(64, 70, 'green'), (64, 71, 'blue'), (64, 126, 'red')], is well colored: True
2016-08-07 20:38:28,381 - INFO --- vertex: 97, edges: [(56, 97, 'blue'), (92, 97, 'red'), (97, 163, 'green')], is well colored: True
2016-08-07 20:38:28,381 - INFO --- vertex: 163, edges: [(97, 163, 'green'), (156, 163, 'red'), (163, 228, 'blue')], is well colored: True
2016-08-07 20:38:28,381 - INFO --- vertex: 228, edges: [(161, 228, 'red'), (163, 228, 'blue'), (228, 231, 'green')], is well colored: True
2016-08-07 20:38:28,382 - INFO --- vertex: 70, edges: [(59, 70, 'red'), (64, 70, 'green'), (70, 119, 'blue')], is well colored: True
2016-08-07 20:38:28,382 - INFO --- vertex: 231, edges: [(56, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue')], is well colored: True
2016-08-07 20:38:28,382 - INFO --- vertex: 161, edges: [(137, 161, 'blue'), (159, 161, 'green'), (161, 228, 'red')], is well colored: True
2016-08-07 20:38:28,382 - INFO --- vertex: 71, edges: [(63, 71, 'red'), (64, 71, 'blue'), (71, 259, 'green')], is well colored: True
2016-08-07 20:38:28,382 - INFO --- vertex: 63, edges: [(56, 63, 'green'), (59, 63, 'blue'), (63, 71, 'red')], is well colored: True
2016-08-07 20:38:28,383 - INFO --- vertex: 59, edges: [(59, 63, 'blue'), (59, 70, 'red'), (59, 92, 'green')], is well colored: True
2016-08-07 20:38:28,383 - INFO --- vertex: 156, edges: [(150, 156, 'green'), (156, 159, 'blue'), (156, 163, 'red')], is well colored: True
2016-08-07 20:38:28,383 - INFO --- vertex: 259, edges: [(71, 259, 'green'), (137, 259, 'red'), (231, 259, 'blue')], is well colored: True
2016-08-07 20:38:28,383 - INFO --- vertex: 56, edges: [(56, 63, 'green'), (56, 97, 'blue'), (56, 231, 'red')], is well colored: True
2016-08-07 20:38:28,383 - INFO --- vertex: 150, edges: [(92, 150, 'blue'), (119, 150, 'red'), (150, 156, 'green')], is well colored: True
2016-08-07 20:38:28,384 - INFO --- vertex: 119, edges: [(70, 119, 'blue'), (119, 123, 'green'), (119, 150, 'red')], is well colored: True
2016-08-07 20:38:28,384 - INFO --- vertex: 137, edges: [(126, 137, 'green'), (137, 161, 'blue'), (137, 259, 'red')], is well colored: True
2016-08-07 20:38:28,384 - INFO --- vertex: 123, edges: [(119, 123, 'green'), (123, 126, 'blue'), (123, 159, 'red')], is well colored: True
2016-08-07 20:38:28,384 - INFO --- vertex: 92, edges: [(59, 92, 'green'), (92, 97, 'red'), (92, 150, 'blue')], is well colored: True
2016-08-07 20:38:28,385 - INFO --- vertex: 126, edges: [(64, 126, 'red'), (123, 126, 'blue'), (126, 137, 'green')], is well colored: True
2016-08-07 20:38:28,385 - INFO --- vertex: 159, edges: [(123, 159, 'red'), (156, 159, 'blue'), (159, 161, 'green')], is well colored: True
2016-08-07 20:38:28,385 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,386 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,386 - INFO --- ariadne_step: [4, 242, 213, 161, 137, 228, 259]
2016-08-07 20:38:28,386 - INFO --- BEGIN: restore an F4
2016-08-07 20:38:28,386 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 163, 'green'), (92, 97, 'red'), (156, 163, 'red'), (163, 228, 'blue'), (161, 228, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (137, 161, 'blue'), (71, 259, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (59, 92, 'green'), (156, 159, 'blue'), (137, 259, 'red'), (56, 97, 'blue'), (56, 63, 'green'), (56, 231, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue'), (159, 161, 'green'), (123, 159, 'red')], is_regular: True
2016-08-07 20:38:28,386 - DEBUG --- previous_edge_color_at_v1: red, previous_edge_color_at_v2: red
2016-08-07 20:38:28,387 - DEBUG --- edge_color_of_top_edge: blue
2016-08-07 20:38:28,387 - INFO --- BEGIN: restore an F4 - Same color at v1 and v2
2016-08-07 20:38:28,387 - DEBUG --- Edges: [(64, 71, 'blue'), (64, 126, 'red'), (97, 163, 'green'), (92, 97, 'red'), (156, 163, 'red'), (163, 228, 'blue'), (161, 228, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (137, 161, 'blue'), (71, 259, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (59, 92, 'green'), (156, 159, 'blue'), (137, 259, 'red'), (56, 97, 'blue'), (56, 63, 'green'), (56, 231, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue'), (159, 161, 'green'), (123, 159, 'red')], is_regular: True
2016-08-07 20:38:28,387 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 242, 'blue'), (156, 163, 'red'), (163, 228, 'blue'), (56, 97, 'blue'), (56, 63, 'green'), (56, 231, 'red'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (92, 97, 'red'), (228, 242, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (213, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,388 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,388 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,388 - INFO --- END: restore an F4 - Same color at v1 and v2
2016-08-07 20:38:28,388 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,389 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,389 - INFO --- ariadne_step: [4, 162, 165, 242, 228, 161, 163]
2016-08-07 20:38:28,389 - INFO --- BEGIN: restore an F4
2016-08-07 20:38:28,389 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 242, 'blue'), (156, 163, 'red'), (163, 228, 'blue'), (56, 97, 'blue'), (56, 63, 'green'), (56, 231, 'red'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (92, 97, 'red'), (228, 242, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (213, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,390 - DEBUG --- previous_edge_color_at_v1: blue, previous_edge_color_at_v2: blue
2016-08-07 20:38:28,390 - DEBUG --- edge_color_of_top_edge: red
2016-08-07 20:38:28,390 - INFO --- BEGIN: restore an F4 - Same color at v1 and v2
2016-08-07 20:38:28,390 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 242, 'blue'), (156, 163, 'red'), (163, 228, 'blue'), (56, 97, 'blue'), (56, 63, 'green'), (56, 231, 'red'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (92, 97, 'red'), (228, 242, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (213, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,391 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'green'), (156, 163, 'red'), (163, 165, 'blue'), (56, 97, 'blue'), (56, 63, 'green'), (56, 231, 'red'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (92, 97, 'red'), (228, 242, 'blue'), (165, 228, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (213, 242, 'green'), (162, 242, 'red'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,391 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,391 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,392 - INFO --- END: restore an F4 - Same color at v1 and v2
2016-08-07 20:38:28,392 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,392 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,392 - INFO --- ariadne_step: [4, 225, 52, 228, 231, 165, 56]
2016-08-07 20:38:28,393 - INFO --- BEGIN: restore an F4
2016-08-07 20:38:28,393 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'green'), (156, 163, 'red'), (163, 165, 'blue'), (56, 97, 'blue'), (56, 63, 'green'), (56, 231, 'red'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (92, 97, 'red'), (228, 242, 'blue'), (165, 228, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (213, 242, 'green'), (162, 242, 'red'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,393 - DEBUG --- previous_edge_color_at_v1: red, previous_edge_color_at_v2: red
2016-08-07 20:38:28,394 - DEBUG --- edge_color_of_top_edge: green
2016-08-07 20:38:28,394 - INFO --- BEGIN: restore an F4 - Same color at v1 and v2
2016-08-07 20:38:28,394 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'green'), (156, 163, 'red'), (163, 165, 'blue'), (56, 97, 'blue'), (56, 63, 'green'), (56, 231, 'red'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (92, 97, 'red'), (228, 242, 'blue'), (165, 228, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (213, 242, 'green'), (162, 242, 'red'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,394 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'green'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'red'), (56, 97, 'blue'), (56, 63, 'green'), (52, 56, 'red'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'green'), (52, 231, 'green'), (228, 231, 'red'), (231, 259, 'blue'), (52, 225, 'blue'), (213, 242, 'green'), (162, 242, 'red'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,395 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,396 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,396 - INFO --- END: restore an F4 - Same color at v1 and v2
2016-08-07 20:38:28,396 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,397 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,397 - INFO --- ariadne_step: [4, 29, 50, 52, 56, 225, 97]
2016-08-07 20:38:28,397 - INFO --- BEGIN: restore an F4
2016-08-07 20:38:28,397 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'green'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'red'), (56, 97, 'blue'), (56, 63, 'green'), (52, 56, 'red'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'green'), (52, 231, 'green'), (228, 231, 'red'), (231, 259, 'blue'), (52, 225, 'blue'), (213, 242, 'green'), (162, 242, 'red'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,398 - DEBUG --- previous_edge_color_at_v1: blue, previous_edge_color_at_v2: blue
2016-08-07 20:38:28,398 - DEBUG --- edge_color_of_top_edge: red
2016-08-07 20:38:28,398 - INFO --- BEGIN: restore an F4 - Same color at v1 and v2
2016-08-07 20:38:28,398 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'green'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'red'), (56, 97, 'blue'), (56, 63, 'green'), (52, 56, 'red'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'green'), (52, 231, 'green'), (228, 231, 'red'), (231, 259, 'blue'), (52, 225, 'blue'), (213, 242, 'green'), (162, 242, 'red'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,399 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'green'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'red'), (29, 50, 'green'), (29, 52, 'red'), (56, 63, 'green'), (52, 56, 'blue'), (50, 56, 'red'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'green'), (52, 231, 'green'), (228, 231, 'red'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'green'), (162, 242, 'red'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,399 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,400 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,400 - INFO --- END: restore an F4 - Same color at v1 and v2
2016-08-07 20:38:28,400 - DEBUG --- BEGIN: is_well_colored
2016-08-07 20:38:28,400 - DEBUG --- END: is_well_colored
2016-08-07 20:38:28,401 - INFO --- ariadne_step: [5, 99, 47, 92, 50, 59, 56]
2016-08-07 20:38:28,401 - INFO --- BEGIN: restore an F5
2016-08-07 20:38:28,401 - DEBUG --- c1: green, c2: red, c3: red, c4: blue
2016-08-07 20:38:28,401 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (59, 92), (56, 50), green, red
2016-08-07 20:38:28,402 - DEBUG --- out_of_scope_color: blue
2016-08-07 20:38:28,402 - DEBUG --- current_color: green
2016-08-07 20:38:28,402 - DEBUG --- Loop: current_edge: (59, 92), current_color: green, next_color: red
2016-08-07 20:38:28,402 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,402 - DEBUG --- vertex: 92, edges_to_check: [(92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,403 - DEBUG --- current_color: red, next_color: green, current_edge: (92, 97, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,403 - DEBUG --- Loop: current_edge: (92, 97, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,403 - DEBUG --- tmp_next_edges_to_check: [(50, 97, 'blue'), (92, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:28,403 - DEBUG --- vertex: 97, edges_to_check: [(50, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,403 - DEBUG --- current_color: green, next_color: red, current_edge: (97, 163, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,404 - DEBUG --- Loop: current_edge: (97, 163, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,404 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'red'), (163, 165, 'blue')]
2016-08-07 20:38:28,404 - DEBUG --- vertex: 163, edges_to_check: [(156, 163, 'red'), (163, 165, 'blue')]
2016-08-07 20:38:28,404 - DEBUG --- current_color: red, next_color: green, current_edge: (156, 163, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,404 - DEBUG --- Loop: current_edge: (156, 163, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,405 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'blue'), (156, 163, 'red')]
2016-08-07 20:38:28,405 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 159, 'blue')]
2016-08-07 20:38:28,405 - DEBUG --- current_color: green, next_color: red, current_edge: (150, 156, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,405 - DEBUG --- Loop: current_edge: (150, 156, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,405 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'blue'), (119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,406 - DEBUG --- vertex: 150, edges_to_check: [(92, 150, 'blue'), (119, 150, 'red')]
2016-08-07 20:38:28,406 - DEBUG --- current_color: red, next_color: green, current_edge: (119, 150, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,406 - DEBUG --- Loop: current_edge: (119, 150, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,406 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'blue'), (119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:28,406 - DEBUG --- vertex: 119, edges_to_check: [(70, 119, 'blue'), (119, 123, 'green')]
2016-08-07 20:38:28,407 - DEBUG --- current_color: green, next_color: red, current_edge: (119, 123, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,407 - DEBUG --- Loop: current_edge: (119, 123, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,407 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'blue'), (123, 159, 'red')]
2016-08-07 20:38:28,407 - DEBUG --- vertex: 123, edges_to_check: [(123, 126, 'blue'), (123, 159, 'red')]
2016-08-07 20:38:28,407 - DEBUG --- current_color: red, next_color: green, current_edge: (123, 159, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,408 - DEBUG --- Loop: current_edge: (123, 159, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,408 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'red'), (156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,408 - DEBUG --- vertex: 159, edges_to_check: [(156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,408 - DEBUG --- current_color: green, next_color: red, current_edge: (159, 161, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,408 - DEBUG --- Loop: current_edge: (159, 161, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,409 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'red'), (159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:28,409 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'red'), (161, 162, 'blue')]
2016-08-07 20:38:28,409 - DEBUG --- current_color: red, next_color: green, current_edge: (137, 161, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,409 - DEBUG --- Loop: current_edge: (137, 161, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,409 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'red'), (137, 213, 'blue')]
2016-08-07 20:38:28,409 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 213, 'blue')]
2016-08-07 20:38:28,410 - DEBUG --- current_color: green, next_color: red, current_edge: (126, 137, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,410 - DEBUG --- Loop: current_edge: (126, 137, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,410 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'red'), (123, 126, 'blue'), (126, 137, 'green')]
2016-08-07 20:38:28,410 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'red'), (123, 126, 'blue')]
2016-08-07 20:38:28,411 - DEBUG --- current_color: red, next_color: green, current_edge: (64, 126, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,411 - DEBUG --- Loop: current_edge: (64, 126, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,411 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'blue'), (64, 126, 'red')]
2016-08-07 20:38:28,411 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'green'), (64, 71, 'blue')]
2016-08-07 20:38:28,411 - DEBUG --- current_color: green, next_color: red, current_edge: (64, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,412 - DEBUG --- Loop: current_edge: (64, 70, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,412 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'red'), (64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:28,412 - DEBUG --- vertex: 70, edges_to_check: [(59, 70, 'red'), (70, 119, 'blue')]
2016-08-07 20:38:28,412 - DEBUG --- current_color: red, next_color: green, current_edge: (59, 70, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,412 - DEBUG --- Loop: current_edge: (59, 70, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,413 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'blue'), (59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,413 - DEBUG --- vertex: 59, edges_to_check: [(59, 63, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,413 - DEBUG --- current_color: green, next_color: red, current_edge: (59, 92, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:28,413 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:28,413 - DEBUG --- CASE-F5-C1!=C2-C3==C2-C4!=C1-Swap-C2-C1-At-v2
2016-08-07 20:38:28,414 - DEBUG --- BEGIN: kempe_chain_color_swap: (56, 50), red, green
2016-08-07 20:38:28,414 - DEBUG --- degree: 3
2016-08-07 20:38:28,414 - DEBUG --- Loop: current_edge: (56, 50), current_color: red, next_color: green
2016-08-07 20:38:28,414 - DEBUG --- Vertex at direction: 50
2016-08-07 20:38:28,414 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'green'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'red'), (29, 50, 'green'), (29, 52, 'red'), (56, 63, 'green'), (52, 56, 'blue'), (50, 56, 'red'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'green'), (52, 231, 'green'), (228, 231, 'red'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'green'), (162, 242, 'red'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,415 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'green'), (50, 56, 'red'), (50, 97, 'blue')]
2016-08-07 20:38:28,415 - DEBUG --- vertex: 50, edges_to_check: [(29, 50, 'green'), (50, 97, 'blue')]
2016-08-07 20:38:28,415 - DEBUG --- degree: 3
2016-08-07 20:38:28,415 - DEBUG --- Loop: current_edge: (29, 50, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,415 - DEBUG --- Vertex at direction: 29
2016-08-07 20:38:28,416 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'green'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'red'), (29, 50, 'red'), (29, 52, 'red'), (56, 63, 'green'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'green'), (52, 231, 'green'), (228, 231, 'red'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'green'), (162, 242, 'red'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,416 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'red'), (29, 52, 'red'), (29, 225, 'blue')]
2016-08-07 20:38:28,416 - DEBUG --- vertex: 29, edges_to_check: [(29, 52, 'red'), (29, 225, 'blue')]
2016-08-07 20:38:28,416 - DEBUG --- degree: 3
2016-08-07 20:38:28,417 - DEBUG --- Loop: current_edge: (29, 52, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,417 - DEBUG --- Vertex at direction: 52
2016-08-07 20:38:28,417 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'green'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'red'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'green'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'green'), (52, 231, 'green'), (228, 231, 'red'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'green'), (162, 242, 'red'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,417 - DEBUG --- tmp_next_edges_to_check: [(29, 52, 'green'), (52, 56, 'blue'), (52, 231, 'green')]
2016-08-07 20:38:28,417 - DEBUG --- vertex: 52, edges_to_check: [(52, 56, 'blue'), (52, 231, 'green')]
2016-08-07 20:38:28,418 - DEBUG --- degree: 3
2016-08-07 20:38:28,418 - DEBUG --- Loop: current_edge: (52, 231, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,418 - DEBUG --- Vertex at direction: 231
2016-08-07 20:38:28,418 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'green'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'red'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'green'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'green'), (52, 231, 'red'), (228, 231, 'red'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'green'), (162, 242, 'red'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,419 - DEBUG --- tmp_next_edges_to_check: [(52, 231, 'red'), (228, 231, 'red'), (231, 259, 'blue')]
2016-08-07 20:38:28,419 - DEBUG --- vertex: 231, edges_to_check: [(228, 231, 'red'), (231, 259, 'blue')]
2016-08-07 20:38:28,419 - DEBUG --- degree: 3
2016-08-07 20:38:28,419 - DEBUG --- Loop: current_edge: (228, 231, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,419 - DEBUG --- Vertex at direction: 228
2016-08-07 20:38:28,420 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'green'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'red'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'green'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'green'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'green'), (162, 242, 'red'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,420 - DEBUG --- tmp_next_edges_to_check: [(225, 228, 'green'), (228, 231, 'green'), (228, 242, 'blue')]
2016-08-07 20:38:28,420 - DEBUG --- vertex: 228, edges_to_check: [(225, 228, 'green'), (228, 242, 'blue')]
2016-08-07 20:38:28,420 - DEBUG --- degree: 3
2016-08-07 20:38:28,421 - DEBUG --- Loop: current_edge: (225, 228, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,421 - DEBUG --- Vertex at direction: 225
2016-08-07 20:38:28,421 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'green'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'red'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'green'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'green'), (162, 242, 'red'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,421 - DEBUG --- tmp_next_edges_to_check: [(29, 225, 'blue'), (165, 225, 'red'), (225, 228, 'red')]
2016-08-07 20:38:28,422 - DEBUG --- vertex: 225, edges_to_check: [(29, 225, 'blue'), (165, 225, 'red')]
2016-08-07 20:38:28,422 - DEBUG --- degree: 3
2016-08-07 20:38:28,422 - DEBUG --- Loop: current_edge: (165, 225, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,422 - DEBUG --- Vertex at direction: 165
2016-08-07 20:38:28,422 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'green'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'green'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'green'), (162, 242, 'red'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,423 - DEBUG --- tmp_next_edges_to_check: [(162, 165, 'green'), (163, 165, 'blue'), (165, 225, 'green')]
2016-08-07 20:38:28,423 - DEBUG --- vertex: 165, edges_to_check: [(162, 165, 'green'), (163, 165, 'blue')]
2016-08-07 20:38:28,423 - DEBUG --- degree: 3
2016-08-07 20:38:28,423 - DEBUG --- Loop: current_edge: (162, 165, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,424 - DEBUG --- Vertex at direction: 162
2016-08-07 20:38:28,424 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'green'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'green'), (162, 242, 'red'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,424 - DEBUG --- tmp_next_edges_to_check: [(161, 162, 'blue'), (162, 165, 'red'), (162, 242, 'red')]
2016-08-07 20:38:28,424 - DEBUG --- vertex: 162, edges_to_check: [(161, 162, 'blue'), (162, 242, 'red')]
2016-08-07 20:38:28,424 - DEBUG --- degree: 3
2016-08-07 20:38:28,425 - DEBUG --- Loop: current_edge: (162, 242, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,425 - DEBUG --- Vertex at direction: 242
2016-08-07 20:38:28,426 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'green'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'green'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,426 - DEBUG --- tmp_next_edges_to_check: [(162, 242, 'green'), (213, 242, 'green'), (228, 242, 'blue')]
2016-08-07 20:38:28,426 - DEBUG --- vertex: 242, edges_to_check: [(213, 242, 'green'), (228, 242, 'blue')]
2016-08-07 20:38:28,426 - DEBUG --- degree: 3
2016-08-07 20:38:28,427 - DEBUG --- Loop: current_edge: (213, 242, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,427 - DEBUG --- Vertex at direction: 213
2016-08-07 20:38:28,427 - DEBUG --- Edges: [(213, 259, 'red'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'green'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,427 - DEBUG --- tmp_next_edges_to_check: [(137, 213, 'blue'), (213, 242, 'red'), (213, 259, 'red')]
2016-08-07 20:38:28,428 - DEBUG --- vertex: 213, edges_to_check: [(137, 213, 'blue'), (213, 259, 'red')]
2016-08-07 20:38:28,428 - DEBUG --- degree: 3
2016-08-07 20:38:28,428 - DEBUG --- Loop: current_edge: (213, 259, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,428 - DEBUG --- Vertex at direction: 259
2016-08-07 20:38:28,428 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'green'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'green'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,429 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'green'), (213, 259, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,429 - DEBUG --- vertex: 259, edges_to_check: [(71, 259, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,429 - DEBUG --- degree: 3
2016-08-07 20:38:28,429 - DEBUG --- Loop: current_edge: (71, 259, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,429 - DEBUG --- Vertex at direction: 71
2016-08-07 20:38:28,430 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'green'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'red'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,430 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'red'), (64, 71, 'blue'), (71, 259, 'red')]
2016-08-07 20:38:28,430 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'red'), (64, 71, 'blue')]
2016-08-07 20:38:28,430 - DEBUG --- degree: 3
2016-08-07 20:38:28,431 - DEBUG --- Loop: current_edge: (63, 71, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,431 - DEBUG --- Vertex at direction: 63
2016-08-07 20:38:28,431 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'green'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,431 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'green'), (59, 63, 'blue'), (63, 71, 'green')]
2016-08-07 20:38:28,432 - DEBUG --- vertex: 63, edges_to_check: [(56, 63, 'green'), (59, 63, 'blue')]
2016-08-07 20:38:28,432 - DEBUG --- degree: 3
2016-08-07 20:38:28,432 - DEBUG --- Loop: current_edge: (56, 63, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,432 - DEBUG --- Vertex at direction: 56
2016-08-07 20:38:28,433 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,433 - DEBUG --- tmp_next_edges_to_check: [(50, 56, 'green'), (52, 56, 'blue'), (56, 63, 'red')]
2016-08-07 20:38:28,433 - DEBUG --- vertex: 56, edges_to_check: [(50, 56, 'green'), (52, 56, 'blue')]
2016-08-07 20:38:28,433 - DEBUG --- END: kempe_chain_color_swap
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
2016-08-07 20:38:28,433 - INFO --- ------------------
2016-08-07 20:38:28,434 - INFO --- BEGIN: Print stats
2016-08-07 20:38:28,434 - INFO --- ------------------
2016-08-07 20:38:28,434 - INFO --- Stat: CASE-F2-01 = 0 times
2016-08-07 20:38:28,434 - INFO --- Stat: CASE-F3-01 = 2 times
2016-08-07 20:38:28,434 - INFO --- Stat: CASE-F4-01 = 6 times
2016-08-07 20:38:28,434 - INFO --- Stat: CASE-F4-02 = 2 times
2016-08-07 20:38:28,435 - INFO --- Stat: CASE-F4-03 = 1 times
2016-08-07 20:38:28,435 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:28,435 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-Swap-C1-C2-At-v2 = 0 times
2016-08-07 20:38:28,435 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:28,435 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-Swap-C2-C1-At-v2 = 1 times
2016-08-07 20:38:28,436 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4==C1-Shortest-KempeLoop = 0 times
2016-08-07 20:38:28,436 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C3 = 1 times
2016-08-07 20:38:28,436 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C4 = 0 times
2016-08-07 20:38:28,436 - INFO --- Stat: CASE-F5-C1==C2-Swap-C3-C4-OnTop = 0 times
2016-08-07 20:38:28,436 - INFO --- ----------------
2016-08-07 20:38:28,436 - INFO --- END: Print stats
2016-08-07 20:38:28,437 - INFO --- ----------------
2016-08-07 20:38:28,437 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (59, 92), (56, 50), green, red
2016-08-07 20:38:28,437 - DEBUG --- out_of_scope_color: blue
2016-08-07 20:38:28,437 - DEBUG --- current_color: green
2016-08-07 20:38:28,437 - DEBUG --- Loop: current_edge: (59, 92), current_color: green, next_color: red
2016-08-07 20:38:28,437 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,438 - DEBUG --- vertex: 92, edges_to_check: [(92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,438 - DEBUG --- current_color: red, next_color: green, current_edge: (92, 97, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,438 - DEBUG --- Loop: current_edge: (92, 97, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,438 - DEBUG --- tmp_next_edges_to_check: [(50, 97, 'blue'), (92, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:28,438 - DEBUG --- vertex: 97, edges_to_check: [(50, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,439 - DEBUG --- current_color: green, next_color: red, current_edge: (97, 163, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,439 - DEBUG --- Loop: current_edge: (97, 163, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,439 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'red'), (163, 165, 'blue')]
2016-08-07 20:38:28,439 - DEBUG --- vertex: 163, edges_to_check: [(156, 163, 'red'), (163, 165, 'blue')]
2016-08-07 20:38:28,439 - DEBUG --- current_color: red, next_color: green, current_edge: (156, 163, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,440 - DEBUG --- Loop: current_edge: (156, 163, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,440 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'blue'), (156, 163, 'red')]
2016-08-07 20:38:28,440 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 159, 'blue')]
2016-08-07 20:38:28,440 - DEBUG --- current_color: green, next_color: red, current_edge: (150, 156, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,440 - DEBUG --- Loop: current_edge: (150, 156, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,441 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'blue'), (119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,441 - DEBUG --- vertex: 150, edges_to_check: [(92, 150, 'blue'), (119, 150, 'red')]
2016-08-07 20:38:28,441 - DEBUG --- current_color: red, next_color: green, current_edge: (119, 150, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,441 - DEBUG --- Loop: current_edge: (119, 150, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,441 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'blue'), (119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:28,442 - DEBUG --- vertex: 119, edges_to_check: [(70, 119, 'blue'), (119, 123, 'green')]
2016-08-07 20:38:28,442 - DEBUG --- current_color: green, next_color: red, current_edge: (119, 123, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,442 - DEBUG --- Loop: current_edge: (119, 123, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,442 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'blue'), (123, 159, 'red')]
2016-08-07 20:38:28,442 - DEBUG --- vertex: 123, edges_to_check: [(123, 126, 'blue'), (123, 159, 'red')]
2016-08-07 20:38:28,443 - DEBUG --- current_color: red, next_color: green, current_edge: (123, 159, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,443 - DEBUG --- Loop: current_edge: (123, 159, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,443 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'red'), (156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,443 - DEBUG --- vertex: 159, edges_to_check: [(156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,443 - DEBUG --- current_color: green, next_color: red, current_edge: (159, 161, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,444 - DEBUG --- Loop: current_edge: (159, 161, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,444 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'red'), (159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:28,444 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'red'), (161, 162, 'blue')]
2016-08-07 20:38:28,444 - DEBUG --- current_color: red, next_color: green, current_edge: (137, 161, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,444 - DEBUG --- Loop: current_edge: (137, 161, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,445 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'red'), (137, 213, 'blue')]
2016-08-07 20:38:28,445 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 213, 'blue')]
2016-08-07 20:38:28,445 - DEBUG --- current_color: green, next_color: red, current_edge: (126, 137, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,445 - DEBUG --- Loop: current_edge: (126, 137, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,445 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'red'), (123, 126, 'blue'), (126, 137, 'green')]
2016-08-07 20:38:28,446 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'red'), (123, 126, 'blue')]
2016-08-07 20:38:28,446 - DEBUG --- current_color: red, next_color: green, current_edge: (64, 126, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,446 - DEBUG --- Loop: current_edge: (64, 126, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,446 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'blue'), (64, 126, 'red')]
2016-08-07 20:38:28,446 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'green'), (64, 71, 'blue')]
2016-08-07 20:38:28,447 - DEBUG --- current_color: green, next_color: red, current_edge: (64, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,447 - DEBUG --- Loop: current_edge: (64, 70, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,447 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'red'), (64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:28,447 - DEBUG --- vertex: 70, edges_to_check: [(59, 70, 'red'), (70, 119, 'blue')]
2016-08-07 20:38:28,447 - DEBUG --- current_color: red, next_color: green, current_edge: (59, 70, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,448 - DEBUG --- Loop: current_edge: (59, 70, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,448 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'blue'), (59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,448 - DEBUG --- vertex: 59, edges_to_check: [(59, 63, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,448 - DEBUG --- current_color: green, next_color: red, current_edge: (59, 92, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:28,448 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:28,449 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (59, 92), (56, 50), green, blue
2016-08-07 20:38:28,449 - DEBUG --- out_of_scope_color: red
2016-08-07 20:38:28,449 - DEBUG --- current_color: green
2016-08-07 20:38:28,449 - DEBUG --- Loop: current_edge: (59, 92), current_color: green, next_color: blue
2016-08-07 20:38:28,449 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,450 - DEBUG --- vertex: 92, edges_to_check: [(92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,450 - DEBUG --- current_color: blue, next_color: green, current_edge: (92, 150, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,450 - DEBUG --- Loop: current_edge: (92, 150, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,450 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'blue'), (119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,450 - DEBUG --- vertex: 150, edges_to_check: [(119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,451 - DEBUG --- current_color: green, next_color: blue, current_edge: (150, 156, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,451 - DEBUG --- Loop: current_edge: (150, 156, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,451 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'blue'), (156, 163, 'red')]
2016-08-07 20:38:28,451 - DEBUG --- vertex: 156, edges_to_check: [(156, 159, 'blue'), (156, 163, 'red')]
2016-08-07 20:38:28,451 - DEBUG --- current_color: blue, next_color: green, current_edge: (156, 159, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,452 - DEBUG --- Loop: current_edge: (156, 159, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,452 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'red'), (156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,452 - DEBUG --- vertex: 159, edges_to_check: [(123, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,452 - DEBUG --- current_color: green, next_color: blue, current_edge: (159, 161, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,452 - DEBUG --- Loop: current_edge: (159, 161, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,453 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'red'), (159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:28,453 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'red'), (161, 162, 'blue')]
2016-08-07 20:38:28,454 - DEBUG --- current_color: blue, next_color: green, current_edge: (161, 162, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,454 - DEBUG --- Loop: current_edge: (161, 162, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,454 - DEBUG --- tmp_next_edges_to_check: [(161, 162, 'blue'), (162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:28,454 - DEBUG --- vertex: 162, edges_to_check: [(162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:28,455 - DEBUG --- current_color: green, next_color: blue, current_edge: (162, 242, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,455 - DEBUG --- Loop: current_edge: (162, 242, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,455 - DEBUG --- tmp_next_edges_to_check: [(162, 242, 'green'), (213, 242, 'red'), (228, 242, 'blue')]
2016-08-07 20:38:28,455 - DEBUG --- vertex: 242, edges_to_check: [(213, 242, 'red'), (228, 242, 'blue')]
2016-08-07 20:38:28,455 - DEBUG --- current_color: blue, next_color: green, current_edge: (228, 242, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,456 - DEBUG --- Loop: current_edge: (228, 242, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,456 - DEBUG --- tmp_next_edges_to_check: [(225, 228, 'red'), (228, 231, 'green'), (228, 242, 'blue')]
2016-08-07 20:38:28,456 - DEBUG --- vertex: 228, edges_to_check: [(225, 228, 'red'), (228, 231, 'green')]
2016-08-07 20:38:28,456 - DEBUG --- current_color: green, next_color: blue, current_edge: (228, 231, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,456 - DEBUG --- Loop: current_edge: (228, 231, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,457 - DEBUG --- tmp_next_edges_to_check: [(52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,457 - DEBUG --- vertex: 231, edges_to_check: [(52, 231, 'red'), (231, 259, 'blue')]
2016-08-07 20:38:28,457 - DEBUG --- current_color: blue, next_color: green, current_edge: (231, 259, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,457 - DEBUG --- Loop: current_edge: (231, 259, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,457 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'red'), (213, 259, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,458 - DEBUG --- vertex: 259, edges_to_check: [(71, 259, 'red'), (213, 259, 'green')]
2016-08-07 20:38:28,458 - DEBUG --- current_color: green, next_color: blue, current_edge: (213, 259, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,458 - DEBUG --- Loop: current_edge: (213, 259, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,458 - DEBUG --- tmp_next_edges_to_check: [(137, 213, 'blue'), (213, 242, 'red'), (213, 259, 'green')]
2016-08-07 20:38:28,458 - DEBUG --- vertex: 213, edges_to_check: [(137, 213, 'blue'), (213, 242, 'red')]
2016-08-07 20:38:28,459 - DEBUG --- current_color: blue, next_color: green, current_edge: (137, 213, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,459 - DEBUG --- Loop: current_edge: (137, 213, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,459 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'red'), (137, 213, 'blue')]
2016-08-07 20:38:28,459 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 161, 'red')]
2016-08-07 20:38:28,459 - DEBUG --- current_color: green, next_color: blue, current_edge: (126, 137, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,459 - DEBUG --- Loop: current_edge: (126, 137, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,460 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'red'), (123, 126, 'blue'), (126, 137, 'green')]
2016-08-07 20:38:28,460 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'red'), (123, 126, 'blue')]
2016-08-07 20:38:28,460 - DEBUG --- current_color: blue, next_color: green, current_edge: (123, 126, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,460 - DEBUG --- Loop: current_edge: (123, 126, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,461 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'blue'), (123, 159, 'red')]
2016-08-07 20:38:28,461 - DEBUG --- vertex: 123, edges_to_check: [(119, 123, 'green'), (123, 159, 'red')]
2016-08-07 20:38:28,461 - DEBUG --- current_color: green, next_color: blue, current_edge: (119, 123, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,461 - DEBUG --- Loop: current_edge: (119, 123, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,461 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'blue'), (119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:28,461 - DEBUG --- vertex: 119, edges_to_check: [(70, 119, 'blue'), (119, 150, 'red')]
2016-08-07 20:38:28,462 - DEBUG --- current_color: blue, next_color: green, current_edge: (70, 119, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,462 - DEBUG --- Loop: current_edge: (70, 119, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,462 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'red'), (64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:28,462 - DEBUG --- vertex: 70, edges_to_check: [(59, 70, 'red'), (64, 70, 'green')]
2016-08-07 20:38:28,462 - DEBUG --- current_color: green, next_color: blue, current_edge: (64, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,463 - DEBUG --- Loop: current_edge: (64, 70, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,463 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'blue'), (64, 126, 'red')]
2016-08-07 20:38:28,463 - DEBUG --- vertex: 64, edges_to_check: [(64, 71, 'blue'), (64, 126, 'red')]
2016-08-07 20:38:28,463 - DEBUG --- current_color: blue, next_color: green, current_edge: (64, 71, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,463 - DEBUG --- Loop: current_edge: (64, 71, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,464 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'green'), (64, 71, 'blue'), (71, 259, 'red')]
2016-08-07 20:38:28,464 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'green'), (71, 259, 'red')]
2016-08-07 20:38:28,464 - DEBUG --- current_color: green, next_color: blue, current_edge: (63, 71, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,464 - DEBUG --- Loop: current_edge: (63, 71, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,464 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'red'), (59, 63, 'blue'), (63, 71, 'green')]
2016-08-07 20:38:28,465 - DEBUG --- vertex: 63, edges_to_check: [(56, 63, 'red'), (59, 63, 'blue')]
2016-08-07 20:38:28,465 - DEBUG --- current_color: blue, next_color: green, current_edge: (59, 63, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,465 - DEBUG --- Loop: current_edge: (59, 63, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,465 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'blue'), (59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,465 - DEBUG --- vertex: 59, edges_to_check: [(59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,466 - DEBUG --- current_color: green, next_color: blue, current_edge: (59, 92, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:28,466 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:28,466 - DEBUG --- CASE-F5-C1==C2-Swap-C3-C4-OnTop. vertex_to_join_near_v1_on_the_face: 92, vertex_in_the_top_middle: 97, c3: red, c4: blue
2016-08-07 20:38:28,466 - DEBUG --- BEGIN: kempe_chain_color_swap: (92, 97), red, blue
2016-08-07 20:38:28,466 - DEBUG --- degree: 3
2016-08-07 20:38:28,467 - DEBUG --- Loop: current_edge: (92, 97), current_color: red, next_color: blue
2016-08-07 20:38:28,467 - DEBUG --- Vertex at direction: 97
2016-08-07 20:38:28,467 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,467 - DEBUG --- tmp_next_edges_to_check: [(50, 97, 'blue'), (92, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:28,467 - DEBUG --- vertex: 97, edges_to_check: [(50, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,468 - DEBUG --- degree: 3
2016-08-07 20:38:28,468 - DEBUG --- Loop: current_edge: (50, 97, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,468 - DEBUG --- Vertex at direction: 50
2016-08-07 20:38:28,468 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,469 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'red'), (50, 56, 'green'), (50, 97, 'red')]
2016-08-07 20:38:28,469 - DEBUG --- vertex: 50, edges_to_check: [(29, 50, 'red'), (50, 56, 'green')]
2016-08-07 20:38:28,469 - DEBUG --- degree: 3
2016-08-07 20:38:28,469 - DEBUG --- Loop: current_edge: (29, 50, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,469 - DEBUG --- Vertex at direction: 29
2016-08-07 20:38:28,470 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,470 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'blue'), (29, 52, 'green'), (29, 225, 'blue')]
2016-08-07 20:38:28,470 - DEBUG --- vertex: 29, edges_to_check: [(29, 52, 'green'), (29, 225, 'blue')]
2016-08-07 20:38:28,470 - DEBUG --- degree: 3
2016-08-07 20:38:28,471 - DEBUG --- Loop: current_edge: (29, 225, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,471 - DEBUG --- Vertex at direction: 225
2016-08-07 20:38:28,471 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,471 - DEBUG --- tmp_next_edges_to_check: [(29, 225, 'red'), (165, 225, 'green'), (225, 228, 'red')]
2016-08-07 20:38:28,472 - DEBUG --- vertex: 225, edges_to_check: [(165, 225, 'green'), (225, 228, 'red')]
2016-08-07 20:38:28,472 - DEBUG --- degree: 3
2016-08-07 20:38:28,472 - DEBUG --- Loop: current_edge: (225, 228, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,472 - DEBUG --- Vertex at direction: 228
2016-08-07 20:38:28,473 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,473 - DEBUG --- tmp_next_edges_to_check: [(225, 228, 'blue'), (228, 231, 'green'), (228, 242, 'blue')]
2016-08-07 20:38:28,473 - DEBUG --- vertex: 228, edges_to_check: [(228, 231, 'green'), (228, 242, 'blue')]
2016-08-07 20:38:28,473 - DEBUG --- degree: 3
2016-08-07 20:38:28,473 - DEBUG --- Loop: current_edge: (228, 242, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,474 - DEBUG --- Vertex at direction: 242
2016-08-07 20:38:28,474 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,474 - DEBUG --- tmp_next_edges_to_check: [(162, 242, 'green'), (213, 242, 'red'), (228, 242, 'red')]
2016-08-07 20:38:28,475 - DEBUG --- vertex: 242, edges_to_check: [(162, 242, 'green'), (213, 242, 'red')]
2016-08-07 20:38:28,475 - DEBUG --- degree: 3
2016-08-07 20:38:28,475 - DEBUG --- Loop: current_edge: (213, 242, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,475 - DEBUG --- Vertex at direction: 213
2016-08-07 20:38:28,475 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,476 - DEBUG --- tmp_next_edges_to_check: [(137, 213, 'blue'), (213, 242, 'blue'), (213, 259, 'green')]
2016-08-07 20:38:28,476 - DEBUG --- vertex: 213, edges_to_check: [(137, 213, 'blue'), (213, 259, 'green')]
2016-08-07 20:38:28,476 - DEBUG --- degree: 3
2016-08-07 20:38:28,476 - DEBUG --- Loop: current_edge: (137, 213, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,477 - DEBUG --- Vertex at direction: 137
2016-08-07 20:38:28,477 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,477 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'red'), (137, 213, 'red')]
2016-08-07 20:38:28,477 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 161, 'red')]
2016-08-07 20:38:28,477 - DEBUG --- degree: 3
2016-08-07 20:38:28,478 - DEBUG --- Loop: current_edge: (137, 161, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,478 - DEBUG --- Vertex at direction: 161
2016-08-07 20:38:28,478 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,478 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'blue'), (159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:28,478 - DEBUG --- vertex: 161, edges_to_check: [(159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:28,479 - DEBUG --- degree: 3
2016-08-07 20:38:28,479 - DEBUG --- Loop: current_edge: (161, 162, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,479 - DEBUG --- Vertex at direction: 162
2016-08-07 20:38:28,479 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,480 - DEBUG --- tmp_next_edges_to_check: [(161, 162, 'red'), (162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:28,480 - DEBUG --- vertex: 162, edges_to_check: [(162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:28,480 - DEBUG --- degree: 3
2016-08-07 20:38:28,480 - DEBUG --- Loop: current_edge: (162, 165, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,480 - DEBUG --- Vertex at direction: 165
2016-08-07 20:38:28,481 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,481 - DEBUG --- tmp_next_edges_to_check: [(162, 165, 'blue'), (163, 165, 'blue'), (165, 225, 'green')]
2016-08-07 20:38:28,481 - DEBUG --- vertex: 165, edges_to_check: [(163, 165, 'blue'), (165, 225, 'green')]
2016-08-07 20:38:28,481 - DEBUG --- degree: 3
2016-08-07 20:38:28,482 - DEBUG --- Loop: current_edge: (163, 165, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,482 - DEBUG --- Vertex at direction: 163
2016-08-07 20:38:28,482 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'red'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,482 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'red'), (163, 165, 'red')]
2016-08-07 20:38:28,482 - DEBUG --- vertex: 163, edges_to_check: [(97, 163, 'green'), (156, 163, 'red')]
2016-08-07 20:38:28,483 - DEBUG --- degree: 3
2016-08-07 20:38:28,483 - DEBUG --- Loop: current_edge: (156, 163, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,483 - DEBUG --- Vertex at direction: 156
2016-08-07 20:38:28,483 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,484 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'blue'), (156, 163, 'blue')]
2016-08-07 20:38:28,485 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 159, 'blue')]
2016-08-07 20:38:28,485 - DEBUG --- degree: 3
2016-08-07 20:38:28,486 - DEBUG --- Loop: current_edge: (156, 159, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,486 - DEBUG --- Vertex at direction: 159
2016-08-07 20:38:28,486 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,486 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'red'), (156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,486 - DEBUG --- vertex: 159, edges_to_check: [(123, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,487 - DEBUG --- degree: 3
2016-08-07 20:38:28,487 - DEBUG --- Loop: current_edge: (123, 159, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,487 - DEBUG --- Vertex at direction: 123
2016-08-07 20:38:28,487 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,487 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'blue'), (123, 159, 'blue')]
2016-08-07 20:38:28,488 - DEBUG --- vertex: 123, edges_to_check: [(119, 123, 'green'), (123, 126, 'blue')]
2016-08-07 20:38:28,488 - DEBUG --- degree: 3
2016-08-07 20:38:28,488 - DEBUG --- Loop: current_edge: (123, 126, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,488 - DEBUG --- Vertex at direction: 126
2016-08-07 20:38:28,489 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,489 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'red'), (123, 126, 'red'), (126, 137, 'green')]
2016-08-07 20:38:28,489 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'red'), (126, 137, 'green')]
2016-08-07 20:38:28,489 - DEBUG --- degree: 3
2016-08-07 20:38:28,489 - DEBUG --- Loop: current_edge: (64, 126, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,490 - DEBUG --- Vertex at direction: 64
2016-08-07 20:38:28,490 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,490 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'blue'), (64, 126, 'blue')]
2016-08-07 20:38:28,490 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'green'), (64, 71, 'blue')]
2016-08-07 20:38:28,490 - DEBUG --- degree: 3
2016-08-07 20:38:28,491 - DEBUG --- Loop: current_edge: (64, 71, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,491 - DEBUG --- Vertex at direction: 71
2016-08-07 20:38:28,491 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,491 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'green'), (64, 71, 'red'), (71, 259, 'red')]
2016-08-07 20:38:28,492 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'green'), (71, 259, 'red')]
2016-08-07 20:38:28,492 - DEBUG --- degree: 3
2016-08-07 20:38:28,492 - DEBUG --- Loop: current_edge: (71, 259, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,492 - DEBUG --- Vertex at direction: 259
2016-08-07 20:38:28,493 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,493 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'blue'), (213, 259, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,493 - DEBUG --- vertex: 259, edges_to_check: [(213, 259, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,493 - DEBUG --- degree: 3
2016-08-07 20:38:28,493 - DEBUG --- Loop: current_edge: (231, 259, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,494 - DEBUG --- Vertex at direction: 231
2016-08-07 20:38:28,494 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,494 - DEBUG --- tmp_next_edges_to_check: [(52, 231, 'red'), (228, 231, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,494 - DEBUG --- vertex: 231, edges_to_check: [(52, 231, 'red'), (228, 231, 'green')]
2016-08-07 20:38:28,495 - DEBUG --- degree: 3
2016-08-07 20:38:28,495 - DEBUG --- Loop: current_edge: (52, 231, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,495 - DEBUG --- Vertex at direction: 52
2016-08-07 20:38:28,495 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,495 - DEBUG --- tmp_next_edges_to_check: [(29, 52, 'green'), (52, 56, 'blue'), (52, 231, 'blue')]
2016-08-07 20:38:28,496 - DEBUG --- vertex: 52, edges_to_check: [(29, 52, 'green'), (52, 56, 'blue')]
2016-08-07 20:38:28,496 - DEBUG --- degree: 3
2016-08-07 20:38:28,496 - DEBUG --- Loop: current_edge: (52, 56, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,496 - DEBUG --- Vertex at direction: 56
2016-08-07 20:38:28,497 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,497 - DEBUG --- tmp_next_edges_to_check: [(50, 56, 'green'), (52, 56, 'red'), (56, 63, 'red')]
2016-08-07 20:38:28,497 - DEBUG --- vertex: 56, edges_to_check: [(50, 56, 'green'), (56, 63, 'red')]
2016-08-07 20:38:28,497 - DEBUG --- degree: 3
2016-08-07 20:38:28,498 - DEBUG --- Loop: current_edge: (56, 63, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,498 - DEBUG --- Vertex at direction: 63
2016-08-07 20:38:28,498 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,498 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'blue'), (59, 63, 'blue'), (63, 71, 'green')]
2016-08-07 20:38:28,499 - DEBUG --- vertex: 63, edges_to_check: [(59, 63, 'blue'), (63, 71, 'green')]
2016-08-07 20:38:28,499 - DEBUG --- degree: 3
2016-08-07 20:38:28,499 - DEBUG --- Loop: current_edge: (59, 63, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,499 - DEBUG --- Vertex at direction: 59
2016-08-07 20:38:28,499 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,500 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'red'), (59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,500 - DEBUG --- vertex: 59, edges_to_check: [(59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,500 - DEBUG --- degree: 3
2016-08-07 20:38:28,500 - DEBUG --- Loop: current_edge: (59, 70, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,501 - DEBUG --- Vertex at direction: 70
2016-08-07 20:38:28,501 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,501 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'blue'), (64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:28,501 - DEBUG --- vertex: 70, edges_to_check: [(64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:28,501 - DEBUG --- degree: 3
2016-08-07 20:38:28,502 - DEBUG --- Loop: current_edge: (70, 119, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,502 - DEBUG --- Vertex at direction: 119
2016-08-07 20:38:28,502 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,502 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'red'), (119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:28,502 - DEBUG --- vertex: 119, edges_to_check: [(119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:28,503 - DEBUG --- degree: 3
2016-08-07 20:38:28,503 - DEBUG --- Loop: current_edge: (119, 150, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,503 - DEBUG --- Vertex at direction: 150
2016-08-07 20:38:28,503 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,504 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'blue'), (119, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,504 - DEBUG --- vertex: 150, edges_to_check: [(92, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,504 - DEBUG --- degree: 3
2016-08-07 20:38:28,504 - DEBUG --- Loop: current_edge: (92, 150, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,505 - DEBUG --- Vertex at direction: 92
2016-08-07 20:38:28,505 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,505 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,505 - DEBUG --- vertex: 92, edges_to_check: [(59, 92, 'green'), (92, 97, 'blue')]
2016-08-07 20:38:28,505 - DEBUG --- END: kempe_chain_color_swap
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
2016-08-07 20:38:28,506 - INFO --- ------------------
2016-08-07 20:38:28,506 - INFO --- BEGIN: Print stats
2016-08-07 20:38:28,506 - INFO --- ------------------
2016-08-07 20:38:28,506 - INFO --- Stat: CASE-F2-01 = 0 times
2016-08-07 20:38:28,507 - INFO --- Stat: CASE-F3-01 = 2 times
2016-08-07 20:38:28,507 - INFO --- Stat: CASE-F4-01 = 6 times
2016-08-07 20:38:28,507 - INFO --- Stat: CASE-F4-02 = 2 times
2016-08-07 20:38:28,507 - INFO --- Stat: CASE-F4-03 = 1 times
2016-08-07 20:38:28,507 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:28,507 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-Swap-C1-C2-At-v2 = 0 times
2016-08-07 20:38:28,508 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:28,508 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-Swap-C2-C1-At-v2 = 1 times
2016-08-07 20:38:28,508 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4==C1-Shortest-KempeLoop = 0 times
2016-08-07 20:38:28,509 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C3 = 1 times
2016-08-07 20:38:28,509 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C4 = 0 times
2016-08-07 20:38:28,509 - INFO --- Stat: CASE-F5-C1==C2-Swap-C3-C4-OnTop = 1 times
2016-08-07 20:38:28,509 - INFO --- ----------------
2016-08-07 20:38:28,509 - INFO --- END: Print stats
2016-08-07 20:38:28,510 - INFO --- ----------------
2016-08-07 20:38:28,510 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (59, 92), (56, 50), green, blue
2016-08-07 20:38:28,510 - DEBUG --- out_of_scope_color: red
2016-08-07 20:38:28,510 - DEBUG --- current_color: green
2016-08-07 20:38:28,510 - DEBUG --- Loop: current_edge: (59, 92), current_color: green, next_color: blue
2016-08-07 20:38:28,511 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,511 - DEBUG --- vertex: 92, edges_to_check: [(92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,511 - DEBUG --- current_color: blue, next_color: green, current_edge: (92, 97, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,511 - DEBUG --- Loop: current_edge: (92, 97, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,511 - DEBUG --- tmp_next_edges_to_check: [(50, 97, 'red'), (92, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,512 - DEBUG --- vertex: 97, edges_to_check: [(50, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:28,512 - DEBUG --- current_color: green, next_color: blue, current_edge: (97, 163, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,512 - DEBUG --- Loop: current_edge: (97, 163, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,512 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'blue'), (163, 165, 'red')]
2016-08-07 20:38:28,513 - DEBUG --- vertex: 163, edges_to_check: [(156, 163, 'blue'), (163, 165, 'red')]
2016-08-07 20:38:28,513 - DEBUG --- current_color: blue, next_color: green, current_edge: (156, 163, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,513 - DEBUG --- Loop: current_edge: (156, 163, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,513 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'red'), (156, 163, 'blue')]
2016-08-07 20:38:28,513 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 159, 'red')]
2016-08-07 20:38:28,514 - DEBUG --- current_color: green, next_color: blue, current_edge: (150, 156, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,514 - DEBUG --- Loop: current_edge: (150, 156, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,514 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'red'), (119, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,514 - DEBUG --- vertex: 150, edges_to_check: [(92, 150, 'red'), (119, 150, 'blue')]
2016-08-07 20:38:28,515 - DEBUG --- current_color: blue, next_color: green, current_edge: (119, 150, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,515 - DEBUG --- Loop: current_edge: (119, 150, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,515 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'red'), (119, 123, 'green'), (119, 150, 'blue')]
2016-08-07 20:38:28,515 - DEBUG --- vertex: 119, edges_to_check: [(70, 119, 'red'), (119, 123, 'green')]
2016-08-07 20:38:28,515 - DEBUG --- current_color: green, next_color: blue, current_edge: (119, 123, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,516 - DEBUG --- Loop: current_edge: (119, 123, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,516 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'red'), (123, 159, 'blue')]
2016-08-07 20:38:28,516 - DEBUG --- vertex: 123, edges_to_check: [(123, 126, 'red'), (123, 159, 'blue')]
2016-08-07 20:38:28,516 - DEBUG --- current_color: blue, next_color: green, current_edge: (123, 159, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,516 - DEBUG --- Loop: current_edge: (123, 159, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,517 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'blue'), (156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,517 - DEBUG --- vertex: 159, edges_to_check: [(156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,517 - DEBUG --- current_color: green, next_color: blue, current_edge: (159, 161, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,517 - DEBUG --- Loop: current_edge: (159, 161, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,517 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'blue'), (159, 161, 'green'), (161, 162, 'red')]
2016-08-07 20:38:28,518 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'blue'), (161, 162, 'red')]
2016-08-07 20:38:28,518 - DEBUG --- current_color: blue, next_color: green, current_edge: (137, 161, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,518 - DEBUG --- Loop: current_edge: (137, 161, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,518 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'blue'), (137, 213, 'red')]
2016-08-07 20:38:28,519 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 213, 'red')]
2016-08-07 20:38:28,519 - DEBUG --- current_color: green, next_color: blue, current_edge: (126, 137, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,519 - DEBUG --- Loop: current_edge: (126, 137, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,519 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'blue'), (123, 126, 'red'), (126, 137, 'green')]
2016-08-07 20:38:28,519 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'blue'), (123, 126, 'red')]
2016-08-07 20:38:28,520 - DEBUG --- current_color: blue, next_color: green, current_edge: (64, 126, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,520 - DEBUG --- Loop: current_edge: (64, 126, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,520 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'red'), (64, 126, 'blue')]
2016-08-07 20:38:28,520 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'green'), (64, 71, 'red')]
2016-08-07 20:38:28,520 - DEBUG --- current_color: green, next_color: blue, current_edge: (64, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,521 - DEBUG --- Loop: current_edge: (64, 70, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,521 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'blue'), (64, 70, 'green'), (70, 119, 'red')]
2016-08-07 20:38:28,521 - DEBUG --- vertex: 70, edges_to_check: [(59, 70, 'blue'), (70, 119, 'red')]
2016-08-07 20:38:28,521 - DEBUG --- current_color: blue, next_color: green, current_edge: (59, 70, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,521 - DEBUG --- Loop: current_edge: (59, 70, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,522 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'red'), (59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,522 - DEBUG --- vertex: 59, edges_to_check: [(59, 63, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,522 - DEBUG --- current_color: green, next_color: blue, current_edge: (59, 92, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:28,522 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:28,522 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (59, 92), (56, 50), green, red
2016-08-07 20:38:28,523 - DEBUG --- out_of_scope_color: blue
2016-08-07 20:38:28,523 - DEBUG --- current_color: green
2016-08-07 20:38:28,523 - DEBUG --- Loop: current_edge: (59, 92), current_color: green, next_color: red
2016-08-07 20:38:28,523 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,523 - DEBUG --- vertex: 92, edges_to_check: [(92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,524 - DEBUG --- current_color: red, next_color: green, current_edge: (92, 150, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,524 - DEBUG --- Loop: current_edge: (92, 150, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,524 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'red'), (119, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,524 - DEBUG --- vertex: 150, edges_to_check: [(119, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,524 - DEBUG --- current_color: green, next_color: red, current_edge: (150, 156, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,525 - DEBUG --- Loop: current_edge: (150, 156, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,525 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'red'), (156, 163, 'blue')]
2016-08-07 20:38:28,525 - DEBUG --- vertex: 156, edges_to_check: [(156, 159, 'red'), (156, 163, 'blue')]
2016-08-07 20:38:28,525 - DEBUG --- current_color: red, next_color: green, current_edge: (156, 159, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,526 - DEBUG --- Loop: current_edge: (156, 159, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,526 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'blue'), (156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,526 - DEBUG --- vertex: 159, edges_to_check: [(123, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,526 - DEBUG --- current_color: green, next_color: red, current_edge: (159, 161, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,526 - DEBUG --- Loop: current_edge: (159, 161, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,527 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'blue'), (159, 161, 'green'), (161, 162, 'red')]
2016-08-07 20:38:28,527 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'blue'), (161, 162, 'red')]
2016-08-07 20:38:28,527 - DEBUG --- current_color: red, next_color: green, current_edge: (161, 162, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,527 - DEBUG --- Loop: current_edge: (161, 162, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,527 - DEBUG --- tmp_next_edges_to_check: [(161, 162, 'red'), (162, 165, 'blue'), (162, 242, 'green')]
2016-08-07 20:38:28,528 - DEBUG --- vertex: 162, edges_to_check: [(162, 165, 'blue'), (162, 242, 'green')]
2016-08-07 20:38:28,528 - DEBUG --- current_color: green, next_color: red, current_edge: (162, 242, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,528 - DEBUG --- Loop: current_edge: (162, 242, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,528 - DEBUG --- tmp_next_edges_to_check: [(162, 242, 'green'), (213, 242, 'blue'), (228, 242, 'red')]
2016-08-07 20:38:28,529 - DEBUG --- vertex: 242, edges_to_check: [(213, 242, 'blue'), (228, 242, 'red')]
2016-08-07 20:38:28,529 - DEBUG --- current_color: red, next_color: green, current_edge: (228, 242, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,529 - DEBUG --- Loop: current_edge: (228, 242, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,529 - DEBUG --- tmp_next_edges_to_check: [(225, 228, 'blue'), (228, 231, 'green'), (228, 242, 'red')]
2016-08-07 20:38:28,530 - DEBUG --- vertex: 228, edges_to_check: [(225, 228, 'blue'), (228, 231, 'green')]
2016-08-07 20:38:28,530 - DEBUG --- current_color: green, next_color: red, current_edge: (228, 231, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,530 - DEBUG --- Loop: current_edge: (228, 231, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,530 - DEBUG --- tmp_next_edges_to_check: [(52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,530 - DEBUG --- vertex: 231, edges_to_check: [(52, 231, 'blue'), (231, 259, 'red')]
2016-08-07 20:38:28,531 - DEBUG --- current_color: red, next_color: green, current_edge: (231, 259, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,531 - DEBUG --- Loop: current_edge: (231, 259, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,531 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'blue'), (213, 259, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,531 - DEBUG --- vertex: 259, edges_to_check: [(71, 259, 'blue'), (213, 259, 'green')]
2016-08-07 20:38:28,531 - DEBUG --- current_color: green, next_color: red, current_edge: (213, 259, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,532 - DEBUG --- Loop: current_edge: (213, 259, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,532 - DEBUG --- tmp_next_edges_to_check: [(137, 213, 'red'), (213, 242, 'blue'), (213, 259, 'green')]
2016-08-07 20:38:28,532 - DEBUG --- vertex: 213, edges_to_check: [(137, 213, 'red'), (213, 242, 'blue')]
2016-08-07 20:38:28,532 - DEBUG --- current_color: red, next_color: green, current_edge: (137, 213, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,532 - DEBUG --- Loop: current_edge: (137, 213, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,533 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'blue'), (137, 213, 'red')]
2016-08-07 20:38:28,533 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 161, 'blue')]
2016-08-07 20:38:28,533 - DEBUG --- current_color: green, next_color: red, current_edge: (126, 137, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,533 - DEBUG --- Loop: current_edge: (126, 137, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,533 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'blue'), (123, 126, 'red'), (126, 137, 'green')]
2016-08-07 20:38:28,534 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'blue'), (123, 126, 'red')]
2016-08-07 20:38:28,534 - DEBUG --- current_color: red, next_color: green, current_edge: (123, 126, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,534 - DEBUG --- Loop: current_edge: (123, 126, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,534 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'red'), (123, 159, 'blue')]
2016-08-07 20:38:28,534 - DEBUG --- vertex: 123, edges_to_check: [(119, 123, 'green'), (123, 159, 'blue')]
2016-08-07 20:38:28,535 - DEBUG --- current_color: green, next_color: red, current_edge: (119, 123, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,535 - DEBUG --- Loop: current_edge: (119, 123, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,535 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'red'), (119, 123, 'green'), (119, 150, 'blue')]
2016-08-07 20:38:28,535 - DEBUG --- vertex: 119, edges_to_check: [(70, 119, 'red'), (119, 150, 'blue')]
2016-08-07 20:38:28,535 - DEBUG --- current_color: red, next_color: green, current_edge: (70, 119, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,536 - DEBUG --- Loop: current_edge: (70, 119, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,536 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'blue'), (64, 70, 'green'), (70, 119, 'red')]
2016-08-07 20:38:28,536 - DEBUG --- vertex: 70, edges_to_check: [(59, 70, 'blue'), (64, 70, 'green')]
2016-08-07 20:38:28,536 - DEBUG --- current_color: green, next_color: red, current_edge: (64, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,536 - DEBUG --- Loop: current_edge: (64, 70, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,537 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'red'), (64, 126, 'blue')]
2016-08-07 20:38:28,537 - DEBUG --- vertex: 64, edges_to_check: [(64, 71, 'red'), (64, 126, 'blue')]
2016-08-07 20:38:28,537 - DEBUG --- current_color: red, next_color: green, current_edge: (64, 71, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,537 - DEBUG --- Loop: current_edge: (64, 71, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,537 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'green'), (64, 71, 'red'), (71, 259, 'blue')]
2016-08-07 20:38:28,537 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'green'), (71, 259, 'blue')]
2016-08-07 20:38:28,538 - DEBUG --- current_color: green, next_color: red, current_edge: (63, 71, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,538 - DEBUG --- Loop: current_edge: (63, 71, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,538 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'blue'), (59, 63, 'red'), (63, 71, 'green')]
2016-08-07 20:38:28,538 - DEBUG --- vertex: 63, edges_to_check: [(56, 63, 'blue'), (59, 63, 'red')]
2016-08-07 20:38:28,539 - DEBUG --- current_color: red, next_color: green, current_edge: (59, 63, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,539 - DEBUG --- Loop: current_edge: (59, 63, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,539 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'red'), (59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,539 - DEBUG --- vertex: 59, edges_to_check: [(59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,539 - DEBUG --- current_color: green, next_color: red, current_edge: (59, 92, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:28,540 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:28,540 - DEBUG --- CASE-F5-C1==C2-Swap-C3-C4-OnTop. vertex_to_join_near_v1_on_the_face: 92, vertex_in_the_top_middle: 97, c3: blue, c4: red
2016-08-07 20:38:28,540 - DEBUG --- BEGIN: kempe_chain_color_swap: (92, 97), blue, red
2016-08-07 20:38:28,540 - DEBUG --- degree: 3
2016-08-07 20:38:28,540 - DEBUG --- Loop: current_edge: (92, 97), current_color: blue, next_color: red
2016-08-07 20:38:28,541 - DEBUG --- Vertex at direction: 97
2016-08-07 20:38:28,541 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,541 - DEBUG --- tmp_next_edges_to_check: [(50, 97, 'red'), (92, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,541 - DEBUG --- vertex: 97, edges_to_check: [(50, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:28,541 - DEBUG --- degree: 3
2016-08-07 20:38:28,542 - DEBUG --- Loop: current_edge: (50, 97, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,542 - DEBUG --- Vertex at direction: 50
2016-08-07 20:38:28,542 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,542 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'blue'), (50, 56, 'green'), (50, 97, 'blue')]
2016-08-07 20:38:28,542 - DEBUG --- vertex: 50, edges_to_check: [(29, 50, 'blue'), (50, 56, 'green')]
2016-08-07 20:38:28,543 - DEBUG --- degree: 3
2016-08-07 20:38:28,544 - DEBUG --- Loop: current_edge: (29, 50, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,544 - DEBUG --- Vertex at direction: 29
2016-08-07 20:38:28,544 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,544 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'red'), (29, 52, 'green'), (29, 225, 'red')]
2016-08-07 20:38:28,545 - DEBUG --- vertex: 29, edges_to_check: [(29, 52, 'green'), (29, 225, 'red')]
2016-08-07 20:38:28,545 - DEBUG --- degree: 3
2016-08-07 20:38:28,545 - DEBUG --- Loop: current_edge: (29, 225, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,545 - DEBUG --- Vertex at direction: 225
2016-08-07 20:38:28,545 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,546 - DEBUG --- tmp_next_edges_to_check: [(29, 225, 'blue'), (165, 225, 'green'), (225, 228, 'blue')]
2016-08-07 20:38:28,546 - DEBUG --- vertex: 225, edges_to_check: [(165, 225, 'green'), (225, 228, 'blue')]
2016-08-07 20:38:28,546 - DEBUG --- degree: 3
2016-08-07 20:38:28,546 - DEBUG --- Loop: current_edge: (225, 228, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,546 - DEBUG --- Vertex at direction: 228
2016-08-07 20:38:28,547 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'red'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,547 - DEBUG --- tmp_next_edges_to_check: [(225, 228, 'red'), (228, 231, 'green'), (228, 242, 'red')]
2016-08-07 20:38:28,547 - DEBUG --- vertex: 228, edges_to_check: [(228, 231, 'green'), (228, 242, 'red')]
2016-08-07 20:38:28,547 - DEBUG --- degree: 3
2016-08-07 20:38:28,548 - DEBUG --- Loop: current_edge: (228, 242, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,548 - DEBUG --- Vertex at direction: 242
2016-08-07 20:38:28,548 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,548 - DEBUG --- tmp_next_edges_to_check: [(162, 242, 'green'), (213, 242, 'blue'), (228, 242, 'blue')]
2016-08-07 20:38:28,549 - DEBUG --- vertex: 242, edges_to_check: [(162, 242, 'green'), (213, 242, 'blue')]
2016-08-07 20:38:28,549 - DEBUG --- degree: 3
2016-08-07 20:38:28,549 - DEBUG --- Loop: current_edge: (213, 242, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,549 - DEBUG --- Vertex at direction: 213
2016-08-07 20:38:28,549 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,550 - DEBUG --- tmp_next_edges_to_check: [(137, 213, 'red'), (213, 242, 'red'), (213, 259, 'green')]
2016-08-07 20:38:28,550 - DEBUG --- vertex: 213, edges_to_check: [(137, 213, 'red'), (213, 259, 'green')]
2016-08-07 20:38:28,550 - DEBUG --- degree: 3
2016-08-07 20:38:28,550 - DEBUG --- Loop: current_edge: (137, 213, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,551 - DEBUG --- Vertex at direction: 137
2016-08-07 20:38:28,551 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,551 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'blue'), (137, 213, 'blue')]
2016-08-07 20:38:28,551 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 161, 'blue')]
2016-08-07 20:38:28,551 - DEBUG --- degree: 3
2016-08-07 20:38:28,552 - DEBUG --- Loop: current_edge: (137, 161, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,552 - DEBUG --- Vertex at direction: 161
2016-08-07 20:38:28,552 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,552 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'red'), (159, 161, 'green'), (161, 162, 'red')]
2016-08-07 20:38:28,552 - DEBUG --- vertex: 161, edges_to_check: [(159, 161, 'green'), (161, 162, 'red')]
2016-08-07 20:38:28,553 - DEBUG --- degree: 3
2016-08-07 20:38:28,553 - DEBUG --- Loop: current_edge: (161, 162, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,553 - DEBUG --- Vertex at direction: 162
2016-08-07 20:38:28,553 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,554 - DEBUG --- tmp_next_edges_to_check: [(161, 162, 'blue'), (162, 165, 'blue'), (162, 242, 'green')]
2016-08-07 20:38:28,554 - DEBUG --- vertex: 162, edges_to_check: [(162, 165, 'blue'), (162, 242, 'green')]
2016-08-07 20:38:28,554 - DEBUG --- degree: 3
2016-08-07 20:38:28,554 - DEBUG --- Loop: current_edge: (162, 165, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,555 - DEBUG --- Vertex at direction: 165
2016-08-07 20:38:28,555 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,555 - DEBUG --- tmp_next_edges_to_check: [(162, 165, 'red'), (163, 165, 'red'), (165, 225, 'green')]
2016-08-07 20:38:28,555 - DEBUG --- vertex: 165, edges_to_check: [(163, 165, 'red'), (165, 225, 'green')]
2016-08-07 20:38:28,555 - DEBUG --- degree: 3
2016-08-07 20:38:28,556 - DEBUG --- Loop: current_edge: (163, 165, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,556 - DEBUG --- Vertex at direction: 163
2016-08-07 20:38:28,556 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'blue'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,556 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'blue'), (163, 165, 'blue')]
2016-08-07 20:38:28,556 - DEBUG --- vertex: 163, edges_to_check: [(97, 163, 'green'), (156, 163, 'blue')]
2016-08-07 20:38:28,557 - DEBUG --- degree: 3
2016-08-07 20:38:28,557 - DEBUG --- Loop: current_edge: (156, 163, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,557 - DEBUG --- Vertex at direction: 156
2016-08-07 20:38:28,557 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,558 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'red'), (156, 163, 'red')]
2016-08-07 20:38:28,558 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 159, 'red')]
2016-08-07 20:38:28,558 - DEBUG --- degree: 3
2016-08-07 20:38:28,558 - DEBUG --- Loop: current_edge: (156, 159, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,558 - DEBUG --- Vertex at direction: 159
2016-08-07 20:38:28,559 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,559 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'blue'), (156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,559 - DEBUG --- vertex: 159, edges_to_check: [(123, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,559 - DEBUG --- degree: 3
2016-08-07 20:38:28,560 - DEBUG --- Loop: current_edge: (123, 159, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,560 - DEBUG --- Vertex at direction: 123
2016-08-07 20:38:28,560 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,560 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'red'), (123, 159, 'red')]
2016-08-07 20:38:28,561 - DEBUG --- vertex: 123, edges_to_check: [(119, 123, 'green'), (123, 126, 'red')]
2016-08-07 20:38:28,561 - DEBUG --- degree: 3
2016-08-07 20:38:28,561 - DEBUG --- Loop: current_edge: (123, 126, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,561 - DEBUG --- Vertex at direction: 126
2016-08-07 20:38:28,562 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,562 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'blue'), (123, 126, 'blue'), (126, 137, 'green')]
2016-08-07 20:38:28,562 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'blue'), (126, 137, 'green')]
2016-08-07 20:38:28,562 - DEBUG --- degree: 3
2016-08-07 20:38:28,562 - DEBUG --- Loop: current_edge: (64, 126, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,563 - DEBUG --- Vertex at direction: 64
2016-08-07 20:38:28,563 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,563 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'red'), (64, 126, 'red')]
2016-08-07 20:38:28,563 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'green'), (64, 71, 'red')]
2016-08-07 20:38:28,563 - DEBUG --- degree: 3
2016-08-07 20:38:28,564 - DEBUG --- Loop: current_edge: (64, 71, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,564 - DEBUG --- Vertex at direction: 71
2016-08-07 20:38:28,564 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,564 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'green'), (64, 71, 'blue'), (71, 259, 'blue')]
2016-08-07 20:38:28,565 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'green'), (71, 259, 'blue')]
2016-08-07 20:38:28,566 - DEBUG --- degree: 3
2016-08-07 20:38:28,566 - DEBUG --- Loop: current_edge: (71, 259, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,566 - DEBUG --- Vertex at direction: 259
2016-08-07 20:38:28,566 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,567 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'red'), (213, 259, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,567 - DEBUG --- vertex: 259, edges_to_check: [(213, 259, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,567 - DEBUG --- degree: 3
2016-08-07 20:38:28,567 - DEBUG --- Loop: current_edge: (231, 259, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,568 - DEBUG --- Vertex at direction: 231
2016-08-07 20:38:28,568 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,568 - DEBUG --- tmp_next_edges_to_check: [(52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,568 - DEBUG --- vertex: 231, edges_to_check: [(52, 231, 'blue'), (228, 231, 'green')]
2016-08-07 20:38:28,568 - DEBUG --- degree: 3
2016-08-07 20:38:28,569 - DEBUG --- Loop: current_edge: (52, 231, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,569 - DEBUG --- Vertex at direction: 52
2016-08-07 20:38:28,569 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,569 - DEBUG --- tmp_next_edges_to_check: [(29, 52, 'green'), (52, 56, 'red'), (52, 231, 'red')]
2016-08-07 20:38:28,569 - DEBUG --- vertex: 52, edges_to_check: [(29, 52, 'green'), (52, 56, 'red')]
2016-08-07 20:38:28,570 - DEBUG --- degree: 3
2016-08-07 20:38:28,570 - DEBUG --- Loop: current_edge: (52, 56, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,570 - DEBUG --- Vertex at direction: 56
2016-08-07 20:38:28,570 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,571 - DEBUG --- tmp_next_edges_to_check: [(50, 56, 'green'), (52, 56, 'blue'), (56, 63, 'blue')]
2016-08-07 20:38:28,571 - DEBUG --- vertex: 56, edges_to_check: [(50, 56, 'green'), (56, 63, 'blue')]
2016-08-07 20:38:28,571 - DEBUG --- degree: 3
2016-08-07 20:38:28,571 - DEBUG --- Loop: current_edge: (56, 63, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,572 - DEBUG --- Vertex at direction: 63
2016-08-07 20:38:28,572 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,572 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'red'), (59, 63, 'red'), (63, 71, 'green')]
2016-08-07 20:38:28,572 - DEBUG --- vertex: 63, edges_to_check: [(59, 63, 'red'), (63, 71, 'green')]
2016-08-07 20:38:28,572 - DEBUG --- degree: 3
2016-08-07 20:38:28,573 - DEBUG --- Loop: current_edge: (59, 63, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,573 - DEBUG --- Vertex at direction: 59
2016-08-07 20:38:28,573 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,573 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'blue'), (59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,573 - DEBUG --- vertex: 59, edges_to_check: [(59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,574 - DEBUG --- degree: 3
2016-08-07 20:38:28,574 - DEBUG --- Loop: current_edge: (59, 70, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,574 - DEBUG --- Vertex at direction: 70
2016-08-07 20:38:28,574 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,575 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'red'), (64, 70, 'green'), (70, 119, 'red')]
2016-08-07 20:38:28,575 - DEBUG --- vertex: 70, edges_to_check: [(64, 70, 'green'), (70, 119, 'red')]
2016-08-07 20:38:28,575 - DEBUG --- degree: 3
2016-08-07 20:38:28,575 - DEBUG --- Loop: current_edge: (70, 119, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,575 - DEBUG --- Vertex at direction: 119
2016-08-07 20:38:28,576 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,576 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'blue'), (119, 123, 'green'), (119, 150, 'blue')]
2016-08-07 20:38:28,576 - DEBUG --- vertex: 119, edges_to_check: [(119, 123, 'green'), (119, 150, 'blue')]
2016-08-07 20:38:28,576 - DEBUG --- degree: 3
2016-08-07 20:38:28,577 - DEBUG --- Loop: current_edge: (119, 150, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,577 - DEBUG --- Vertex at direction: 150
2016-08-07 20:38:28,577 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,577 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'red'), (119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,578 - DEBUG --- vertex: 150, edges_to_check: [(92, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,578 - DEBUG --- degree: 3
2016-08-07 20:38:28,578 - DEBUG --- Loop: current_edge: (92, 150, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,578 - DEBUG --- Vertex at direction: 92
2016-08-07 20:38:28,578 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,579 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,579 - DEBUG --- vertex: 92, edges_to_check: [(59, 92, 'green'), (92, 97, 'red')]
2016-08-07 20:38:28,579 - DEBUG --- END: kempe_chain_color_swap
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
2016-08-07 20:38:28,579 - INFO --- ------------------
2016-08-07 20:38:28,579 - INFO --- BEGIN: Print stats
2016-08-07 20:38:28,580 - INFO --- ------------------
2016-08-07 20:38:28,580 - INFO --- Stat: CASE-F2-01 = 0 times
2016-08-07 20:38:28,580 - INFO --- Stat: CASE-F3-01 = 2 times
2016-08-07 20:38:28,580 - INFO --- Stat: CASE-F4-01 = 6 times
2016-08-07 20:38:28,580 - INFO --- Stat: CASE-F4-02 = 2 times
2016-08-07 20:38:28,581 - INFO --- Stat: CASE-F4-03 = 1 times
2016-08-07 20:38:28,581 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:28,581 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-Swap-C1-C2-At-v2 = 0 times
2016-08-07 20:38:28,581 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:28,581 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-Swap-C2-C1-At-v2 = 1 times
2016-08-07 20:38:28,582 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4==C1-Shortest-KempeLoop = 0 times
2016-08-07 20:38:28,582 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C3 = 1 times
2016-08-07 20:38:28,582 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C4 = 0 times
2016-08-07 20:38:28,582 - INFO --- Stat: CASE-F5-C1==C2-Swap-C3-C4-OnTop = 2 times
2016-08-07 20:38:28,582 - INFO --- ----------------
2016-08-07 20:38:28,582 - INFO --- END: Print stats
2016-08-07 20:38:28,583 - INFO --- ----------------
2016-08-07 20:38:28,583 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (59, 92), (56, 50), green, red
2016-08-07 20:38:28,583 - DEBUG --- out_of_scope_color: blue
2016-08-07 20:38:28,583 - DEBUG --- current_color: green
2016-08-07 20:38:28,583 - DEBUG --- Loop: current_edge: (59, 92), current_color: green, next_color: red
2016-08-07 20:38:28,584 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,584 - DEBUG --- vertex: 92, edges_to_check: [(92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,584 - DEBUG --- current_color: red, next_color: green, current_edge: (92, 97, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,584 - DEBUG --- Loop: current_edge: (92, 97, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,584 - DEBUG --- tmp_next_edges_to_check: [(50, 97, 'blue'), (92, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:28,585 - DEBUG --- vertex: 97, edges_to_check: [(50, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,585 - DEBUG --- current_color: green, next_color: red, current_edge: (97, 163, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,585 - DEBUG --- Loop: current_edge: (97, 163, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,585 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'red'), (163, 165, 'blue')]
2016-08-07 20:38:28,585 - DEBUG --- vertex: 163, edges_to_check: [(156, 163, 'red'), (163, 165, 'blue')]
2016-08-07 20:38:28,586 - DEBUG --- current_color: red, next_color: green, current_edge: (156, 163, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,586 - DEBUG --- Loop: current_edge: (156, 163, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,586 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'blue'), (156, 163, 'red')]
2016-08-07 20:38:28,586 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 159, 'blue')]
2016-08-07 20:38:28,587 - DEBUG --- current_color: green, next_color: red, current_edge: (150, 156, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,587 - DEBUG --- Loop: current_edge: (150, 156, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,587 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'blue'), (119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,587 - DEBUG --- vertex: 150, edges_to_check: [(92, 150, 'blue'), (119, 150, 'red')]
2016-08-07 20:38:28,587 - DEBUG --- current_color: red, next_color: green, current_edge: (119, 150, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,588 - DEBUG --- Loop: current_edge: (119, 150, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,588 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'blue'), (119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:28,588 - DEBUG --- vertex: 119, edges_to_check: [(70, 119, 'blue'), (119, 123, 'green')]
2016-08-07 20:38:28,588 - DEBUG --- current_color: green, next_color: red, current_edge: (119, 123, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,589 - DEBUG --- Loop: current_edge: (119, 123, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,589 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'blue'), (123, 159, 'red')]
2016-08-07 20:38:28,589 - DEBUG --- vertex: 123, edges_to_check: [(123, 126, 'blue'), (123, 159, 'red')]
2016-08-07 20:38:28,589 - DEBUG --- current_color: red, next_color: green, current_edge: (123, 159, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,589 - DEBUG --- Loop: current_edge: (123, 159, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,590 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'red'), (156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,590 - DEBUG --- vertex: 159, edges_to_check: [(156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,591 - DEBUG --- current_color: green, next_color: red, current_edge: (159, 161, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,591 - DEBUG --- Loop: current_edge: (159, 161, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,591 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'red'), (159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:28,591 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'red'), (161, 162, 'blue')]
2016-08-07 20:38:28,592 - DEBUG --- current_color: red, next_color: green, current_edge: (137, 161, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,592 - DEBUG --- Loop: current_edge: (137, 161, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,592 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'red'), (137, 213, 'blue')]
2016-08-07 20:38:28,592 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 213, 'blue')]
2016-08-07 20:38:28,592 - DEBUG --- current_color: green, next_color: red, current_edge: (126, 137, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,593 - DEBUG --- Loop: current_edge: (126, 137, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,593 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'red'), (123, 126, 'blue'), (126, 137, 'green')]
2016-08-07 20:38:28,593 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'red'), (123, 126, 'blue')]
2016-08-07 20:38:28,593 - DEBUG --- current_color: red, next_color: green, current_edge: (64, 126, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,594 - DEBUG --- Loop: current_edge: (64, 126, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,594 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'blue'), (64, 126, 'red')]
2016-08-07 20:38:28,594 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'green'), (64, 71, 'blue')]
2016-08-07 20:38:28,594 - DEBUG --- current_color: green, next_color: red, current_edge: (64, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,594 - DEBUG --- Loop: current_edge: (64, 70, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,595 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'red'), (64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:28,595 - DEBUG --- vertex: 70, edges_to_check: [(59, 70, 'red'), (70, 119, 'blue')]
2016-08-07 20:38:28,595 - DEBUG --- current_color: red, next_color: green, current_edge: (59, 70, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,595 - DEBUG --- Loop: current_edge: (59, 70, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,595 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'blue'), (59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,596 - DEBUG --- vertex: 59, edges_to_check: [(59, 63, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,596 - DEBUG --- current_color: green, next_color: red, current_edge: (59, 92, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:28,596 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:28,596 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (59, 92), (56, 50), green, blue
2016-08-07 20:38:28,596 - DEBUG --- out_of_scope_color: red
2016-08-07 20:38:28,597 - DEBUG --- current_color: green
2016-08-07 20:38:28,597 - DEBUG --- Loop: current_edge: (59, 92), current_color: green, next_color: blue
2016-08-07 20:38:28,597 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,597 - DEBUG --- vertex: 92, edges_to_check: [(92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,597 - DEBUG --- current_color: blue, next_color: green, current_edge: (92, 150, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,598 - DEBUG --- Loop: current_edge: (92, 150, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,598 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'blue'), (119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,598 - DEBUG --- vertex: 150, edges_to_check: [(119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,598 - DEBUG --- current_color: green, next_color: blue, current_edge: (150, 156, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,598 - DEBUG --- Loop: current_edge: (150, 156, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,599 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'blue'), (156, 163, 'red')]
2016-08-07 20:38:28,599 - DEBUG --- vertex: 156, edges_to_check: [(156, 159, 'blue'), (156, 163, 'red')]
2016-08-07 20:38:28,599 - DEBUG --- current_color: blue, next_color: green, current_edge: (156, 159, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,599 - DEBUG --- Loop: current_edge: (156, 159, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,599 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'red'), (156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,600 - DEBUG --- vertex: 159, edges_to_check: [(123, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,600 - DEBUG --- current_color: green, next_color: blue, current_edge: (159, 161, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,600 - DEBUG --- Loop: current_edge: (159, 161, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,600 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'red'), (159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:28,600 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'red'), (161, 162, 'blue')]
2016-08-07 20:38:28,601 - DEBUG --- current_color: blue, next_color: green, current_edge: (161, 162, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,601 - DEBUG --- Loop: current_edge: (161, 162, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,601 - DEBUG --- tmp_next_edges_to_check: [(161, 162, 'blue'), (162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:28,601 - DEBUG --- vertex: 162, edges_to_check: [(162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:28,602 - DEBUG --- current_color: green, next_color: blue, current_edge: (162, 242, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,602 - DEBUG --- Loop: current_edge: (162, 242, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,602 - DEBUG --- tmp_next_edges_to_check: [(162, 242, 'green'), (213, 242, 'red'), (228, 242, 'blue')]
2016-08-07 20:38:28,602 - DEBUG --- vertex: 242, edges_to_check: [(213, 242, 'red'), (228, 242, 'blue')]
2016-08-07 20:38:28,602 - DEBUG --- current_color: blue, next_color: green, current_edge: (228, 242, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,603 - DEBUG --- Loop: current_edge: (228, 242, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,603 - DEBUG --- tmp_next_edges_to_check: [(225, 228, 'red'), (228, 231, 'green'), (228, 242, 'blue')]
2016-08-07 20:38:28,603 - DEBUG --- vertex: 228, edges_to_check: [(225, 228, 'red'), (228, 231, 'green')]
2016-08-07 20:38:28,603 - DEBUG --- current_color: green, next_color: blue, current_edge: (228, 231, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,604 - DEBUG --- Loop: current_edge: (228, 231, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,604 - DEBUG --- tmp_next_edges_to_check: [(52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,604 - DEBUG --- vertex: 231, edges_to_check: [(52, 231, 'red'), (231, 259, 'blue')]
2016-08-07 20:38:28,604 - DEBUG --- current_color: blue, next_color: green, current_edge: (231, 259, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,604 - DEBUG --- Loop: current_edge: (231, 259, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,605 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'red'), (213, 259, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,605 - DEBUG --- vertex: 259, edges_to_check: [(71, 259, 'red'), (213, 259, 'green')]
2016-08-07 20:38:28,605 - DEBUG --- current_color: green, next_color: blue, current_edge: (213, 259, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,605 - DEBUG --- Loop: current_edge: (213, 259, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,606 - DEBUG --- tmp_next_edges_to_check: [(137, 213, 'blue'), (213, 242, 'red'), (213, 259, 'green')]
2016-08-07 20:38:28,606 - DEBUG --- vertex: 213, edges_to_check: [(137, 213, 'blue'), (213, 242, 'red')]
2016-08-07 20:38:28,606 - DEBUG --- current_color: blue, next_color: green, current_edge: (137, 213, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,606 - DEBUG --- Loop: current_edge: (137, 213, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,606 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'red'), (137, 213, 'blue')]
2016-08-07 20:38:28,607 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 161, 'red')]
2016-08-07 20:38:28,607 - DEBUG --- current_color: green, next_color: blue, current_edge: (126, 137, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,607 - DEBUG --- Loop: current_edge: (126, 137, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,607 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'red'), (123, 126, 'blue'), (126, 137, 'green')]
2016-08-07 20:38:28,607 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'red'), (123, 126, 'blue')]
2016-08-07 20:38:28,608 - DEBUG --- current_color: blue, next_color: green, current_edge: (123, 126, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,608 - DEBUG --- Loop: current_edge: (123, 126, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,608 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'blue'), (123, 159, 'red')]
2016-08-07 20:38:28,608 - DEBUG --- vertex: 123, edges_to_check: [(119, 123, 'green'), (123, 159, 'red')]
2016-08-07 20:38:28,608 - DEBUG --- current_color: green, next_color: blue, current_edge: (119, 123, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,609 - DEBUG --- Loop: current_edge: (119, 123, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,609 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'blue'), (119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:28,609 - DEBUG --- vertex: 119, edges_to_check: [(70, 119, 'blue'), (119, 150, 'red')]
2016-08-07 20:38:28,609 - DEBUG --- current_color: blue, next_color: green, current_edge: (70, 119, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,609 - DEBUG --- Loop: current_edge: (70, 119, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,610 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'red'), (64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:28,610 - DEBUG --- vertex: 70, edges_to_check: [(59, 70, 'red'), (64, 70, 'green')]
2016-08-07 20:38:28,610 - DEBUG --- current_color: green, next_color: blue, current_edge: (64, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,610 - DEBUG --- Loop: current_edge: (64, 70, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,610 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'blue'), (64, 126, 'red')]
2016-08-07 20:38:28,611 - DEBUG --- vertex: 64, edges_to_check: [(64, 71, 'blue'), (64, 126, 'red')]
2016-08-07 20:38:28,611 - DEBUG --- current_color: blue, next_color: green, current_edge: (64, 71, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,611 - DEBUG --- Loop: current_edge: (64, 71, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,611 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'green'), (64, 71, 'blue'), (71, 259, 'red')]
2016-08-07 20:38:28,611 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'green'), (71, 259, 'red')]
2016-08-07 20:38:28,611 - DEBUG --- current_color: green, next_color: blue, current_edge: (63, 71, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,612 - DEBUG --- Loop: current_edge: (63, 71, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,612 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'red'), (59, 63, 'blue'), (63, 71, 'green')]
2016-08-07 20:38:28,612 - DEBUG --- vertex: 63, edges_to_check: [(56, 63, 'red'), (59, 63, 'blue')]
2016-08-07 20:38:28,612 - DEBUG --- current_color: blue, next_color: green, current_edge: (59, 63, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,612 - DEBUG --- Loop: current_edge: (59, 63, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,613 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'blue'), (59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,613 - DEBUG --- vertex: 59, edges_to_check: [(59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,613 - DEBUG --- current_color: green, next_color: blue, current_edge: (59, 92, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:28,613 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:28,613 - DEBUG --- CASE-F5-C1==C2-Swap-C3-C4-OnTop. vertex_to_join_near_v1_on_the_face: 92, vertex_in_the_top_middle: 97, c3: red, c4: blue
2016-08-07 20:38:28,614 - DEBUG --- BEGIN: kempe_chain_color_swap: (92, 97), red, blue
2016-08-07 20:38:28,614 - DEBUG --- degree: 3
2016-08-07 20:38:28,614 - DEBUG --- Loop: current_edge: (92, 97), current_color: red, next_color: blue
2016-08-07 20:38:28,614 - DEBUG --- Vertex at direction: 97
2016-08-07 20:38:28,614 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,615 - DEBUG --- tmp_next_edges_to_check: [(50, 97, 'blue'), (92, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:28,615 - DEBUG --- vertex: 97, edges_to_check: [(50, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,615 - DEBUG --- degree: 3
2016-08-07 20:38:28,615 - DEBUG --- Loop: current_edge: (50, 97, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,616 - DEBUG --- Vertex at direction: 50
2016-08-07 20:38:28,616 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,616 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'red'), (50, 56, 'green'), (50, 97, 'red')]
2016-08-07 20:38:28,616 - DEBUG --- vertex: 50, edges_to_check: [(29, 50, 'red'), (50, 56, 'green')]
2016-08-07 20:38:28,617 - DEBUG --- degree: 3
2016-08-07 20:38:28,617 - DEBUG --- Loop: current_edge: (29, 50, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,617 - DEBUG --- Vertex at direction: 29
2016-08-07 20:38:28,617 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,617 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'blue'), (29, 52, 'green'), (29, 225, 'blue')]
2016-08-07 20:38:28,618 - DEBUG --- vertex: 29, edges_to_check: [(29, 52, 'green'), (29, 225, 'blue')]
2016-08-07 20:38:28,618 - DEBUG --- degree: 3
2016-08-07 20:38:28,618 - DEBUG --- Loop: current_edge: (29, 225, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,618 - DEBUG --- Vertex at direction: 225
2016-08-07 20:38:28,619 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,619 - DEBUG --- tmp_next_edges_to_check: [(29, 225, 'red'), (165, 225, 'green'), (225, 228, 'red')]
2016-08-07 20:38:28,619 - DEBUG --- vertex: 225, edges_to_check: [(165, 225, 'green'), (225, 228, 'red')]
2016-08-07 20:38:28,619 - DEBUG --- degree: 3
2016-08-07 20:38:28,619 - DEBUG --- Loop: current_edge: (225, 228, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,620 - DEBUG --- Vertex at direction: 228
2016-08-07 20:38:28,620 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,620 - DEBUG --- tmp_next_edges_to_check: [(225, 228, 'blue'), (228, 231, 'green'), (228, 242, 'blue')]
2016-08-07 20:38:28,620 - DEBUG --- vertex: 228, edges_to_check: [(228, 231, 'green'), (228, 242, 'blue')]
2016-08-07 20:38:28,620 - DEBUG --- degree: 3
2016-08-07 20:38:28,621 - DEBUG --- Loop: current_edge: (228, 242, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,621 - DEBUG --- Vertex at direction: 242
2016-08-07 20:38:28,621 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,621 - DEBUG --- tmp_next_edges_to_check: [(162, 242, 'green'), (213, 242, 'red'), (228, 242, 'red')]
2016-08-07 20:38:28,621 - DEBUG --- vertex: 242, edges_to_check: [(162, 242, 'green'), (213, 242, 'red')]
2016-08-07 20:38:28,622 - DEBUG --- degree: 3
2016-08-07 20:38:28,623 - DEBUG --- Loop: current_edge: (213, 242, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,623 - DEBUG --- Vertex at direction: 213
2016-08-07 20:38:28,623 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,623 - DEBUG --- tmp_next_edges_to_check: [(137, 213, 'blue'), (213, 242, 'blue'), (213, 259, 'green')]
2016-08-07 20:38:28,624 - DEBUG --- vertex: 213, edges_to_check: [(137, 213, 'blue'), (213, 259, 'green')]
2016-08-07 20:38:28,624 - DEBUG --- degree: 3
2016-08-07 20:38:28,624 - DEBUG --- Loop: current_edge: (137, 213, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,624 - DEBUG --- Vertex at direction: 137
2016-08-07 20:38:28,624 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,625 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'red'), (137, 213, 'red')]
2016-08-07 20:38:28,625 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 161, 'red')]
2016-08-07 20:38:28,625 - DEBUG --- degree: 3
2016-08-07 20:38:28,626 - DEBUG --- Loop: current_edge: (137, 161, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,626 - DEBUG --- Vertex at direction: 161
2016-08-07 20:38:28,626 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,626 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'blue'), (159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:28,626 - DEBUG --- vertex: 161, edges_to_check: [(159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:28,627 - DEBUG --- degree: 3
2016-08-07 20:38:28,627 - DEBUG --- Loop: current_edge: (161, 162, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,627 - DEBUG --- Vertex at direction: 162
2016-08-07 20:38:28,627 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,628 - DEBUG --- tmp_next_edges_to_check: [(161, 162, 'red'), (162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:28,628 - DEBUG --- vertex: 162, edges_to_check: [(162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:28,628 - DEBUG --- degree: 3
2016-08-07 20:38:28,628 - DEBUG --- Loop: current_edge: (162, 165, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,628 - DEBUG --- Vertex at direction: 165
2016-08-07 20:38:28,629 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,629 - DEBUG --- tmp_next_edges_to_check: [(162, 165, 'blue'), (163, 165, 'blue'), (165, 225, 'green')]
2016-08-07 20:38:28,629 - DEBUG --- vertex: 165, edges_to_check: [(163, 165, 'blue'), (165, 225, 'green')]
2016-08-07 20:38:28,629 - DEBUG --- degree: 3
2016-08-07 20:38:28,630 - DEBUG --- Loop: current_edge: (163, 165, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,630 - DEBUG --- Vertex at direction: 163
2016-08-07 20:38:28,630 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'red'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,630 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'red'), (163, 165, 'red')]
2016-08-07 20:38:28,631 - DEBUG --- vertex: 163, edges_to_check: [(97, 163, 'green'), (156, 163, 'red')]
2016-08-07 20:38:28,631 - DEBUG --- degree: 3
2016-08-07 20:38:28,631 - DEBUG --- Loop: current_edge: (156, 163, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,631 - DEBUG --- Vertex at direction: 156
2016-08-07 20:38:28,631 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,632 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'blue'), (156, 163, 'blue')]
2016-08-07 20:38:28,632 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 159, 'blue')]
2016-08-07 20:38:28,632 - DEBUG --- degree: 3
2016-08-07 20:38:28,632 - DEBUG --- Loop: current_edge: (156, 159, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,633 - DEBUG --- Vertex at direction: 159
2016-08-07 20:38:28,633 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,633 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'red'), (156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,633 - DEBUG --- vertex: 159, edges_to_check: [(123, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,634 - DEBUG --- degree: 3
2016-08-07 20:38:28,634 - DEBUG --- Loop: current_edge: (123, 159, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,634 - DEBUG --- Vertex at direction: 123
2016-08-07 20:38:28,634 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,634 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'blue'), (123, 159, 'blue')]
2016-08-07 20:38:28,635 - DEBUG --- vertex: 123, edges_to_check: [(119, 123, 'green'), (123, 126, 'blue')]
2016-08-07 20:38:28,635 - DEBUG --- degree: 3
2016-08-07 20:38:28,635 - DEBUG --- Loop: current_edge: (123, 126, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,635 - DEBUG --- Vertex at direction: 126
2016-08-07 20:38:28,636 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,636 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'red'), (123, 126, 'red'), (126, 137, 'green')]
2016-08-07 20:38:28,636 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'red'), (126, 137, 'green')]
2016-08-07 20:38:28,636 - DEBUG --- degree: 3
2016-08-07 20:38:28,637 - DEBUG --- Loop: current_edge: (64, 126, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,637 - DEBUG --- Vertex at direction: 64
2016-08-07 20:38:28,637 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,637 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'blue'), (64, 126, 'blue')]
2016-08-07 20:38:28,638 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'green'), (64, 71, 'blue')]
2016-08-07 20:38:28,638 - DEBUG --- degree: 3
2016-08-07 20:38:28,638 - DEBUG --- Loop: current_edge: (64, 71, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,638 - DEBUG --- Vertex at direction: 71
2016-08-07 20:38:28,638 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,639 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'green'), (64, 71, 'red'), (71, 259, 'red')]
2016-08-07 20:38:28,639 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'green'), (71, 259, 'red')]
2016-08-07 20:38:28,639 - DEBUG --- degree: 3
2016-08-07 20:38:28,639 - DEBUG --- Loop: current_edge: (71, 259, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,640 - DEBUG --- Vertex at direction: 259
2016-08-07 20:38:28,640 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,640 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'blue'), (213, 259, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,640 - DEBUG --- vertex: 259, edges_to_check: [(213, 259, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,640 - DEBUG --- degree: 3
2016-08-07 20:38:28,641 - DEBUG --- Loop: current_edge: (231, 259, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,641 - DEBUG --- Vertex at direction: 231
2016-08-07 20:38:28,641 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,641 - DEBUG --- tmp_next_edges_to_check: [(52, 231, 'red'), (228, 231, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,641 - DEBUG --- vertex: 231, edges_to_check: [(52, 231, 'red'), (228, 231, 'green')]
2016-08-07 20:38:28,642 - DEBUG --- degree: 3
2016-08-07 20:38:28,642 - DEBUG --- Loop: current_edge: (52, 231, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,642 - DEBUG --- Vertex at direction: 52
2016-08-07 20:38:28,642 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,643 - DEBUG --- tmp_next_edges_to_check: [(29, 52, 'green'), (52, 56, 'blue'), (52, 231, 'blue')]
2016-08-07 20:38:28,643 - DEBUG --- vertex: 52, edges_to_check: [(29, 52, 'green'), (52, 56, 'blue')]
2016-08-07 20:38:28,643 - DEBUG --- degree: 3
2016-08-07 20:38:28,643 - DEBUG --- Loop: current_edge: (52, 56, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,643 - DEBUG --- Vertex at direction: 56
2016-08-07 20:38:28,644 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,644 - DEBUG --- tmp_next_edges_to_check: [(50, 56, 'green'), (52, 56, 'red'), (56, 63, 'red')]
2016-08-07 20:38:28,644 - DEBUG --- vertex: 56, edges_to_check: [(50, 56, 'green'), (56, 63, 'red')]
2016-08-07 20:38:28,644 - DEBUG --- degree: 3
2016-08-07 20:38:28,644 - DEBUG --- Loop: current_edge: (56, 63, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,645 - DEBUG --- Vertex at direction: 63
2016-08-07 20:38:28,645 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,646 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'blue'), (59, 63, 'blue'), (63, 71, 'green')]
2016-08-07 20:38:28,646 - DEBUG --- vertex: 63, edges_to_check: [(59, 63, 'blue'), (63, 71, 'green')]
2016-08-07 20:38:28,646 - DEBUG --- degree: 3
2016-08-07 20:38:28,646 - DEBUG --- Loop: current_edge: (59, 63, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,647 - DEBUG --- Vertex at direction: 59
2016-08-07 20:38:28,647 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,647 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'red'), (59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,648 - DEBUG --- vertex: 59, edges_to_check: [(59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,648 - DEBUG --- degree: 3
2016-08-07 20:38:28,648 - DEBUG --- Loop: current_edge: (59, 70, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,648 - DEBUG --- Vertex at direction: 70
2016-08-07 20:38:28,648 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,649 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'blue'), (64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:28,649 - DEBUG --- vertex: 70, edges_to_check: [(64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:28,649 - DEBUG --- degree: 3
2016-08-07 20:38:28,649 - DEBUG --- Loop: current_edge: (70, 119, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,650 - DEBUG --- Vertex at direction: 119
2016-08-07 20:38:28,650 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,650 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'red'), (119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:28,650 - DEBUG --- vertex: 119, edges_to_check: [(119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:28,650 - DEBUG --- degree: 3
2016-08-07 20:38:28,651 - DEBUG --- Loop: current_edge: (119, 150, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,651 - DEBUG --- Vertex at direction: 150
2016-08-07 20:38:28,651 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,651 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'blue'), (119, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,651 - DEBUG --- vertex: 150, edges_to_check: [(92, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,652 - DEBUG --- degree: 3
2016-08-07 20:38:28,652 - DEBUG --- Loop: current_edge: (92, 150, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,652 - DEBUG --- Vertex at direction: 92
2016-08-07 20:38:28,652 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,653 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,653 - DEBUG --- vertex: 92, edges_to_check: [(59, 92, 'green'), (92, 97, 'blue')]
2016-08-07 20:38:28,653 - DEBUG --- END: kempe_chain_color_swap
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
2016-08-07 20:38:28,653 - INFO --- ------------------
2016-08-07 20:38:28,653 - INFO --- BEGIN: Print stats
2016-08-07 20:38:28,654 - INFO --- ------------------
2016-08-07 20:38:28,654 - INFO --- Stat: CASE-F2-01 = 0 times
2016-08-07 20:38:28,654 - INFO --- Stat: CASE-F3-01 = 2 times
2016-08-07 20:38:28,654 - INFO --- Stat: CASE-F4-01 = 6 times
2016-08-07 20:38:28,654 - INFO --- Stat: CASE-F4-02 = 2 times
2016-08-07 20:38:28,655 - INFO --- Stat: CASE-F4-03 = 1 times
2016-08-07 20:38:28,655 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:28,655 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-Swap-C1-C2-At-v2 = 0 times
2016-08-07 20:38:28,655 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:28,655 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-Swap-C2-C1-At-v2 = 1 times
2016-08-07 20:38:28,655 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4==C1-Shortest-KempeLoop = 0 times
2016-08-07 20:38:28,655 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C3 = 1 times
2016-08-07 20:38:28,656 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C4 = 0 times
2016-08-07 20:38:28,656 - INFO --- Stat: CASE-F5-C1==C2-Swap-C3-C4-OnTop = 3 times
2016-08-07 20:38:28,656 - INFO --- ----------------
2016-08-07 20:38:28,656 - INFO --- END: Print stats
2016-08-07 20:38:28,656 - INFO --- ----------------
2016-08-07 20:38:28,657 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (59, 92), (56, 50), green, blue
2016-08-07 20:38:28,657 - DEBUG --- out_of_scope_color: red
2016-08-07 20:38:28,657 - DEBUG --- current_color: green
2016-08-07 20:38:28,657 - DEBUG --- Loop: current_edge: (59, 92), current_color: green, next_color: blue
2016-08-07 20:38:28,657 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,658 - DEBUG --- vertex: 92, edges_to_check: [(92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,658 - DEBUG --- current_color: blue, next_color: green, current_edge: (92, 97, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,658 - DEBUG --- Loop: current_edge: (92, 97, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,658 - DEBUG --- tmp_next_edges_to_check: [(50, 97, 'red'), (92, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,658 - DEBUG --- vertex: 97, edges_to_check: [(50, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:28,659 - DEBUG --- current_color: green, next_color: blue, current_edge: (97, 163, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,659 - DEBUG --- Loop: current_edge: (97, 163, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,659 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'blue'), (163, 165, 'red')]
2016-08-07 20:38:28,659 - DEBUG --- vertex: 163, edges_to_check: [(156, 163, 'blue'), (163, 165, 'red')]
2016-08-07 20:38:28,659 - DEBUG --- current_color: blue, next_color: green, current_edge: (156, 163, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,660 - DEBUG --- Loop: current_edge: (156, 163, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,660 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'red'), (156, 163, 'blue')]
2016-08-07 20:38:28,660 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 159, 'red')]
2016-08-07 20:38:28,660 - DEBUG --- current_color: green, next_color: blue, current_edge: (150, 156, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,660 - DEBUG --- Loop: current_edge: (150, 156, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,661 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'red'), (119, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,661 - DEBUG --- vertex: 150, edges_to_check: [(92, 150, 'red'), (119, 150, 'blue')]
2016-08-07 20:38:28,661 - DEBUG --- current_color: blue, next_color: green, current_edge: (119, 150, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,661 - DEBUG --- Loop: current_edge: (119, 150, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,661 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'red'), (119, 123, 'green'), (119, 150, 'blue')]
2016-08-07 20:38:28,661 - DEBUG --- vertex: 119, edges_to_check: [(70, 119, 'red'), (119, 123, 'green')]
2016-08-07 20:38:28,662 - DEBUG --- current_color: green, next_color: blue, current_edge: (119, 123, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,662 - DEBUG --- Loop: current_edge: (119, 123, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,662 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'red'), (123, 159, 'blue')]
2016-08-07 20:38:28,662 - DEBUG --- vertex: 123, edges_to_check: [(123, 126, 'red'), (123, 159, 'blue')]
2016-08-07 20:38:28,662 - DEBUG --- current_color: blue, next_color: green, current_edge: (123, 159, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,663 - DEBUG --- Loop: current_edge: (123, 159, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,663 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'blue'), (156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,663 - DEBUG --- vertex: 159, edges_to_check: [(156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,663 - DEBUG --- current_color: green, next_color: blue, current_edge: (159, 161, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,663 - DEBUG --- Loop: current_edge: (159, 161, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,664 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'blue'), (159, 161, 'green'), (161, 162, 'red')]
2016-08-07 20:38:28,664 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'blue'), (161, 162, 'red')]
2016-08-07 20:38:28,664 - DEBUG --- current_color: blue, next_color: green, current_edge: (137, 161, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,664 - DEBUG --- Loop: current_edge: (137, 161, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,664 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'blue'), (137, 213, 'red')]
2016-08-07 20:38:28,665 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 213, 'red')]
2016-08-07 20:38:28,665 - DEBUG --- current_color: green, next_color: blue, current_edge: (126, 137, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,665 - DEBUG --- Loop: current_edge: (126, 137, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,665 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'blue'), (123, 126, 'red'), (126, 137, 'green')]
2016-08-07 20:38:28,665 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'blue'), (123, 126, 'red')]
2016-08-07 20:38:28,666 - DEBUG --- current_color: blue, next_color: green, current_edge: (64, 126, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,666 - DEBUG --- Loop: current_edge: (64, 126, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,666 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'red'), (64, 126, 'blue')]
2016-08-07 20:38:28,666 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'green'), (64, 71, 'red')]
2016-08-07 20:38:28,666 - DEBUG --- current_color: green, next_color: blue, current_edge: (64, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,666 - DEBUG --- Loop: current_edge: (64, 70, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,667 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'blue'), (64, 70, 'green'), (70, 119, 'red')]
2016-08-07 20:38:28,667 - DEBUG --- vertex: 70, edges_to_check: [(59, 70, 'blue'), (70, 119, 'red')]
2016-08-07 20:38:28,667 - DEBUG --- current_color: blue, next_color: green, current_edge: (59, 70, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,667 - DEBUG --- Loop: current_edge: (59, 70, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,667 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'red'), (59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,668 - DEBUG --- vertex: 59, edges_to_check: [(59, 63, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,668 - DEBUG --- current_color: green, next_color: blue, current_edge: (59, 92, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:28,668 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:28,668 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (59, 92), (56, 50), green, red
2016-08-07 20:38:28,669 - DEBUG --- out_of_scope_color: blue
2016-08-07 20:38:28,669 - DEBUG --- current_color: green
2016-08-07 20:38:28,669 - DEBUG --- Loop: current_edge: (59, 92), current_color: green, next_color: red
2016-08-07 20:38:28,669 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,669 - DEBUG --- vertex: 92, edges_to_check: [(92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,670 - DEBUG --- current_color: red, next_color: green, current_edge: (92, 150, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,670 - DEBUG --- Loop: current_edge: (92, 150, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,670 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'red'), (119, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,670 - DEBUG --- vertex: 150, edges_to_check: [(119, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,670 - DEBUG --- current_color: green, next_color: red, current_edge: (150, 156, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,671 - DEBUG --- Loop: current_edge: (150, 156, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,671 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'red'), (156, 163, 'blue')]
2016-08-07 20:38:28,671 - DEBUG --- vertex: 156, edges_to_check: [(156, 159, 'red'), (156, 163, 'blue')]
2016-08-07 20:38:28,671 - DEBUG --- current_color: red, next_color: green, current_edge: (156, 159, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,671 - DEBUG --- Loop: current_edge: (156, 159, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,672 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'blue'), (156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,672 - DEBUG --- vertex: 159, edges_to_check: [(123, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,672 - DEBUG --- current_color: green, next_color: red, current_edge: (159, 161, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,672 - DEBUG --- Loop: current_edge: (159, 161, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,672 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'blue'), (159, 161, 'green'), (161, 162, 'red')]
2016-08-07 20:38:28,673 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'blue'), (161, 162, 'red')]
2016-08-07 20:38:28,673 - DEBUG --- current_color: red, next_color: green, current_edge: (161, 162, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,673 - DEBUG --- Loop: current_edge: (161, 162, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,673 - DEBUG --- tmp_next_edges_to_check: [(161, 162, 'red'), (162, 165, 'blue'), (162, 242, 'green')]
2016-08-07 20:38:28,673 - DEBUG --- vertex: 162, edges_to_check: [(162, 165, 'blue'), (162, 242, 'green')]
2016-08-07 20:38:28,673 - DEBUG --- current_color: green, next_color: red, current_edge: (162, 242, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,674 - DEBUG --- Loop: current_edge: (162, 242, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,674 - DEBUG --- tmp_next_edges_to_check: [(162, 242, 'green'), (213, 242, 'blue'), (228, 242, 'red')]
2016-08-07 20:38:28,674 - DEBUG --- vertex: 242, edges_to_check: [(213, 242, 'blue'), (228, 242, 'red')]
2016-08-07 20:38:28,674 - DEBUG --- current_color: red, next_color: green, current_edge: (228, 242, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,674 - DEBUG --- Loop: current_edge: (228, 242, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,675 - DEBUG --- tmp_next_edges_to_check: [(225, 228, 'blue'), (228, 231, 'green'), (228, 242, 'red')]
2016-08-07 20:38:28,675 - DEBUG --- vertex: 228, edges_to_check: [(225, 228, 'blue'), (228, 231, 'green')]
2016-08-07 20:38:28,676 - DEBUG --- current_color: green, next_color: red, current_edge: (228, 231, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,676 - DEBUG --- Loop: current_edge: (228, 231, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,676 - DEBUG --- tmp_next_edges_to_check: [(52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,676 - DEBUG --- vertex: 231, edges_to_check: [(52, 231, 'blue'), (231, 259, 'red')]
2016-08-07 20:38:28,676 - DEBUG --- current_color: red, next_color: green, current_edge: (231, 259, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,677 - DEBUG --- Loop: current_edge: (231, 259, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,677 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'blue'), (213, 259, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,677 - DEBUG --- vertex: 259, edges_to_check: [(71, 259, 'blue'), (213, 259, 'green')]
2016-08-07 20:38:28,677 - DEBUG --- current_color: green, next_color: red, current_edge: (213, 259, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,677 - DEBUG --- Loop: current_edge: (213, 259, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,678 - DEBUG --- tmp_next_edges_to_check: [(137, 213, 'red'), (213, 242, 'blue'), (213, 259, 'green')]
2016-08-07 20:38:28,678 - DEBUG --- vertex: 213, edges_to_check: [(137, 213, 'red'), (213, 242, 'blue')]
2016-08-07 20:38:28,678 - DEBUG --- current_color: red, next_color: green, current_edge: (137, 213, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,678 - DEBUG --- Loop: current_edge: (137, 213, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,678 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'blue'), (137, 213, 'red')]
2016-08-07 20:38:28,679 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 161, 'blue')]
2016-08-07 20:38:28,679 - DEBUG --- current_color: green, next_color: red, current_edge: (126, 137, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,679 - DEBUG --- Loop: current_edge: (126, 137, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,679 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'blue'), (123, 126, 'red'), (126, 137, 'green')]
2016-08-07 20:38:28,679 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'blue'), (123, 126, 'red')]
2016-08-07 20:38:28,680 - DEBUG --- current_color: red, next_color: green, current_edge: (123, 126, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,680 - DEBUG --- Loop: current_edge: (123, 126, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,680 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'red'), (123, 159, 'blue')]
2016-08-07 20:38:28,680 - DEBUG --- vertex: 123, edges_to_check: [(119, 123, 'green'), (123, 159, 'blue')]
2016-08-07 20:38:28,680 - DEBUG --- current_color: green, next_color: red, current_edge: (119, 123, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,680 - DEBUG --- Loop: current_edge: (119, 123, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,681 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'red'), (119, 123, 'green'), (119, 150, 'blue')]
2016-08-07 20:38:28,681 - DEBUG --- vertex: 119, edges_to_check: [(70, 119, 'red'), (119, 150, 'blue')]
2016-08-07 20:38:28,681 - DEBUG --- current_color: red, next_color: green, current_edge: (70, 119, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,681 - DEBUG --- Loop: current_edge: (70, 119, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,681 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'blue'), (64, 70, 'green'), (70, 119, 'red')]
2016-08-07 20:38:28,682 - DEBUG --- vertex: 70, edges_to_check: [(59, 70, 'blue'), (64, 70, 'green')]
2016-08-07 20:38:28,682 - DEBUG --- current_color: green, next_color: red, current_edge: (64, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,682 - DEBUG --- Loop: current_edge: (64, 70, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,682 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'red'), (64, 126, 'blue')]
2016-08-07 20:38:28,683 - DEBUG --- vertex: 64, edges_to_check: [(64, 71, 'red'), (64, 126, 'blue')]
2016-08-07 20:38:28,683 - DEBUG --- current_color: red, next_color: green, current_edge: (64, 71, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,683 - DEBUG --- Loop: current_edge: (64, 71, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,683 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'green'), (64, 71, 'red'), (71, 259, 'blue')]
2016-08-07 20:38:28,683 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'green'), (71, 259, 'blue')]
2016-08-07 20:38:28,684 - DEBUG --- current_color: green, next_color: red, current_edge: (63, 71, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,684 - DEBUG --- Loop: current_edge: (63, 71, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,684 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'blue'), (59, 63, 'red'), (63, 71, 'green')]
2016-08-07 20:38:28,684 - DEBUG --- vertex: 63, edges_to_check: [(56, 63, 'blue'), (59, 63, 'red')]
2016-08-07 20:38:28,684 - DEBUG --- current_color: red, next_color: green, current_edge: (59, 63, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,685 - DEBUG --- Loop: current_edge: (59, 63, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,685 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'red'), (59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,685 - DEBUG --- vertex: 59, edges_to_check: [(59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,685 - DEBUG --- current_color: green, next_color: red, current_edge: (59, 92, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:28,685 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:28,686 - DEBUG --- CASE-F5-C1==C2-Swap-C3-C4-OnTop. vertex_to_join_near_v1_on_the_face: 92, vertex_in_the_top_middle: 97, c3: blue, c4: red
2016-08-07 20:38:28,686 - DEBUG --- BEGIN: kempe_chain_color_swap: (92, 97), blue, red
2016-08-07 20:38:28,686 - DEBUG --- degree: 3
2016-08-07 20:38:28,686 - DEBUG --- Loop: current_edge: (92, 97), current_color: blue, next_color: red
2016-08-07 20:38:28,686 - DEBUG --- Vertex at direction: 97
2016-08-07 20:38:28,687 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,687 - DEBUG --- tmp_next_edges_to_check: [(50, 97, 'red'), (92, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,687 - DEBUG --- vertex: 97, edges_to_check: [(50, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:28,687 - DEBUG --- degree: 3
2016-08-07 20:38:28,688 - DEBUG --- Loop: current_edge: (50, 97, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,688 - DEBUG --- Vertex at direction: 50
2016-08-07 20:38:28,688 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,688 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'blue'), (50, 56, 'green'), (50, 97, 'blue')]
2016-08-07 20:38:28,689 - DEBUG --- vertex: 50, edges_to_check: [(29, 50, 'blue'), (50, 56, 'green')]
2016-08-07 20:38:28,689 - DEBUG --- degree: 3
2016-08-07 20:38:28,689 - DEBUG --- Loop: current_edge: (29, 50, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,689 - DEBUG --- Vertex at direction: 29
2016-08-07 20:38:28,690 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,690 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'red'), (29, 52, 'green'), (29, 225, 'red')]
2016-08-07 20:38:28,690 - DEBUG --- vertex: 29, edges_to_check: [(29, 52, 'green'), (29, 225, 'red')]
2016-08-07 20:38:28,690 - DEBUG --- degree: 3
2016-08-07 20:38:28,690 - DEBUG --- Loop: current_edge: (29, 225, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,691 - DEBUG --- Vertex at direction: 225
2016-08-07 20:38:28,691 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,691 - DEBUG --- tmp_next_edges_to_check: [(29, 225, 'blue'), (165, 225, 'green'), (225, 228, 'blue')]
2016-08-07 20:38:28,691 - DEBUG --- vertex: 225, edges_to_check: [(165, 225, 'green'), (225, 228, 'blue')]
2016-08-07 20:38:28,692 - DEBUG --- degree: 3
2016-08-07 20:38:28,692 - DEBUG --- Loop: current_edge: (225, 228, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,692 - DEBUG --- Vertex at direction: 228
2016-08-07 20:38:28,692 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'red'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,692 - DEBUG --- tmp_next_edges_to_check: [(225, 228, 'red'), (228, 231, 'green'), (228, 242, 'red')]
2016-08-07 20:38:28,693 - DEBUG --- vertex: 228, edges_to_check: [(228, 231, 'green'), (228, 242, 'red')]
2016-08-07 20:38:28,693 - DEBUG --- degree: 3
2016-08-07 20:38:28,693 - DEBUG --- Loop: current_edge: (228, 242, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,693 - DEBUG --- Vertex at direction: 242
2016-08-07 20:38:28,694 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,694 - DEBUG --- tmp_next_edges_to_check: [(162, 242, 'green'), (213, 242, 'blue'), (228, 242, 'blue')]
2016-08-07 20:38:28,694 - DEBUG --- vertex: 242, edges_to_check: [(162, 242, 'green'), (213, 242, 'blue')]
2016-08-07 20:38:28,694 - DEBUG --- degree: 3
2016-08-07 20:38:28,694 - DEBUG --- Loop: current_edge: (213, 242, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,695 - DEBUG --- Vertex at direction: 213
2016-08-07 20:38:28,695 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,695 - DEBUG --- tmp_next_edges_to_check: [(137, 213, 'red'), (213, 242, 'red'), (213, 259, 'green')]
2016-08-07 20:38:28,695 - DEBUG --- vertex: 213, edges_to_check: [(137, 213, 'red'), (213, 259, 'green')]
2016-08-07 20:38:28,696 - DEBUG --- degree: 3
2016-08-07 20:38:28,696 - DEBUG --- Loop: current_edge: (137, 213, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,696 - DEBUG --- Vertex at direction: 137
2016-08-07 20:38:28,696 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,697 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'blue'), (137, 213, 'blue')]
2016-08-07 20:38:28,697 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 161, 'blue')]
2016-08-07 20:38:28,697 - DEBUG --- degree: 3
2016-08-07 20:38:28,697 - DEBUG --- Loop: current_edge: (137, 161, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,697 - DEBUG --- Vertex at direction: 161
2016-08-07 20:38:28,698 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,698 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'red'), (159, 161, 'green'), (161, 162, 'red')]
2016-08-07 20:38:28,698 - DEBUG --- vertex: 161, edges_to_check: [(159, 161, 'green'), (161, 162, 'red')]
2016-08-07 20:38:28,698 - DEBUG --- degree: 3
2016-08-07 20:38:28,698 - DEBUG --- Loop: current_edge: (161, 162, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,699 - DEBUG --- Vertex at direction: 162
2016-08-07 20:38:28,699 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,699 - DEBUG --- tmp_next_edges_to_check: [(161, 162, 'blue'), (162, 165, 'blue'), (162, 242, 'green')]
2016-08-07 20:38:28,699 - DEBUG --- vertex: 162, edges_to_check: [(162, 165, 'blue'), (162, 242, 'green')]
2016-08-07 20:38:28,700 - DEBUG --- degree: 3
2016-08-07 20:38:28,700 - DEBUG --- Loop: current_edge: (162, 165, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,700 - DEBUG --- Vertex at direction: 165
2016-08-07 20:38:28,700 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,701 - DEBUG --- tmp_next_edges_to_check: [(162, 165, 'red'), (163, 165, 'red'), (165, 225, 'green')]
2016-08-07 20:38:28,701 - DEBUG --- vertex: 165, edges_to_check: [(163, 165, 'red'), (165, 225, 'green')]
2016-08-07 20:38:28,701 - DEBUG --- degree: 3
2016-08-07 20:38:28,701 - DEBUG --- Loop: current_edge: (163, 165, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,701 - DEBUG --- Vertex at direction: 163
2016-08-07 20:38:28,702 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'blue'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,703 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'blue'), (163, 165, 'blue')]
2016-08-07 20:38:28,703 - DEBUG --- vertex: 163, edges_to_check: [(97, 163, 'green'), (156, 163, 'blue')]
2016-08-07 20:38:28,703 - DEBUG --- degree: 3
2016-08-07 20:38:28,703 - DEBUG --- Loop: current_edge: (156, 163, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,704 - DEBUG --- Vertex at direction: 156
2016-08-07 20:38:28,704 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,704 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'red'), (156, 163, 'red')]
2016-08-07 20:38:28,704 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 159, 'red')]
2016-08-07 20:38:28,704 - DEBUG --- degree: 3
2016-08-07 20:38:28,705 - DEBUG --- Loop: current_edge: (156, 159, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,705 - DEBUG --- Vertex at direction: 159
2016-08-07 20:38:28,705 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,705 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'blue'), (156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,705 - DEBUG --- vertex: 159, edges_to_check: [(123, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,706 - DEBUG --- degree: 3
2016-08-07 20:38:28,706 - DEBUG --- Loop: current_edge: (123, 159, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,706 - DEBUG --- Vertex at direction: 123
2016-08-07 20:38:28,706 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,707 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'red'), (123, 159, 'red')]
2016-08-07 20:38:28,707 - DEBUG --- vertex: 123, edges_to_check: [(119, 123, 'green'), (123, 126, 'red')]
2016-08-07 20:38:28,707 - DEBUG --- degree: 3
2016-08-07 20:38:28,707 - DEBUG --- Loop: current_edge: (123, 126, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,707 - DEBUG --- Vertex at direction: 126
2016-08-07 20:38:28,708 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,708 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'blue'), (123, 126, 'blue'), (126, 137, 'green')]
2016-08-07 20:38:28,708 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'blue'), (126, 137, 'green')]
2016-08-07 20:38:28,708 - DEBUG --- degree: 3
2016-08-07 20:38:28,709 - DEBUG --- Loop: current_edge: (64, 126, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,709 - DEBUG --- Vertex at direction: 64
2016-08-07 20:38:28,709 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,709 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'red'), (64, 126, 'red')]
2016-08-07 20:38:28,710 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'green'), (64, 71, 'red')]
2016-08-07 20:38:28,710 - DEBUG --- degree: 3
2016-08-07 20:38:28,710 - DEBUG --- Loop: current_edge: (64, 71, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,710 - DEBUG --- Vertex at direction: 71
2016-08-07 20:38:28,710 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,711 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'green'), (64, 71, 'blue'), (71, 259, 'blue')]
2016-08-07 20:38:28,711 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'green'), (71, 259, 'blue')]
2016-08-07 20:38:28,711 - DEBUG --- degree: 3
2016-08-07 20:38:28,711 - DEBUG --- Loop: current_edge: (71, 259, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,712 - DEBUG --- Vertex at direction: 259
2016-08-07 20:38:28,712 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,712 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'red'), (213, 259, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,712 - DEBUG --- vertex: 259, edges_to_check: [(213, 259, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,712 - DEBUG --- degree: 3
2016-08-07 20:38:28,713 - DEBUG --- Loop: current_edge: (231, 259, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,713 - DEBUG --- Vertex at direction: 231
2016-08-07 20:38:28,713 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,713 - DEBUG --- tmp_next_edges_to_check: [(52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,713 - DEBUG --- vertex: 231, edges_to_check: [(52, 231, 'blue'), (228, 231, 'green')]
2016-08-07 20:38:28,714 - DEBUG --- degree: 3
2016-08-07 20:38:28,714 - DEBUG --- Loop: current_edge: (52, 231, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,714 - DEBUG --- Vertex at direction: 52
2016-08-07 20:38:28,714 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,715 - DEBUG --- tmp_next_edges_to_check: [(29, 52, 'green'), (52, 56, 'red'), (52, 231, 'red')]
2016-08-07 20:38:28,715 - DEBUG --- vertex: 52, edges_to_check: [(29, 52, 'green'), (52, 56, 'red')]
2016-08-07 20:38:28,715 - DEBUG --- degree: 3
2016-08-07 20:38:28,715 - DEBUG --- Loop: current_edge: (52, 56, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,715 - DEBUG --- Vertex at direction: 56
2016-08-07 20:38:28,716 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,716 - DEBUG --- tmp_next_edges_to_check: [(50, 56, 'green'), (52, 56, 'blue'), (56, 63, 'blue')]
2016-08-07 20:38:28,716 - DEBUG --- vertex: 56, edges_to_check: [(50, 56, 'green'), (56, 63, 'blue')]
2016-08-07 20:38:28,716 - DEBUG --- degree: 3
2016-08-07 20:38:28,717 - DEBUG --- Loop: current_edge: (56, 63, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,717 - DEBUG --- Vertex at direction: 63
2016-08-07 20:38:28,717 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,717 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'red'), (59, 63, 'red'), (63, 71, 'green')]
2016-08-07 20:38:28,718 - DEBUG --- vertex: 63, edges_to_check: [(59, 63, 'red'), (63, 71, 'green')]
2016-08-07 20:38:28,718 - DEBUG --- degree: 3
2016-08-07 20:38:28,718 - DEBUG --- Loop: current_edge: (59, 63, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,718 - DEBUG --- Vertex at direction: 59
2016-08-07 20:38:28,718 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,719 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'blue'), (59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,719 - DEBUG --- vertex: 59, edges_to_check: [(59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,719 - DEBUG --- degree: 3
2016-08-07 20:38:28,719 - DEBUG --- Loop: current_edge: (59, 70, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,720 - DEBUG --- Vertex at direction: 70
2016-08-07 20:38:28,720 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,720 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'red'), (64, 70, 'green'), (70, 119, 'red')]
2016-08-07 20:38:28,720 - DEBUG --- vertex: 70, edges_to_check: [(64, 70, 'green'), (70, 119, 'red')]
2016-08-07 20:38:28,720 - DEBUG --- degree: 3
2016-08-07 20:38:28,721 - DEBUG --- Loop: current_edge: (70, 119, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,721 - DEBUG --- Vertex at direction: 119
2016-08-07 20:38:28,721 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,721 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'blue'), (119, 123, 'green'), (119, 150, 'blue')]
2016-08-07 20:38:28,722 - DEBUG --- vertex: 119, edges_to_check: [(119, 123, 'green'), (119, 150, 'blue')]
2016-08-07 20:38:28,722 - DEBUG --- degree: 3
2016-08-07 20:38:28,722 - DEBUG --- Loop: current_edge: (119, 150, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,722 - DEBUG --- Vertex at direction: 150
2016-08-07 20:38:28,722 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,723 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'red'), (119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,723 - DEBUG --- vertex: 150, edges_to_check: [(92, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,723 - DEBUG --- degree: 3
2016-08-07 20:38:28,723 - DEBUG --- Loop: current_edge: (92, 150, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,723 - DEBUG --- Vertex at direction: 92
2016-08-07 20:38:28,724 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,724 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,724 - DEBUG --- vertex: 92, edges_to_check: [(59, 92, 'green'), (92, 97, 'red')]
2016-08-07 20:38:28,724 - DEBUG --- END: kempe_chain_color_swap
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
2016-08-07 20:38:28,725 - INFO --- ------------------
2016-08-07 20:38:28,725 - INFO --- BEGIN: Print stats
2016-08-07 20:38:28,725 - INFO --- ------------------
2016-08-07 20:38:28,725 - INFO --- Stat: CASE-F2-01 = 0 times
2016-08-07 20:38:28,725 - INFO --- Stat: CASE-F3-01 = 2 times
2016-08-07 20:38:28,725 - INFO --- Stat: CASE-F4-01 = 6 times
2016-08-07 20:38:28,726 - INFO --- Stat: CASE-F4-02 = 2 times
2016-08-07 20:38:28,726 - INFO --- Stat: CASE-F4-03 = 1 times
2016-08-07 20:38:28,726 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:28,726 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-Swap-C1-C2-At-v2 = 0 times
2016-08-07 20:38:28,726 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:28,726 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-Swap-C2-C1-At-v2 = 1 times
2016-08-07 20:38:28,727 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4==C1-Shortest-KempeLoop = 0 times
2016-08-07 20:38:28,727 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C3 = 1 times
2016-08-07 20:38:28,727 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C4 = 0 times
2016-08-07 20:38:28,727 - INFO --- Stat: CASE-F5-C1==C2-Swap-C3-C4-OnTop = 4 times
2016-08-07 20:38:28,727 - INFO --- ----------------
2016-08-07 20:38:28,728 - INFO --- END: Print stats
2016-08-07 20:38:28,728 - INFO --- ----------------
2016-08-07 20:38:28,728 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (59, 92), (56, 50), green, red
2016-08-07 20:38:28,728 - DEBUG --- out_of_scope_color: blue
2016-08-07 20:38:28,728 - DEBUG --- current_color: green
2016-08-07 20:38:28,729 - DEBUG --- Loop: current_edge: (59, 92), current_color: green, next_color: red
2016-08-07 20:38:28,729 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,730 - DEBUG --- vertex: 92, edges_to_check: [(92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,730 - DEBUG --- current_color: red, next_color: green, current_edge: (92, 97, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,730 - DEBUG --- Loop: current_edge: (92, 97, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,730 - DEBUG --- tmp_next_edges_to_check: [(50, 97, 'blue'), (92, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:28,731 - DEBUG --- vertex: 97, edges_to_check: [(50, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,731 - DEBUG --- current_color: green, next_color: red, current_edge: (97, 163, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,731 - DEBUG --- Loop: current_edge: (97, 163, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,731 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'red'), (163, 165, 'blue')]
2016-08-07 20:38:28,731 - DEBUG --- vertex: 163, edges_to_check: [(156, 163, 'red'), (163, 165, 'blue')]
2016-08-07 20:38:28,731 - DEBUG --- current_color: red, next_color: green, current_edge: (156, 163, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,732 - DEBUG --- Loop: current_edge: (156, 163, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,732 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'blue'), (156, 163, 'red')]
2016-08-07 20:38:28,732 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 159, 'blue')]
2016-08-07 20:38:28,732 - DEBUG --- current_color: green, next_color: red, current_edge: (150, 156, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,732 - DEBUG --- Loop: current_edge: (150, 156, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,733 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'blue'), (119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,733 - DEBUG --- vertex: 150, edges_to_check: [(92, 150, 'blue'), (119, 150, 'red')]
2016-08-07 20:38:28,733 - DEBUG --- current_color: red, next_color: green, current_edge: (119, 150, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,733 - DEBUG --- Loop: current_edge: (119, 150, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,733 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'blue'), (119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:28,734 - DEBUG --- vertex: 119, edges_to_check: [(70, 119, 'blue'), (119, 123, 'green')]
2016-08-07 20:38:28,734 - DEBUG --- current_color: green, next_color: red, current_edge: (119, 123, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,734 - DEBUG --- Loop: current_edge: (119, 123, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,734 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'blue'), (123, 159, 'red')]
2016-08-07 20:38:28,734 - DEBUG --- vertex: 123, edges_to_check: [(123, 126, 'blue'), (123, 159, 'red')]
2016-08-07 20:38:28,735 - DEBUG --- current_color: red, next_color: green, current_edge: (123, 159, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,735 - DEBUG --- Loop: current_edge: (123, 159, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,735 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'red'), (156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,735 - DEBUG --- vertex: 159, edges_to_check: [(156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,735 - DEBUG --- current_color: green, next_color: red, current_edge: (159, 161, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,736 - DEBUG --- Loop: current_edge: (159, 161, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,736 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'red'), (159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:28,736 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'red'), (161, 162, 'blue')]
2016-08-07 20:38:28,736 - DEBUG --- current_color: red, next_color: green, current_edge: (137, 161, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,736 - DEBUG --- Loop: current_edge: (137, 161, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,737 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'red'), (137, 213, 'blue')]
2016-08-07 20:38:28,737 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 213, 'blue')]
2016-08-07 20:38:28,737 - DEBUG --- current_color: green, next_color: red, current_edge: (126, 137, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,737 - DEBUG --- Loop: current_edge: (126, 137, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,737 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'red'), (123, 126, 'blue'), (126, 137, 'green')]
2016-08-07 20:38:28,738 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'red'), (123, 126, 'blue')]
2016-08-07 20:38:28,738 - DEBUG --- current_color: red, next_color: green, current_edge: (64, 126, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,738 - DEBUG --- Loop: current_edge: (64, 126, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,738 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'blue'), (64, 126, 'red')]
2016-08-07 20:38:28,738 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'green'), (64, 71, 'blue')]
2016-08-07 20:38:28,739 - DEBUG --- current_color: green, next_color: red, current_edge: (64, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,739 - DEBUG --- Loop: current_edge: (64, 70, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,739 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'red'), (64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:28,739 - DEBUG --- vertex: 70, edges_to_check: [(59, 70, 'red'), (70, 119, 'blue')]
2016-08-07 20:38:28,739 - DEBUG --- current_color: red, next_color: green, current_edge: (59, 70, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,740 - DEBUG --- Loop: current_edge: (59, 70, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,740 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'blue'), (59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,740 - DEBUG --- vertex: 59, edges_to_check: [(59, 63, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,740 - DEBUG --- current_color: green, next_color: red, current_edge: (59, 92, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:28,740 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:28,741 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (59, 92), (56, 50), green, blue
2016-08-07 20:38:28,741 - DEBUG --- out_of_scope_color: red
2016-08-07 20:38:28,741 - DEBUG --- current_color: green
2016-08-07 20:38:28,741 - DEBUG --- Loop: current_edge: (59, 92), current_color: green, next_color: blue
2016-08-07 20:38:28,741 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,742 - DEBUG --- vertex: 92, edges_to_check: [(92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,742 - DEBUG --- current_color: blue, next_color: green, current_edge: (92, 150, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,742 - DEBUG --- Loop: current_edge: (92, 150, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,742 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'blue'), (119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,742 - DEBUG --- vertex: 150, edges_to_check: [(119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,743 - DEBUG --- current_color: green, next_color: blue, current_edge: (150, 156, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,743 - DEBUG --- Loop: current_edge: (150, 156, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,743 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'blue'), (156, 163, 'red')]
2016-08-07 20:38:28,743 - DEBUG --- vertex: 156, edges_to_check: [(156, 159, 'blue'), (156, 163, 'red')]
2016-08-07 20:38:28,744 - DEBUG --- current_color: blue, next_color: green, current_edge: (156, 159, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,744 - DEBUG --- Loop: current_edge: (156, 159, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,744 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'red'), (156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,744 - DEBUG --- vertex: 159, edges_to_check: [(123, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,744 - DEBUG --- current_color: green, next_color: blue, current_edge: (159, 161, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,745 - DEBUG --- Loop: current_edge: (159, 161, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,745 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'red'), (159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:28,745 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'red'), (161, 162, 'blue')]
2016-08-07 20:38:28,745 - DEBUG --- current_color: blue, next_color: green, current_edge: (161, 162, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,745 - DEBUG --- Loop: current_edge: (161, 162, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,746 - DEBUG --- tmp_next_edges_to_check: [(161, 162, 'blue'), (162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:28,746 - DEBUG --- vertex: 162, edges_to_check: [(162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:28,746 - DEBUG --- current_color: green, next_color: blue, current_edge: (162, 242, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,746 - DEBUG --- Loop: current_edge: (162, 242, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,746 - DEBUG --- tmp_next_edges_to_check: [(162, 242, 'green'), (213, 242, 'red'), (228, 242, 'blue')]
2016-08-07 20:38:28,747 - DEBUG --- vertex: 242, edges_to_check: [(213, 242, 'red'), (228, 242, 'blue')]
2016-08-07 20:38:28,747 - DEBUG --- current_color: blue, next_color: green, current_edge: (228, 242, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,747 - DEBUG --- Loop: current_edge: (228, 242, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,747 - DEBUG --- tmp_next_edges_to_check: [(225, 228, 'red'), (228, 231, 'green'), (228, 242, 'blue')]
2016-08-07 20:38:28,747 - DEBUG --- vertex: 228, edges_to_check: [(225, 228, 'red'), (228, 231, 'green')]
2016-08-07 20:38:28,748 - DEBUG --- current_color: green, next_color: blue, current_edge: (228, 231, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,748 - DEBUG --- Loop: current_edge: (228, 231, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,748 - DEBUG --- tmp_next_edges_to_check: [(52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,748 - DEBUG --- vertex: 231, edges_to_check: [(52, 231, 'red'), (231, 259, 'blue')]
2016-08-07 20:38:28,748 - DEBUG --- current_color: blue, next_color: green, current_edge: (231, 259, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,748 - DEBUG --- Loop: current_edge: (231, 259, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,749 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'red'), (213, 259, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,749 - DEBUG --- vertex: 259, edges_to_check: [(71, 259, 'red'), (213, 259, 'green')]
2016-08-07 20:38:28,749 - DEBUG --- current_color: green, next_color: blue, current_edge: (213, 259, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,749 - DEBUG --- Loop: current_edge: (213, 259, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,749 - DEBUG --- tmp_next_edges_to_check: [(137, 213, 'blue'), (213, 242, 'red'), (213, 259, 'green')]
2016-08-07 20:38:28,750 - DEBUG --- vertex: 213, edges_to_check: [(137, 213, 'blue'), (213, 242, 'red')]
2016-08-07 20:38:28,750 - DEBUG --- current_color: blue, next_color: green, current_edge: (137, 213, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,750 - DEBUG --- Loop: current_edge: (137, 213, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,750 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'red'), (137, 213, 'blue')]
2016-08-07 20:38:28,750 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 161, 'red')]
2016-08-07 20:38:28,751 - DEBUG --- current_color: green, next_color: blue, current_edge: (126, 137, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,751 - DEBUG --- Loop: current_edge: (126, 137, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,751 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'red'), (123, 126, 'blue'), (126, 137, 'green')]
2016-08-07 20:38:28,751 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'red'), (123, 126, 'blue')]
2016-08-07 20:38:28,751 - DEBUG --- current_color: blue, next_color: green, current_edge: (123, 126, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,752 - DEBUG --- Loop: current_edge: (123, 126, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,752 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'blue'), (123, 159, 'red')]
2016-08-07 20:38:28,752 - DEBUG --- vertex: 123, edges_to_check: [(119, 123, 'green'), (123, 159, 'red')]
2016-08-07 20:38:28,752 - DEBUG --- current_color: green, next_color: blue, current_edge: (119, 123, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,752 - DEBUG --- Loop: current_edge: (119, 123, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,752 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'blue'), (119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:28,753 - DEBUG --- vertex: 119, edges_to_check: [(70, 119, 'blue'), (119, 150, 'red')]
2016-08-07 20:38:28,753 - DEBUG --- current_color: blue, next_color: green, current_edge: (70, 119, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,753 - DEBUG --- Loop: current_edge: (70, 119, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,753 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'red'), (64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:28,753 - DEBUG --- vertex: 70, edges_to_check: [(59, 70, 'red'), (64, 70, 'green')]
2016-08-07 20:38:28,754 - DEBUG --- current_color: green, next_color: blue, current_edge: (64, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,754 - DEBUG --- Loop: current_edge: (64, 70, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,754 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'blue'), (64, 126, 'red')]
2016-08-07 20:38:28,754 - DEBUG --- vertex: 64, edges_to_check: [(64, 71, 'blue'), (64, 126, 'red')]
2016-08-07 20:38:28,754 - DEBUG --- current_color: blue, next_color: green, current_edge: (64, 71, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,755 - DEBUG --- Loop: current_edge: (64, 71, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,755 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'green'), (64, 71, 'blue'), (71, 259, 'red')]
2016-08-07 20:38:28,755 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'green'), (71, 259, 'red')]
2016-08-07 20:38:28,755 - DEBUG --- current_color: green, next_color: blue, current_edge: (63, 71, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,755 - DEBUG --- Loop: current_edge: (63, 71, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,756 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'red'), (59, 63, 'blue'), (63, 71, 'green')]
2016-08-07 20:38:28,756 - DEBUG --- vertex: 63, edges_to_check: [(56, 63, 'red'), (59, 63, 'blue')]
2016-08-07 20:38:28,756 - DEBUG --- current_color: blue, next_color: green, current_edge: (59, 63, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,756 - DEBUG --- Loop: current_edge: (59, 63, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,756 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'blue'), (59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,757 - DEBUG --- vertex: 59, edges_to_check: [(59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,757 - DEBUG --- current_color: green, next_color: blue, current_edge: (59, 92, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:28,757 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:28,757 - DEBUG --- CASE-F5-C1==C2-Swap-C3-C4-OnTop. vertex_to_join_near_v1_on_the_face: 92, vertex_in_the_top_middle: 97, c3: red, c4: blue
2016-08-07 20:38:28,757 - DEBUG --- BEGIN: kempe_chain_color_swap: (92, 97), red, blue
2016-08-07 20:38:28,757 - DEBUG --- degree: 3
2016-08-07 20:38:28,758 - DEBUG --- Loop: current_edge: (92, 97), current_color: red, next_color: blue
2016-08-07 20:38:28,758 - DEBUG --- Vertex at direction: 97
2016-08-07 20:38:28,758 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,758 - DEBUG --- tmp_next_edges_to_check: [(50, 97, 'blue'), (92, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:28,758 - DEBUG --- vertex: 97, edges_to_check: [(50, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,759 - DEBUG --- degree: 3
2016-08-07 20:38:28,759 - DEBUG --- Loop: current_edge: (50, 97, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,759 - DEBUG --- Vertex at direction: 50
2016-08-07 20:38:28,759 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,760 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'red'), (50, 56, 'green'), (50, 97, 'red')]
2016-08-07 20:38:28,760 - DEBUG --- vertex: 50, edges_to_check: [(29, 50, 'red'), (50, 56, 'green')]
2016-08-07 20:38:28,760 - DEBUG --- degree: 3
2016-08-07 20:38:28,760 - DEBUG --- Loop: current_edge: (29, 50, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,760 - DEBUG --- Vertex at direction: 29
2016-08-07 20:38:28,761 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,761 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'blue'), (29, 52, 'green'), (29, 225, 'blue')]
2016-08-07 20:38:28,761 - DEBUG --- vertex: 29, edges_to_check: [(29, 52, 'green'), (29, 225, 'blue')]
2016-08-07 20:38:28,761 - DEBUG --- degree: 3
2016-08-07 20:38:28,762 - DEBUG --- Loop: current_edge: (29, 225, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,762 - DEBUG --- Vertex at direction: 225
2016-08-07 20:38:28,762 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,762 - DEBUG --- tmp_next_edges_to_check: [(29, 225, 'red'), (165, 225, 'green'), (225, 228, 'red')]
2016-08-07 20:38:28,763 - DEBUG --- vertex: 225, edges_to_check: [(165, 225, 'green'), (225, 228, 'red')]
2016-08-07 20:38:28,763 - DEBUG --- degree: 3
2016-08-07 20:38:28,763 - DEBUG --- Loop: current_edge: (225, 228, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,763 - DEBUG --- Vertex at direction: 228
2016-08-07 20:38:28,763 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,764 - DEBUG --- tmp_next_edges_to_check: [(225, 228, 'blue'), (228, 231, 'green'), (228, 242, 'blue')]
2016-08-07 20:38:28,764 - DEBUG --- vertex: 228, edges_to_check: [(228, 231, 'green'), (228, 242, 'blue')]
2016-08-07 20:38:28,764 - DEBUG --- degree: 3
2016-08-07 20:38:28,765 - DEBUG --- Loop: current_edge: (228, 242, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,765 - DEBUG --- Vertex at direction: 242
2016-08-07 20:38:28,766 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,766 - DEBUG --- tmp_next_edges_to_check: [(162, 242, 'green'), (213, 242, 'red'), (228, 242, 'red')]
2016-08-07 20:38:28,766 - DEBUG --- vertex: 242, edges_to_check: [(162, 242, 'green'), (213, 242, 'red')]
2016-08-07 20:38:28,767 - DEBUG --- degree: 3
2016-08-07 20:38:28,767 - DEBUG --- Loop: current_edge: (213, 242, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,767 - DEBUG --- Vertex at direction: 213
2016-08-07 20:38:28,767 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,767 - DEBUG --- tmp_next_edges_to_check: [(137, 213, 'blue'), (213, 242, 'blue'), (213, 259, 'green')]
2016-08-07 20:38:28,768 - DEBUG --- vertex: 213, edges_to_check: [(137, 213, 'blue'), (213, 259, 'green')]
2016-08-07 20:38:28,768 - DEBUG --- degree: 3
2016-08-07 20:38:28,768 - DEBUG --- Loop: current_edge: (137, 213, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,768 - DEBUG --- Vertex at direction: 137
2016-08-07 20:38:28,769 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,769 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'red'), (137, 213, 'red')]
2016-08-07 20:38:28,769 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 161, 'red')]
2016-08-07 20:38:28,769 - DEBUG --- degree: 3
2016-08-07 20:38:28,769 - DEBUG --- Loop: current_edge: (137, 161, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,770 - DEBUG --- Vertex at direction: 161
2016-08-07 20:38:28,770 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,770 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'blue'), (159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:28,770 - DEBUG --- vertex: 161, edges_to_check: [(159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:28,771 - DEBUG --- degree: 3
2016-08-07 20:38:28,771 - DEBUG --- Loop: current_edge: (161, 162, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,771 - DEBUG --- Vertex at direction: 162
2016-08-07 20:38:28,771 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,771 - DEBUG --- tmp_next_edges_to_check: [(161, 162, 'red'), (162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:28,772 - DEBUG --- vertex: 162, edges_to_check: [(162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:28,772 - DEBUG --- degree: 3
2016-08-07 20:38:28,772 - DEBUG --- Loop: current_edge: (162, 165, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,772 - DEBUG --- Vertex at direction: 165
2016-08-07 20:38:28,773 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,773 - DEBUG --- tmp_next_edges_to_check: [(162, 165, 'blue'), (163, 165, 'blue'), (165, 225, 'green')]
2016-08-07 20:38:28,773 - DEBUG --- vertex: 165, edges_to_check: [(163, 165, 'blue'), (165, 225, 'green')]
2016-08-07 20:38:28,773 - DEBUG --- degree: 3
2016-08-07 20:38:28,773 - DEBUG --- Loop: current_edge: (163, 165, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,774 - DEBUG --- Vertex at direction: 163
2016-08-07 20:38:28,774 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'red'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,774 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'red'), (163, 165, 'red')]
2016-08-07 20:38:28,774 - DEBUG --- vertex: 163, edges_to_check: [(97, 163, 'green'), (156, 163, 'red')]
2016-08-07 20:38:28,774 - DEBUG --- degree: 3
2016-08-07 20:38:28,775 - DEBUG --- Loop: current_edge: (156, 163, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,775 - DEBUG --- Vertex at direction: 156
2016-08-07 20:38:28,775 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,775 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'blue'), (156, 163, 'blue')]
2016-08-07 20:38:28,776 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 159, 'blue')]
2016-08-07 20:38:28,776 - DEBUG --- degree: 3
2016-08-07 20:38:28,776 - DEBUG --- Loop: current_edge: (156, 159, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,776 - DEBUG --- Vertex at direction: 159
2016-08-07 20:38:28,776 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,777 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'red'), (156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,777 - DEBUG --- vertex: 159, edges_to_check: [(123, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,777 - DEBUG --- degree: 3
2016-08-07 20:38:28,777 - DEBUG --- Loop: current_edge: (123, 159, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,778 - DEBUG --- Vertex at direction: 123
2016-08-07 20:38:28,778 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,778 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'blue'), (123, 159, 'blue')]
2016-08-07 20:38:28,778 - DEBUG --- vertex: 123, edges_to_check: [(119, 123, 'green'), (123, 126, 'blue')]
2016-08-07 20:38:28,778 - DEBUG --- degree: 3
2016-08-07 20:38:28,779 - DEBUG --- Loop: current_edge: (123, 126, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,779 - DEBUG --- Vertex at direction: 126
2016-08-07 20:38:28,779 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,779 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'red'), (123, 126, 'red'), (126, 137, 'green')]
2016-08-07 20:38:28,779 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'red'), (126, 137, 'green')]
2016-08-07 20:38:28,780 - DEBUG --- degree: 3
2016-08-07 20:38:28,780 - DEBUG --- Loop: current_edge: (64, 126, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,780 - DEBUG --- Vertex at direction: 64
2016-08-07 20:38:28,780 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,781 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'blue'), (64, 126, 'blue')]
2016-08-07 20:38:28,781 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'green'), (64, 71, 'blue')]
2016-08-07 20:38:28,781 - DEBUG --- degree: 3
2016-08-07 20:38:28,781 - DEBUG --- Loop: current_edge: (64, 71, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,781 - DEBUG --- Vertex at direction: 71
2016-08-07 20:38:28,782 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,782 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'green'), (64, 71, 'red'), (71, 259, 'red')]
2016-08-07 20:38:28,782 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'green'), (71, 259, 'red')]
2016-08-07 20:38:28,782 - DEBUG --- degree: 3
2016-08-07 20:38:28,783 - DEBUG --- Loop: current_edge: (71, 259, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,783 - DEBUG --- Vertex at direction: 259
2016-08-07 20:38:28,783 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,783 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'blue'), (213, 259, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,784 - DEBUG --- vertex: 259, edges_to_check: [(213, 259, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,784 - DEBUG --- degree: 3
2016-08-07 20:38:28,784 - DEBUG --- Loop: current_edge: (231, 259, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,784 - DEBUG --- Vertex at direction: 231
2016-08-07 20:38:28,784 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,785 - DEBUG --- tmp_next_edges_to_check: [(52, 231, 'red'), (228, 231, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,785 - DEBUG --- vertex: 231, edges_to_check: [(52, 231, 'red'), (228, 231, 'green')]
2016-08-07 20:38:28,785 - DEBUG --- degree: 3
2016-08-07 20:38:28,785 - DEBUG --- Loop: current_edge: (52, 231, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,786 - DEBUG --- Vertex at direction: 52
2016-08-07 20:38:28,786 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,786 - DEBUG --- tmp_next_edges_to_check: [(29, 52, 'green'), (52, 56, 'blue'), (52, 231, 'blue')]
2016-08-07 20:38:28,786 - DEBUG --- vertex: 52, edges_to_check: [(29, 52, 'green'), (52, 56, 'blue')]
2016-08-07 20:38:28,787 - DEBUG --- degree: 3
2016-08-07 20:38:28,787 - DEBUG --- Loop: current_edge: (52, 56, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,787 - DEBUG --- Vertex at direction: 56
2016-08-07 20:38:28,787 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,787 - DEBUG --- tmp_next_edges_to_check: [(50, 56, 'green'), (52, 56, 'red'), (56, 63, 'red')]
2016-08-07 20:38:28,788 - DEBUG --- vertex: 56, edges_to_check: [(50, 56, 'green'), (56, 63, 'red')]
2016-08-07 20:38:28,789 - DEBUG --- degree: 3
2016-08-07 20:38:28,789 - DEBUG --- Loop: current_edge: (56, 63, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,789 - DEBUG --- Vertex at direction: 63
2016-08-07 20:38:28,789 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,790 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'blue'), (59, 63, 'blue'), (63, 71, 'green')]
2016-08-07 20:38:28,790 - DEBUG --- vertex: 63, edges_to_check: [(59, 63, 'blue'), (63, 71, 'green')]
2016-08-07 20:38:28,790 - DEBUG --- degree: 3
2016-08-07 20:38:28,790 - DEBUG --- Loop: current_edge: (59, 63, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,790 - DEBUG --- Vertex at direction: 59
2016-08-07 20:38:28,791 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,791 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'red'), (59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,791 - DEBUG --- vertex: 59, edges_to_check: [(59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,791 - DEBUG --- degree: 3
2016-08-07 20:38:28,792 - DEBUG --- Loop: current_edge: (59, 70, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,792 - DEBUG --- Vertex at direction: 70
2016-08-07 20:38:28,792 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,792 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'blue'), (64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:28,793 - DEBUG --- vertex: 70, edges_to_check: [(64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:28,793 - DEBUG --- degree: 3
2016-08-07 20:38:28,793 - DEBUG --- Loop: current_edge: (70, 119, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,793 - DEBUG --- Vertex at direction: 119
2016-08-07 20:38:28,793 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,794 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'red'), (119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:28,794 - DEBUG --- vertex: 119, edges_to_check: [(119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:28,794 - DEBUG --- degree: 3
2016-08-07 20:38:28,794 - DEBUG --- Loop: current_edge: (119, 150, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,795 - DEBUG --- Vertex at direction: 150
2016-08-07 20:38:28,795 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,795 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'blue'), (119, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,795 - DEBUG --- vertex: 150, edges_to_check: [(92, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,795 - DEBUG --- degree: 3
2016-08-07 20:38:28,796 - DEBUG --- Loop: current_edge: (92, 150, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,796 - DEBUG --- Vertex at direction: 92
2016-08-07 20:38:28,796 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,796 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,796 - DEBUG --- vertex: 92, edges_to_check: [(59, 92, 'green'), (92, 97, 'blue')]
2016-08-07 20:38:28,797 - DEBUG --- END: kempe_chain_color_swap
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
2016-08-07 20:38:28,797 - INFO --- ------------------
2016-08-07 20:38:28,797 - INFO --- BEGIN: Print stats
2016-08-07 20:38:28,797 - INFO --- ------------------
2016-08-07 20:38:28,798 - INFO --- Stat: CASE-F2-01 = 0 times
2016-08-07 20:38:28,798 - INFO --- Stat: CASE-F3-01 = 2 times
2016-08-07 20:38:28,798 - INFO --- Stat: CASE-F4-01 = 6 times
2016-08-07 20:38:28,798 - INFO --- Stat: CASE-F4-02 = 2 times
2016-08-07 20:38:28,798 - INFO --- Stat: CASE-F4-03 = 1 times
2016-08-07 20:38:28,798 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:28,799 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-Swap-C1-C2-At-v2 = 0 times
2016-08-07 20:38:28,799 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:28,799 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-Swap-C2-C1-At-v2 = 1 times
2016-08-07 20:38:28,799 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4==C1-Shortest-KempeLoop = 0 times
2016-08-07 20:38:28,799 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C3 = 1 times
2016-08-07 20:38:28,799 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C4 = 0 times
2016-08-07 20:38:28,799 - INFO --- Stat: CASE-F5-C1==C2-Swap-C3-C4-OnTop = 5 times
2016-08-07 20:38:28,800 - INFO --- ----------------
2016-08-07 20:38:28,800 - INFO --- END: Print stats
2016-08-07 20:38:28,800 - INFO --- ----------------
2016-08-07 20:38:28,800 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (59, 92), (56, 50), green, blue
2016-08-07 20:38:28,800 - DEBUG --- out_of_scope_color: red
2016-08-07 20:38:28,801 - DEBUG --- current_color: green
2016-08-07 20:38:28,801 - DEBUG --- Loop: current_edge: (59, 92), current_color: green, next_color: blue
2016-08-07 20:38:28,801 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,801 - DEBUG --- vertex: 92, edges_to_check: [(92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,801 - DEBUG --- current_color: blue, next_color: green, current_edge: (92, 97, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,801 - DEBUG --- Loop: current_edge: (92, 97, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,802 - DEBUG --- tmp_next_edges_to_check: [(50, 97, 'red'), (92, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,802 - DEBUG --- vertex: 97, edges_to_check: [(50, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:28,802 - DEBUG --- current_color: green, next_color: blue, current_edge: (97, 163, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,802 - DEBUG --- Loop: current_edge: (97, 163, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,803 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'blue'), (163, 165, 'red')]
2016-08-07 20:38:28,803 - DEBUG --- vertex: 163, edges_to_check: [(156, 163, 'blue'), (163, 165, 'red')]
2016-08-07 20:38:28,803 - DEBUG --- current_color: blue, next_color: green, current_edge: (156, 163, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,803 - DEBUG --- Loop: current_edge: (156, 163, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,803 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'red'), (156, 163, 'blue')]
2016-08-07 20:38:28,804 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 159, 'red')]
2016-08-07 20:38:28,804 - DEBUG --- current_color: green, next_color: blue, current_edge: (150, 156, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,804 - DEBUG --- Loop: current_edge: (150, 156, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,804 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'red'), (119, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,804 - DEBUG --- vertex: 150, edges_to_check: [(92, 150, 'red'), (119, 150, 'blue')]
2016-08-07 20:38:28,805 - DEBUG --- current_color: blue, next_color: green, current_edge: (119, 150, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,805 - DEBUG --- Loop: current_edge: (119, 150, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,805 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'red'), (119, 123, 'green'), (119, 150, 'blue')]
2016-08-07 20:38:28,805 - DEBUG --- vertex: 119, edges_to_check: [(70, 119, 'red'), (119, 123, 'green')]
2016-08-07 20:38:28,805 - DEBUG --- current_color: green, next_color: blue, current_edge: (119, 123, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,806 - DEBUG --- Loop: current_edge: (119, 123, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,806 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'red'), (123, 159, 'blue')]
2016-08-07 20:38:28,806 - DEBUG --- vertex: 123, edges_to_check: [(123, 126, 'red'), (123, 159, 'blue')]
2016-08-07 20:38:28,806 - DEBUG --- current_color: blue, next_color: green, current_edge: (123, 159, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,806 - DEBUG --- Loop: current_edge: (123, 159, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,807 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'blue'), (156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,807 - DEBUG --- vertex: 159, edges_to_check: [(156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,807 - DEBUG --- current_color: green, next_color: blue, current_edge: (159, 161, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,807 - DEBUG --- Loop: current_edge: (159, 161, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,807 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'blue'), (159, 161, 'green'), (161, 162, 'red')]
2016-08-07 20:38:28,808 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'blue'), (161, 162, 'red')]
2016-08-07 20:38:28,808 - DEBUG --- current_color: blue, next_color: green, current_edge: (137, 161, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,808 - DEBUG --- Loop: current_edge: (137, 161, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,808 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'blue'), (137, 213, 'red')]
2016-08-07 20:38:28,809 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 213, 'red')]
2016-08-07 20:38:28,809 - DEBUG --- current_color: green, next_color: blue, current_edge: (126, 137, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,809 - DEBUG --- Loop: current_edge: (126, 137, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,809 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'blue'), (123, 126, 'red'), (126, 137, 'green')]
2016-08-07 20:38:28,809 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'blue'), (123, 126, 'red')]
2016-08-07 20:38:28,810 - DEBUG --- current_color: blue, next_color: green, current_edge: (64, 126, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,810 - DEBUG --- Loop: current_edge: (64, 126, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,810 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'red'), (64, 126, 'blue')]
2016-08-07 20:38:28,810 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'green'), (64, 71, 'red')]
2016-08-07 20:38:28,810 - DEBUG --- current_color: green, next_color: blue, current_edge: (64, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,811 - DEBUG --- Loop: current_edge: (64, 70, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,811 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'blue'), (64, 70, 'green'), (70, 119, 'red')]
2016-08-07 20:38:28,811 - DEBUG --- vertex: 70, edges_to_check: [(59, 70, 'blue'), (70, 119, 'red')]
2016-08-07 20:38:28,811 - DEBUG --- current_color: blue, next_color: green, current_edge: (59, 70, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,811 - DEBUG --- Loop: current_edge: (59, 70, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,812 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'red'), (59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,812 - DEBUG --- vertex: 59, edges_to_check: [(59, 63, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,812 - DEBUG --- current_color: green, next_color: blue, current_edge: (59, 92, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:28,812 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:28,812 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (59, 92), (56, 50), green, red
2016-08-07 20:38:28,813 - DEBUG --- out_of_scope_color: blue
2016-08-07 20:38:28,813 - DEBUG --- current_color: green
2016-08-07 20:38:28,813 - DEBUG --- Loop: current_edge: (59, 92), current_color: green, next_color: red
2016-08-07 20:38:28,813 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,813 - DEBUG --- vertex: 92, edges_to_check: [(92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,814 - DEBUG --- current_color: red, next_color: green, current_edge: (92, 150, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,814 - DEBUG --- Loop: current_edge: (92, 150, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,814 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'red'), (119, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,814 - DEBUG --- vertex: 150, edges_to_check: [(119, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,814 - DEBUG --- current_color: green, next_color: red, current_edge: (150, 156, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,815 - DEBUG --- Loop: current_edge: (150, 156, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,815 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'red'), (156, 163, 'blue')]
2016-08-07 20:38:28,815 - DEBUG --- vertex: 156, edges_to_check: [(156, 159, 'red'), (156, 163, 'blue')]
2016-08-07 20:38:28,815 - DEBUG --- current_color: red, next_color: green, current_edge: (156, 159, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,815 - DEBUG --- Loop: current_edge: (156, 159, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,816 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'blue'), (156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,816 - DEBUG --- vertex: 159, edges_to_check: [(123, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,816 - DEBUG --- current_color: green, next_color: red, current_edge: (159, 161, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,816 - DEBUG --- Loop: current_edge: (159, 161, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,816 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'blue'), (159, 161, 'green'), (161, 162, 'red')]
2016-08-07 20:38:28,817 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'blue'), (161, 162, 'red')]
2016-08-07 20:38:28,817 - DEBUG --- current_color: red, next_color: green, current_edge: (161, 162, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,817 - DEBUG --- Loop: current_edge: (161, 162, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,817 - DEBUG --- tmp_next_edges_to_check: [(161, 162, 'red'), (162, 165, 'blue'), (162, 242, 'green')]
2016-08-07 20:38:28,817 - DEBUG --- vertex: 162, edges_to_check: [(162, 165, 'blue'), (162, 242, 'green')]
2016-08-07 20:38:28,817 - DEBUG --- current_color: green, next_color: red, current_edge: (162, 242, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,818 - DEBUG --- Loop: current_edge: (162, 242, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,818 - DEBUG --- tmp_next_edges_to_check: [(162, 242, 'green'), (213, 242, 'blue'), (228, 242, 'red')]
2016-08-07 20:38:28,818 - DEBUG --- vertex: 242, edges_to_check: [(213, 242, 'blue'), (228, 242, 'red')]
2016-08-07 20:38:28,818 - DEBUG --- current_color: red, next_color: green, current_edge: (228, 242, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,819 - DEBUG --- Loop: current_edge: (228, 242, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,819 - DEBUG --- tmp_next_edges_to_check: [(225, 228, 'blue'), (228, 231, 'green'), (228, 242, 'red')]
2016-08-07 20:38:28,819 - DEBUG --- vertex: 228, edges_to_check: [(225, 228, 'blue'), (228, 231, 'green')]
2016-08-07 20:38:28,819 - DEBUG --- current_color: green, next_color: red, current_edge: (228, 231, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,819 - DEBUG --- Loop: current_edge: (228, 231, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,820 - DEBUG --- tmp_next_edges_to_check: [(52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,820 - DEBUG --- vertex: 231, edges_to_check: [(52, 231, 'blue'), (231, 259, 'red')]
2016-08-07 20:38:28,820 - DEBUG --- current_color: red, next_color: green, current_edge: (231, 259, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,820 - DEBUG --- Loop: current_edge: (231, 259, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,820 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'blue'), (213, 259, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,821 - DEBUG --- vertex: 259, edges_to_check: [(71, 259, 'blue'), (213, 259, 'green')]
2016-08-07 20:38:28,821 - DEBUG --- current_color: green, next_color: red, current_edge: (213, 259, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,821 - DEBUG --- Loop: current_edge: (213, 259, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,822 - DEBUG --- tmp_next_edges_to_check: [(137, 213, 'red'), (213, 242, 'blue'), (213, 259, 'green')]
2016-08-07 20:38:28,822 - DEBUG --- vertex: 213, edges_to_check: [(137, 213, 'red'), (213, 242, 'blue')]
2016-08-07 20:38:28,822 - DEBUG --- current_color: red, next_color: green, current_edge: (137, 213, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,822 - DEBUG --- Loop: current_edge: (137, 213, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,823 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'blue'), (137, 213, 'red')]
2016-08-07 20:38:28,823 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 161, 'blue')]
2016-08-07 20:38:28,823 - DEBUG --- current_color: green, next_color: red, current_edge: (126, 137, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,823 - DEBUG --- Loop: current_edge: (126, 137, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,823 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'blue'), (123, 126, 'red'), (126, 137, 'green')]
2016-08-07 20:38:28,824 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'blue'), (123, 126, 'red')]
2016-08-07 20:38:28,824 - DEBUG --- current_color: red, next_color: green, current_edge: (123, 126, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,824 - DEBUG --- Loop: current_edge: (123, 126, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,824 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'red'), (123, 159, 'blue')]
2016-08-07 20:38:28,824 - DEBUG --- vertex: 123, edges_to_check: [(119, 123, 'green'), (123, 159, 'blue')]
2016-08-07 20:38:28,825 - DEBUG --- current_color: green, next_color: red, current_edge: (119, 123, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,825 - DEBUG --- Loop: current_edge: (119, 123, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,825 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'red'), (119, 123, 'green'), (119, 150, 'blue')]
2016-08-07 20:38:28,825 - DEBUG --- vertex: 119, edges_to_check: [(70, 119, 'red'), (119, 150, 'blue')]
2016-08-07 20:38:28,825 - DEBUG --- current_color: red, next_color: green, current_edge: (70, 119, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,826 - DEBUG --- Loop: current_edge: (70, 119, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,826 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'blue'), (64, 70, 'green'), (70, 119, 'red')]
2016-08-07 20:38:28,826 - DEBUG --- vertex: 70, edges_to_check: [(59, 70, 'blue'), (64, 70, 'green')]
2016-08-07 20:38:28,826 - DEBUG --- current_color: green, next_color: red, current_edge: (64, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,826 - DEBUG --- Loop: current_edge: (64, 70, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,827 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'red'), (64, 126, 'blue')]
2016-08-07 20:38:28,827 - DEBUG --- vertex: 64, edges_to_check: [(64, 71, 'red'), (64, 126, 'blue')]
2016-08-07 20:38:28,827 - DEBUG --- current_color: red, next_color: green, current_edge: (64, 71, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,827 - DEBUG --- Loop: current_edge: (64, 71, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,827 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'green'), (64, 71, 'red'), (71, 259, 'blue')]
2016-08-07 20:38:28,828 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'green'), (71, 259, 'blue')]
2016-08-07 20:38:28,828 - DEBUG --- current_color: green, next_color: red, current_edge: (63, 71, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,828 - DEBUG --- Loop: current_edge: (63, 71, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,828 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'blue'), (59, 63, 'red'), (63, 71, 'green')]
2016-08-07 20:38:28,828 - DEBUG --- vertex: 63, edges_to_check: [(56, 63, 'blue'), (59, 63, 'red')]
2016-08-07 20:38:28,829 - DEBUG --- current_color: red, next_color: green, current_edge: (59, 63, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,829 - DEBUG --- Loop: current_edge: (59, 63, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,829 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'red'), (59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,829 - DEBUG --- vertex: 59, edges_to_check: [(59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,830 - DEBUG --- current_color: green, next_color: red, current_edge: (59, 92, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:28,830 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:28,830 - DEBUG --- CASE-F5-C1==C2-Swap-C3-C4-OnTop. vertex_to_join_near_v1_on_the_face: 92, vertex_in_the_top_middle: 97, c3: blue, c4: red
2016-08-07 20:38:28,830 - DEBUG --- BEGIN: kempe_chain_color_swap: (92, 97), blue, red
2016-08-07 20:38:28,830 - DEBUG --- degree: 3
2016-08-07 20:38:28,830 - DEBUG --- Loop: current_edge: (92, 97), current_color: blue, next_color: red
2016-08-07 20:38:28,831 - DEBUG --- Vertex at direction: 97
2016-08-07 20:38:28,831 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,831 - DEBUG --- tmp_next_edges_to_check: [(50, 97, 'red'), (92, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,831 - DEBUG --- vertex: 97, edges_to_check: [(50, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:28,832 - DEBUG --- degree: 3
2016-08-07 20:38:28,832 - DEBUG --- Loop: current_edge: (50, 97, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,832 - DEBUG --- Vertex at direction: 50
2016-08-07 20:38:28,832 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,832 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'blue'), (50, 56, 'green'), (50, 97, 'blue')]
2016-08-07 20:38:28,833 - DEBUG --- vertex: 50, edges_to_check: [(29, 50, 'blue'), (50, 56, 'green')]
2016-08-07 20:38:28,833 - DEBUG --- degree: 3
2016-08-07 20:38:28,833 - DEBUG --- Loop: current_edge: (29, 50, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,833 - DEBUG --- Vertex at direction: 29
2016-08-07 20:38:28,833 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,834 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'red'), (29, 52, 'green'), (29, 225, 'red')]
2016-08-07 20:38:28,834 - DEBUG --- vertex: 29, edges_to_check: [(29, 52, 'green'), (29, 225, 'red')]
2016-08-07 20:38:28,834 - DEBUG --- degree: 3
2016-08-07 20:38:28,834 - DEBUG --- Loop: current_edge: (29, 225, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,835 - DEBUG --- Vertex at direction: 225
2016-08-07 20:38:28,835 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,835 - DEBUG --- tmp_next_edges_to_check: [(29, 225, 'blue'), (165, 225, 'green'), (225, 228, 'blue')]
2016-08-07 20:38:28,835 - DEBUG --- vertex: 225, edges_to_check: [(165, 225, 'green'), (225, 228, 'blue')]
2016-08-07 20:38:28,835 - DEBUG --- degree: 3
2016-08-07 20:38:28,836 - DEBUG --- Loop: current_edge: (225, 228, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,836 - DEBUG --- Vertex at direction: 228
2016-08-07 20:38:28,836 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'red'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,836 - DEBUG --- tmp_next_edges_to_check: [(225, 228, 'red'), (228, 231, 'green'), (228, 242, 'red')]
2016-08-07 20:38:28,837 - DEBUG --- vertex: 228, edges_to_check: [(228, 231, 'green'), (228, 242, 'red')]
2016-08-07 20:38:28,837 - DEBUG --- degree: 3
2016-08-07 20:38:28,837 - DEBUG --- Loop: current_edge: (228, 242, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,837 - DEBUG --- Vertex at direction: 242
2016-08-07 20:38:28,837 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,838 - DEBUG --- tmp_next_edges_to_check: [(162, 242, 'green'), (213, 242, 'blue'), (228, 242, 'blue')]
2016-08-07 20:38:28,838 - DEBUG --- vertex: 242, edges_to_check: [(162, 242, 'green'), (213, 242, 'blue')]
2016-08-07 20:38:28,838 - DEBUG --- degree: 3
2016-08-07 20:38:28,838 - DEBUG --- Loop: current_edge: (213, 242, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,838 - DEBUG --- Vertex at direction: 213
2016-08-07 20:38:28,839 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,839 - DEBUG --- tmp_next_edges_to_check: [(137, 213, 'red'), (213, 242, 'red'), (213, 259, 'green')]
2016-08-07 20:38:28,839 - DEBUG --- vertex: 213, edges_to_check: [(137, 213, 'red'), (213, 259, 'green')]
2016-08-07 20:38:28,839 - DEBUG --- degree: 3
2016-08-07 20:38:28,840 - DEBUG --- Loop: current_edge: (137, 213, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,840 - DEBUG --- Vertex at direction: 137
2016-08-07 20:38:28,840 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,840 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'blue'), (137, 213, 'blue')]
2016-08-07 20:38:28,841 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 161, 'blue')]
2016-08-07 20:38:28,841 - DEBUG --- degree: 3
2016-08-07 20:38:28,841 - DEBUG --- Loop: current_edge: (137, 161, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,841 - DEBUG --- Vertex at direction: 161
2016-08-07 20:38:28,842 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,842 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'red'), (159, 161, 'green'), (161, 162, 'red')]
2016-08-07 20:38:28,842 - DEBUG --- vertex: 161, edges_to_check: [(159, 161, 'green'), (161, 162, 'red')]
2016-08-07 20:38:28,842 - DEBUG --- degree: 3
2016-08-07 20:38:28,842 - DEBUG --- Loop: current_edge: (161, 162, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,843 - DEBUG --- Vertex at direction: 162
2016-08-07 20:38:28,843 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,843 - DEBUG --- tmp_next_edges_to_check: [(161, 162, 'blue'), (162, 165, 'blue'), (162, 242, 'green')]
2016-08-07 20:38:28,843 - DEBUG --- vertex: 162, edges_to_check: [(162, 165, 'blue'), (162, 242, 'green')]
2016-08-07 20:38:28,843 - DEBUG --- degree: 3
2016-08-07 20:38:28,844 - DEBUG --- Loop: current_edge: (162, 165, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,844 - DEBUG --- Vertex at direction: 165
2016-08-07 20:38:28,844 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,844 - DEBUG --- tmp_next_edges_to_check: [(162, 165, 'red'), (163, 165, 'red'), (165, 225, 'green')]
2016-08-07 20:38:28,844 - DEBUG --- vertex: 165, edges_to_check: [(163, 165, 'red'), (165, 225, 'green')]
2016-08-07 20:38:28,845 - DEBUG --- degree: 3
2016-08-07 20:38:28,845 - DEBUG --- Loop: current_edge: (163, 165, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,845 - DEBUG --- Vertex at direction: 163
2016-08-07 20:38:28,845 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'blue'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,846 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'blue'), (163, 165, 'blue')]
2016-08-07 20:38:28,846 - DEBUG --- vertex: 163, edges_to_check: [(97, 163, 'green'), (156, 163, 'blue')]
2016-08-07 20:38:28,846 - DEBUG --- degree: 3
2016-08-07 20:38:28,846 - DEBUG --- Loop: current_edge: (156, 163, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,846 - DEBUG --- Vertex at direction: 156
2016-08-07 20:38:28,847 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,847 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'red'), (156, 163, 'red')]
2016-08-07 20:38:28,847 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 159, 'red')]
2016-08-07 20:38:28,847 - DEBUG --- degree: 3
2016-08-07 20:38:28,848 - DEBUG --- Loop: current_edge: (156, 159, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,848 - DEBUG --- Vertex at direction: 159
2016-08-07 20:38:28,848 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,848 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'blue'), (156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,849 - DEBUG --- vertex: 159, edges_to_check: [(123, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,849 - DEBUG --- degree: 3
2016-08-07 20:38:28,849 - DEBUG --- Loop: current_edge: (123, 159, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,849 - DEBUG --- Vertex at direction: 123
2016-08-07 20:38:28,849 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,850 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'red'), (123, 159, 'red')]
2016-08-07 20:38:28,851 - DEBUG --- vertex: 123, edges_to_check: [(119, 123, 'green'), (123, 126, 'red')]
2016-08-07 20:38:28,851 - DEBUG --- degree: 3
2016-08-07 20:38:28,851 - DEBUG --- Loop: current_edge: (123, 126, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,851 - DEBUG --- Vertex at direction: 126
2016-08-07 20:38:28,852 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,852 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'blue'), (123, 126, 'blue'), (126, 137, 'green')]
2016-08-07 20:38:28,852 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'blue'), (126, 137, 'green')]
2016-08-07 20:38:28,852 - DEBUG --- degree: 3
2016-08-07 20:38:28,853 - DEBUG --- Loop: current_edge: (64, 126, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,853 - DEBUG --- Vertex at direction: 64
2016-08-07 20:38:28,853 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,853 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'red'), (64, 126, 'red')]
2016-08-07 20:38:28,853 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'green'), (64, 71, 'red')]
2016-08-07 20:38:28,854 - DEBUG --- degree: 3
2016-08-07 20:38:28,854 - DEBUG --- Loop: current_edge: (64, 71, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,854 - DEBUG --- Vertex at direction: 71
2016-08-07 20:38:28,854 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,855 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'green'), (64, 71, 'blue'), (71, 259, 'blue')]
2016-08-07 20:38:28,855 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'green'), (71, 259, 'blue')]
2016-08-07 20:38:28,855 - DEBUG --- degree: 3
2016-08-07 20:38:28,855 - DEBUG --- Loop: current_edge: (71, 259, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,855 - DEBUG --- Vertex at direction: 259
2016-08-07 20:38:28,856 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,856 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'red'), (213, 259, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,856 - DEBUG --- vertex: 259, edges_to_check: [(213, 259, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,856 - DEBUG --- degree: 3
2016-08-07 20:38:28,857 - DEBUG --- Loop: current_edge: (231, 259, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,857 - DEBUG --- Vertex at direction: 231
2016-08-07 20:38:28,857 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,857 - DEBUG --- tmp_next_edges_to_check: [(52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,858 - DEBUG --- vertex: 231, edges_to_check: [(52, 231, 'blue'), (228, 231, 'green')]
2016-08-07 20:38:28,858 - DEBUG --- degree: 3
2016-08-07 20:38:28,858 - DEBUG --- Loop: current_edge: (52, 231, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,858 - DEBUG --- Vertex at direction: 52
2016-08-07 20:38:28,858 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,859 - DEBUG --- tmp_next_edges_to_check: [(29, 52, 'green'), (52, 56, 'red'), (52, 231, 'red')]
2016-08-07 20:38:28,859 - DEBUG --- vertex: 52, edges_to_check: [(29, 52, 'green'), (52, 56, 'red')]
2016-08-07 20:38:28,859 - DEBUG --- degree: 3
2016-08-07 20:38:28,859 - DEBUG --- Loop: current_edge: (52, 56, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,860 - DEBUG --- Vertex at direction: 56
2016-08-07 20:38:28,860 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,860 - DEBUG --- tmp_next_edges_to_check: [(50, 56, 'green'), (52, 56, 'blue'), (56, 63, 'blue')]
2016-08-07 20:38:28,860 - DEBUG --- vertex: 56, edges_to_check: [(50, 56, 'green'), (56, 63, 'blue')]
2016-08-07 20:38:28,860 - DEBUG --- degree: 3
2016-08-07 20:38:28,861 - DEBUG --- Loop: current_edge: (56, 63, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,861 - DEBUG --- Vertex at direction: 63
2016-08-07 20:38:28,861 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,862 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'red'), (59, 63, 'red'), (63, 71, 'green')]
2016-08-07 20:38:28,862 - DEBUG --- vertex: 63, edges_to_check: [(59, 63, 'red'), (63, 71, 'green')]
2016-08-07 20:38:28,862 - DEBUG --- degree: 3
2016-08-07 20:38:28,862 - DEBUG --- Loop: current_edge: (59, 63, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,862 - DEBUG --- Vertex at direction: 59
2016-08-07 20:38:28,863 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,863 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'blue'), (59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,863 - DEBUG --- vertex: 59, edges_to_check: [(59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,863 - DEBUG --- degree: 3
2016-08-07 20:38:28,864 - DEBUG --- Loop: current_edge: (59, 70, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,864 - DEBUG --- Vertex at direction: 70
2016-08-07 20:38:28,864 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,864 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'red'), (64, 70, 'green'), (70, 119, 'red')]
2016-08-07 20:38:28,865 - DEBUG --- vertex: 70, edges_to_check: [(64, 70, 'green'), (70, 119, 'red')]
2016-08-07 20:38:28,865 - DEBUG --- degree: 3
2016-08-07 20:38:28,865 - DEBUG --- Loop: current_edge: (70, 119, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,865 - DEBUG --- Vertex at direction: 119
2016-08-07 20:38:28,866 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,866 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'blue'), (119, 123, 'green'), (119, 150, 'blue')]
2016-08-07 20:38:28,866 - DEBUG --- vertex: 119, edges_to_check: [(119, 123, 'green'), (119, 150, 'blue')]
2016-08-07 20:38:28,866 - DEBUG --- degree: 3
2016-08-07 20:38:28,866 - DEBUG --- Loop: current_edge: (119, 150, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,867 - DEBUG --- Vertex at direction: 150
2016-08-07 20:38:28,867 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,867 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'red'), (119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,867 - DEBUG --- vertex: 150, edges_to_check: [(92, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,867 - DEBUG --- degree: 3
2016-08-07 20:38:28,868 - DEBUG --- Loop: current_edge: (92, 150, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,868 - DEBUG --- Vertex at direction: 92
2016-08-07 20:38:28,868 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,868 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,868 - DEBUG --- vertex: 92, edges_to_check: [(59, 92, 'green'), (92, 97, 'red')]
2016-08-07 20:38:28,869 - DEBUG --- END: kempe_chain_color_swap
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
2016-08-07 20:38:28,869 - INFO --- ------------------
2016-08-07 20:38:28,869 - INFO --- BEGIN: Print stats
2016-08-07 20:38:28,869 - INFO --- ------------------
2016-08-07 20:38:28,869 - INFO --- Stat: CASE-F2-01 = 0 times
2016-08-07 20:38:28,870 - INFO --- Stat: CASE-F3-01 = 2 times
2016-08-07 20:38:28,870 - INFO --- Stat: CASE-F4-01 = 6 times
2016-08-07 20:38:28,870 - INFO --- Stat: CASE-F4-02 = 2 times
2016-08-07 20:38:28,870 - INFO --- Stat: CASE-F4-03 = 1 times
2016-08-07 20:38:28,870 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:28,870 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-Swap-C1-C2-At-v2 = 0 times
2016-08-07 20:38:28,871 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:28,871 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-Swap-C2-C1-At-v2 = 1 times
2016-08-07 20:38:28,872 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4==C1-Shortest-KempeLoop = 0 times
2016-08-07 20:38:28,872 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C3 = 1 times
2016-08-07 20:38:28,872 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C4 = 0 times
2016-08-07 20:38:28,872 - INFO --- Stat: CASE-F5-C1==C2-Swap-C3-C4-OnTop = 6 times
2016-08-07 20:38:28,873 - INFO --- ----------------
2016-08-07 20:38:28,873 - INFO --- END: Print stats
2016-08-07 20:38:28,873 - INFO --- ----------------
2016-08-07 20:38:28,873 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (59, 92), (56, 50), green, red
2016-08-07 20:38:28,873 - DEBUG --- out_of_scope_color: blue
2016-08-07 20:38:28,874 - DEBUG --- current_color: green
2016-08-07 20:38:28,874 - DEBUG --- Loop: current_edge: (59, 92), current_color: green, next_color: red
2016-08-07 20:38:28,874 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,874 - DEBUG --- vertex: 92, edges_to_check: [(92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,874 - DEBUG --- current_color: red, next_color: green, current_edge: (92, 97, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,875 - DEBUG --- Loop: current_edge: (92, 97, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,875 - DEBUG --- tmp_next_edges_to_check: [(50, 97, 'blue'), (92, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:28,875 - DEBUG --- vertex: 97, edges_to_check: [(50, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,875 - DEBUG --- current_color: green, next_color: red, current_edge: (97, 163, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,875 - DEBUG --- Loop: current_edge: (97, 163, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,876 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'red'), (163, 165, 'blue')]
2016-08-07 20:38:28,876 - DEBUG --- vertex: 163, edges_to_check: [(156, 163, 'red'), (163, 165, 'blue')]
2016-08-07 20:38:28,876 - DEBUG --- current_color: red, next_color: green, current_edge: (156, 163, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,876 - DEBUG --- Loop: current_edge: (156, 163, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,876 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'blue'), (156, 163, 'red')]
2016-08-07 20:38:28,877 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 159, 'blue')]
2016-08-07 20:38:28,877 - DEBUG --- current_color: green, next_color: red, current_edge: (150, 156, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,877 - DEBUG --- Loop: current_edge: (150, 156, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,877 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'blue'), (119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,877 - DEBUG --- vertex: 150, edges_to_check: [(92, 150, 'blue'), (119, 150, 'red')]
2016-08-07 20:38:28,878 - DEBUG --- current_color: red, next_color: green, current_edge: (119, 150, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,878 - DEBUG --- Loop: current_edge: (119, 150, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,878 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'blue'), (119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:28,878 - DEBUG --- vertex: 119, edges_to_check: [(70, 119, 'blue'), (119, 123, 'green')]
2016-08-07 20:38:28,878 - DEBUG --- current_color: green, next_color: red, current_edge: (119, 123, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,879 - DEBUG --- Loop: current_edge: (119, 123, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,879 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'blue'), (123, 159, 'red')]
2016-08-07 20:38:28,879 - DEBUG --- vertex: 123, edges_to_check: [(123, 126, 'blue'), (123, 159, 'red')]
2016-08-07 20:38:28,879 - DEBUG --- current_color: red, next_color: green, current_edge: (123, 159, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,879 - DEBUG --- Loop: current_edge: (123, 159, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,880 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'red'), (156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,880 - DEBUG --- vertex: 159, edges_to_check: [(156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,880 - DEBUG --- current_color: green, next_color: red, current_edge: (159, 161, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,880 - DEBUG --- Loop: current_edge: (159, 161, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,880 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'red'), (159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:28,881 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'red'), (161, 162, 'blue')]
2016-08-07 20:38:28,881 - DEBUG --- current_color: red, next_color: green, current_edge: (137, 161, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,881 - DEBUG --- Loop: current_edge: (137, 161, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,881 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'red'), (137, 213, 'blue')]
2016-08-07 20:38:28,881 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 213, 'blue')]
2016-08-07 20:38:28,882 - DEBUG --- current_color: green, next_color: red, current_edge: (126, 137, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,882 - DEBUG --- Loop: current_edge: (126, 137, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,882 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'red'), (123, 126, 'blue'), (126, 137, 'green')]
2016-08-07 20:38:28,882 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'red'), (123, 126, 'blue')]
2016-08-07 20:38:28,882 - DEBUG --- current_color: red, next_color: green, current_edge: (64, 126, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,883 - DEBUG --- Loop: current_edge: (64, 126, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,883 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'blue'), (64, 126, 'red')]
2016-08-07 20:38:28,883 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'green'), (64, 71, 'blue')]
2016-08-07 20:38:28,883 - DEBUG --- current_color: green, next_color: red, current_edge: (64, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,883 - DEBUG --- Loop: current_edge: (64, 70, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,884 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'red'), (64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:28,884 - DEBUG --- vertex: 70, edges_to_check: [(59, 70, 'red'), (70, 119, 'blue')]
2016-08-07 20:38:28,884 - DEBUG --- current_color: red, next_color: green, current_edge: (59, 70, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,884 - DEBUG --- Loop: current_edge: (59, 70, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,885 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'blue'), (59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,885 - DEBUG --- vertex: 59, edges_to_check: [(59, 63, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,885 - DEBUG --- current_color: green, next_color: red, current_edge: (59, 92, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:28,885 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:28,886 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (59, 92), (56, 50), green, blue
2016-08-07 20:38:28,886 - DEBUG --- out_of_scope_color: red
2016-08-07 20:38:28,886 - DEBUG --- current_color: green
2016-08-07 20:38:28,886 - DEBUG --- Loop: current_edge: (59, 92), current_color: green, next_color: blue
2016-08-07 20:38:28,886 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,886 - DEBUG --- vertex: 92, edges_to_check: [(92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:28,887 - DEBUG --- current_color: blue, next_color: green, current_edge: (92, 150, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,887 - DEBUG --- Loop: current_edge: (92, 150, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,887 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'blue'), (119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,887 - DEBUG --- vertex: 150, edges_to_check: [(119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:28,887 - DEBUG --- current_color: green, next_color: blue, current_edge: (150, 156, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,887 - DEBUG --- Loop: current_edge: (150, 156, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,888 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'blue'), (156, 163, 'red')]
2016-08-07 20:38:28,888 - DEBUG --- vertex: 156, edges_to_check: [(156, 159, 'blue'), (156, 163, 'red')]
2016-08-07 20:38:28,888 - DEBUG --- current_color: blue, next_color: green, current_edge: (156, 159, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,888 - DEBUG --- Loop: current_edge: (156, 159, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,888 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'red'), (156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,889 - DEBUG --- vertex: 159, edges_to_check: [(123, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,889 - DEBUG --- current_color: green, next_color: blue, current_edge: (159, 161, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,889 - DEBUG --- Loop: current_edge: (159, 161, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,889 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'red'), (159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:28,889 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'red'), (161, 162, 'blue')]
2016-08-07 20:38:28,890 - DEBUG --- current_color: blue, next_color: green, current_edge: (161, 162, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,890 - DEBUG --- Loop: current_edge: (161, 162, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,890 - DEBUG --- tmp_next_edges_to_check: [(161, 162, 'blue'), (162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:28,890 - DEBUG --- vertex: 162, edges_to_check: [(162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:28,890 - DEBUG --- current_color: green, next_color: blue, current_edge: (162, 242, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,891 - DEBUG --- Loop: current_edge: (162, 242, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,891 - DEBUG --- tmp_next_edges_to_check: [(162, 242, 'green'), (213, 242, 'red'), (228, 242, 'blue')]
2016-08-07 20:38:28,891 - DEBUG --- vertex: 242, edges_to_check: [(213, 242, 'red'), (228, 242, 'blue')]
2016-08-07 20:38:28,891 - DEBUG --- current_color: blue, next_color: green, current_edge: (228, 242, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,891 - DEBUG --- Loop: current_edge: (228, 242, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,891 - DEBUG --- tmp_next_edges_to_check: [(225, 228, 'red'), (228, 231, 'green'), (228, 242, 'blue')]
2016-08-07 20:38:28,892 - DEBUG --- vertex: 228, edges_to_check: [(225, 228, 'red'), (228, 231, 'green')]
2016-08-07 20:38:28,892 - DEBUG --- current_color: green, next_color: blue, current_edge: (228, 231, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,892 - DEBUG --- Loop: current_edge: (228, 231, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,892 - DEBUG --- tmp_next_edges_to_check: [(52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,893 - DEBUG --- vertex: 231, edges_to_check: [(52, 231, 'red'), (231, 259, 'blue')]
2016-08-07 20:38:28,893 - DEBUG --- current_color: blue, next_color: green, current_edge: (231, 259, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,893 - DEBUG --- Loop: current_edge: (231, 259, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,893 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'red'), (213, 259, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,893 - DEBUG --- vertex: 259, edges_to_check: [(71, 259, 'red'), (213, 259, 'green')]
2016-08-07 20:38:28,894 - DEBUG --- current_color: green, next_color: blue, current_edge: (213, 259, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,894 - DEBUG --- Loop: current_edge: (213, 259, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,894 - DEBUG --- tmp_next_edges_to_check: [(137, 213, 'blue'), (213, 242, 'red'), (213, 259, 'green')]
2016-08-07 20:38:28,894 - DEBUG --- vertex: 213, edges_to_check: [(137, 213, 'blue'), (213, 242, 'red')]
2016-08-07 20:38:28,894 - DEBUG --- current_color: blue, next_color: green, current_edge: (137, 213, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,895 - DEBUG --- Loop: current_edge: (137, 213, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,895 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'red'), (137, 213, 'blue')]
2016-08-07 20:38:28,895 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 161, 'red')]
2016-08-07 20:38:28,895 - DEBUG --- current_color: green, next_color: blue, current_edge: (126, 137, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,895 - DEBUG --- Loop: current_edge: (126, 137, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,896 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'red'), (123, 126, 'blue'), (126, 137, 'green')]
2016-08-07 20:38:28,896 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'red'), (123, 126, 'blue')]
2016-08-07 20:38:28,896 - DEBUG --- current_color: blue, next_color: green, current_edge: (123, 126, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,896 - DEBUG --- Loop: current_edge: (123, 126, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,897 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'blue'), (123, 159, 'red')]
2016-08-07 20:38:28,897 - DEBUG --- vertex: 123, edges_to_check: [(119, 123, 'green'), (123, 159, 'red')]
2016-08-07 20:38:28,897 - DEBUG --- current_color: green, next_color: blue, current_edge: (119, 123, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,897 - DEBUG --- Loop: current_edge: (119, 123, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,897 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'blue'), (119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:28,898 - DEBUG --- vertex: 119, edges_to_check: [(70, 119, 'blue'), (119, 150, 'red')]
2016-08-07 20:38:28,898 - DEBUG --- current_color: blue, next_color: green, current_edge: (70, 119, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,898 - DEBUG --- Loop: current_edge: (70, 119, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,898 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'red'), (64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:28,898 - DEBUG --- vertex: 70, edges_to_check: [(59, 70, 'red'), (64, 70, 'green')]
2016-08-07 20:38:28,899 - DEBUG --- current_color: green, next_color: blue, current_edge: (64, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,899 - DEBUG --- Loop: current_edge: (64, 70, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,899 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'blue'), (64, 126, 'red')]
2016-08-07 20:38:28,899 - DEBUG --- vertex: 64, edges_to_check: [(64, 71, 'blue'), (64, 126, 'red')]
2016-08-07 20:38:28,899 - DEBUG --- current_color: blue, next_color: green, current_edge: (64, 71, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,900 - DEBUG --- Loop: current_edge: (64, 71, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,900 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'green'), (64, 71, 'blue'), (71, 259, 'red')]
2016-08-07 20:38:28,900 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'green'), (71, 259, 'red')]
2016-08-07 20:38:28,900 - DEBUG --- current_color: green, next_color: blue, current_edge: (63, 71, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,900 - DEBUG --- Loop: current_edge: (63, 71, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,901 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'red'), (59, 63, 'blue'), (63, 71, 'green')]
2016-08-07 20:38:28,901 - DEBUG --- vertex: 63, edges_to_check: [(56, 63, 'red'), (59, 63, 'blue')]
2016-08-07 20:38:28,901 - DEBUG --- current_color: blue, next_color: green, current_edge: (59, 63, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,901 - DEBUG --- Loop: current_edge: (59, 63, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,901 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'blue'), (59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,902 - DEBUG --- vertex: 59, edges_to_check: [(59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,902 - DEBUG --- current_color: green, next_color: blue, current_edge: (59, 92, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:28,903 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:28,903 - DEBUG --- CASE-F5-C1==C2-Swap-C3-C4-OnTop. vertex_to_join_near_v1_on_the_face: 92, vertex_in_the_top_middle: 97, c3: red, c4: blue
2016-08-07 20:38:28,903 - DEBUG --- BEGIN: kempe_chain_color_swap: (92, 97), red, blue
2016-08-07 20:38:28,903 - DEBUG --- degree: 3
2016-08-07 20:38:28,904 - DEBUG --- Loop: current_edge: (92, 97), current_color: red, next_color: blue
2016-08-07 20:38:28,904 - DEBUG --- Vertex at direction: 97
2016-08-07 20:38:28,904 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,905 - DEBUG --- tmp_next_edges_to_check: [(50, 97, 'blue'), (92, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:28,905 - DEBUG --- vertex: 97, edges_to_check: [(50, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,905 - DEBUG --- degree: 3
2016-08-07 20:38:28,906 - DEBUG --- Loop: current_edge: (50, 97, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,906 - DEBUG --- Vertex at direction: 50
2016-08-07 20:38:28,906 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,906 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'red'), (50, 56, 'green'), (50, 97, 'red')]
2016-08-07 20:38:28,907 - DEBUG --- vertex: 50, edges_to_check: [(29, 50, 'red'), (50, 56, 'green')]
2016-08-07 20:38:28,907 - DEBUG --- degree: 3
2016-08-07 20:38:28,907 - DEBUG --- Loop: current_edge: (29, 50, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,907 - DEBUG --- Vertex at direction: 29
2016-08-07 20:38:28,908 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,908 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'blue'), (29, 52, 'green'), (29, 225, 'blue')]
2016-08-07 20:38:28,908 - DEBUG --- vertex: 29, edges_to_check: [(29, 52, 'green'), (29, 225, 'blue')]
2016-08-07 20:38:28,909 - DEBUG --- degree: 3
2016-08-07 20:38:28,909 - DEBUG --- Loop: current_edge: (29, 225, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,909 - DEBUG --- Vertex at direction: 225
2016-08-07 20:38:28,909 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,910 - DEBUG --- tmp_next_edges_to_check: [(29, 225, 'red'), (165, 225, 'green'), (225, 228, 'red')]
2016-08-07 20:38:28,910 - DEBUG --- vertex: 225, edges_to_check: [(165, 225, 'green'), (225, 228, 'red')]
2016-08-07 20:38:28,910 - DEBUG --- degree: 3
2016-08-07 20:38:28,910 - DEBUG --- Loop: current_edge: (225, 228, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,911 - DEBUG --- Vertex at direction: 228
2016-08-07 20:38:28,911 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,911 - DEBUG --- tmp_next_edges_to_check: [(225, 228, 'blue'), (228, 231, 'green'), (228, 242, 'blue')]
2016-08-07 20:38:28,911 - DEBUG --- vertex: 228, edges_to_check: [(228, 231, 'green'), (228, 242, 'blue')]
2016-08-07 20:38:28,912 - DEBUG --- degree: 3
2016-08-07 20:38:28,912 - DEBUG --- Loop: current_edge: (228, 242, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,912 - DEBUG --- Vertex at direction: 242
2016-08-07 20:38:28,913 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,913 - DEBUG --- tmp_next_edges_to_check: [(162, 242, 'green'), (213, 242, 'red'), (228, 242, 'red')]
2016-08-07 20:38:28,913 - DEBUG --- vertex: 242, edges_to_check: [(162, 242, 'green'), (213, 242, 'red')]
2016-08-07 20:38:28,914 - DEBUG --- degree: 3
2016-08-07 20:38:28,914 - DEBUG --- Loop: current_edge: (213, 242, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,914 - DEBUG --- Vertex at direction: 213
2016-08-07 20:38:28,914 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,915 - DEBUG --- tmp_next_edges_to_check: [(137, 213, 'blue'), (213, 242, 'blue'), (213, 259, 'green')]
2016-08-07 20:38:28,915 - DEBUG --- vertex: 213, edges_to_check: [(137, 213, 'blue'), (213, 259, 'green')]
2016-08-07 20:38:28,915 - DEBUG --- degree: 3
2016-08-07 20:38:28,915 - DEBUG --- Loop: current_edge: (137, 213, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,916 - DEBUG --- Vertex at direction: 137
2016-08-07 20:38:28,916 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,916 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'red'), (137, 213, 'red')]
2016-08-07 20:38:28,916 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 161, 'red')]
2016-08-07 20:38:28,917 - DEBUG --- degree: 3
2016-08-07 20:38:28,917 - DEBUG --- Loop: current_edge: (137, 161, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,917 - DEBUG --- Vertex at direction: 161
2016-08-07 20:38:28,917 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,918 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'blue'), (159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:28,918 - DEBUG --- vertex: 161, edges_to_check: [(159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:28,918 - DEBUG --- degree: 3
2016-08-07 20:38:28,918 - DEBUG --- Loop: current_edge: (161, 162, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,919 - DEBUG --- Vertex at direction: 162
2016-08-07 20:38:28,919 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,919 - DEBUG --- tmp_next_edges_to_check: [(161, 162, 'red'), (162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:28,919 - DEBUG --- vertex: 162, edges_to_check: [(162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:28,920 - DEBUG --- degree: 3
2016-08-07 20:38:28,920 - DEBUG --- Loop: current_edge: (162, 165, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,920 - DEBUG --- Vertex at direction: 165
2016-08-07 20:38:28,920 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,921 - DEBUG --- tmp_next_edges_to_check: [(162, 165, 'blue'), (163, 165, 'blue'), (165, 225, 'green')]
2016-08-07 20:38:28,921 - DEBUG --- vertex: 165, edges_to_check: [(163, 165, 'blue'), (165, 225, 'green')]
2016-08-07 20:38:28,921 - DEBUG --- degree: 3
2016-08-07 20:38:28,921 - DEBUG --- Loop: current_edge: (163, 165, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,922 - DEBUG --- Vertex at direction: 163
2016-08-07 20:38:28,922 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'red'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,922 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'red'), (163, 165, 'red')]
2016-08-07 20:38:28,922 - DEBUG --- vertex: 163, edges_to_check: [(97, 163, 'green'), (156, 163, 'red')]
2016-08-07 20:38:28,922 - DEBUG --- degree: 3
2016-08-07 20:38:28,923 - DEBUG --- Loop: current_edge: (156, 163, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,923 - DEBUG --- Vertex at direction: 156
2016-08-07 20:38:28,923 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,924 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'blue'), (156, 163, 'blue')]
2016-08-07 20:38:28,924 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 159, 'blue')]
2016-08-07 20:38:28,924 - DEBUG --- degree: 3
2016-08-07 20:38:28,924 - DEBUG --- Loop: current_edge: (156, 159, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,924 - DEBUG --- Vertex at direction: 159
2016-08-07 20:38:28,925 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,925 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'red'), (156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,925 - DEBUG --- vertex: 159, edges_to_check: [(123, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,925 - DEBUG --- degree: 3
2016-08-07 20:38:28,926 - DEBUG --- Loop: current_edge: (123, 159, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,927 - DEBUG --- Vertex at direction: 123
2016-08-07 20:38:28,927 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:28,927 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'blue'), (123, 159, 'blue')]
2016-08-07 20:38:28,928 - DEBUG --- vertex: 123, edges_to_check: [(119, 123, 'green'), (123, 126, 'blue')]
2016-08-07 20:38:28,928 - DEBUG --- degree: 3
2016-08-07 20:38:28,928 - DEBUG --- Loop: current_edge: (123, 126, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,928 - DEBUG --- Vertex at direction: 126
2016-08-07 20:38:28,929 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,929 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'red'), (123, 126, 'red'), (126, 137, 'green')]
2016-08-07 20:38:28,929 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'red'), (126, 137, 'green')]
2016-08-07 20:38:28,929 - DEBUG --- degree: 3
2016-08-07 20:38:28,930 - DEBUG --- Loop: current_edge: (64, 126, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,930 - DEBUG --- Vertex at direction: 64
2016-08-07 20:38:28,930 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,930 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'blue'), (64, 126, 'blue')]
2016-08-07 20:38:28,931 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'green'), (64, 71, 'blue')]
2016-08-07 20:38:28,931 - DEBUG --- degree: 3
2016-08-07 20:38:28,931 - DEBUG --- Loop: current_edge: (64, 71, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,931 - DEBUG --- Vertex at direction: 71
2016-08-07 20:38:28,932 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,932 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'green'), (64, 71, 'red'), (71, 259, 'red')]
2016-08-07 20:38:28,932 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'green'), (71, 259, 'red')]
2016-08-07 20:38:28,932 - DEBUG --- degree: 3
2016-08-07 20:38:28,932 - DEBUG --- Loop: current_edge: (71, 259, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,933 - DEBUG --- Vertex at direction: 259
2016-08-07 20:38:28,933 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,933 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'blue'), (213, 259, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,933 - DEBUG --- vertex: 259, edges_to_check: [(213, 259, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:28,933 - DEBUG --- degree: 3
2016-08-07 20:38:28,934 - DEBUG --- Loop: current_edge: (231, 259, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,934 - DEBUG --- Vertex at direction: 231
2016-08-07 20:38:28,934 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,934 - DEBUG --- tmp_next_edges_to_check: [(52, 231, 'red'), (228, 231, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,935 - DEBUG --- vertex: 231, edges_to_check: [(52, 231, 'red'), (228, 231, 'green')]
2016-08-07 20:38:28,935 - DEBUG --- degree: 3
2016-08-07 20:38:28,935 - DEBUG --- Loop: current_edge: (52, 231, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,935 - DEBUG --- Vertex at direction: 52
2016-08-07 20:38:28,936 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,936 - DEBUG --- tmp_next_edges_to_check: [(29, 52, 'green'), (52, 56, 'blue'), (52, 231, 'blue')]
2016-08-07 20:38:28,936 - DEBUG --- vertex: 52, edges_to_check: [(29, 52, 'green'), (52, 56, 'blue')]
2016-08-07 20:38:28,936 - DEBUG --- degree: 3
2016-08-07 20:38:28,937 - DEBUG --- Loop: current_edge: (52, 56, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,937 - DEBUG --- Vertex at direction: 56
2016-08-07 20:38:28,937 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,937 - DEBUG --- tmp_next_edges_to_check: [(50, 56, 'green'), (52, 56, 'red'), (56, 63, 'red')]
2016-08-07 20:38:28,938 - DEBUG --- vertex: 56, edges_to_check: [(50, 56, 'green'), (56, 63, 'red')]
2016-08-07 20:38:28,938 - DEBUG --- degree: 3
2016-08-07 20:38:28,938 - DEBUG --- Loop: current_edge: (56, 63, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,938 - DEBUG --- Vertex at direction: 63
2016-08-07 20:38:28,939 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,939 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'blue'), (59, 63, 'blue'), (63, 71, 'green')]
2016-08-07 20:38:28,939 - DEBUG --- vertex: 63, edges_to_check: [(59, 63, 'blue'), (63, 71, 'green')]
2016-08-07 20:38:28,939 - DEBUG --- degree: 3
2016-08-07 20:38:28,939 - DEBUG --- Loop: current_edge: (59, 63, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,940 - DEBUG --- Vertex at direction: 59
2016-08-07 20:38:28,940 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,940 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'red'), (59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,940 - DEBUG --- vertex: 59, edges_to_check: [(59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,941 - DEBUG --- degree: 3
2016-08-07 20:38:28,941 - DEBUG --- Loop: current_edge: (59, 70, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,941 - DEBUG --- Vertex at direction: 70
2016-08-07 20:38:28,941 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,942 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'blue'), (64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:28,942 - DEBUG --- vertex: 70, edges_to_check: [(64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:28,942 - DEBUG --- degree: 3
2016-08-07 20:38:28,942 - DEBUG --- Loop: current_edge: (70, 119, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,942 - DEBUG --- Vertex at direction: 119
2016-08-07 20:38:28,943 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,943 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'red'), (119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:28,943 - DEBUG --- vertex: 119, edges_to_check: [(119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:28,944 - DEBUG --- degree: 3
2016-08-07 20:38:28,944 - DEBUG --- Loop: current_edge: (119, 150, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,944 - DEBUG --- Vertex at direction: 150
2016-08-07 20:38:28,944 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,945 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'blue'), (119, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,945 - DEBUG --- vertex: 150, edges_to_check: [(92, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,945 - DEBUG --- degree: 3
2016-08-07 20:38:28,945 - DEBUG --- Loop: current_edge: (92, 150, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,945 - DEBUG --- Vertex at direction: 92
2016-08-07 20:38:28,946 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,946 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,946 - DEBUG --- vertex: 92, edges_to_check: [(59, 92, 'green'), (92, 97, 'blue')]
2016-08-07 20:38:28,946 - DEBUG --- END: kempe_chain_color_swap
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
2016-08-07 20:38:28,947 - INFO --- ------------------
2016-08-07 20:38:28,947 - INFO --- BEGIN: Print stats
2016-08-07 20:38:28,947 - INFO --- ------------------
2016-08-07 20:38:28,947 - INFO --- Stat: CASE-F2-01 = 0 times
2016-08-07 20:38:28,948 - INFO --- Stat: CASE-F3-01 = 2 times
2016-08-07 20:38:28,948 - INFO --- Stat: CASE-F4-01 = 6 times
2016-08-07 20:38:28,948 - INFO --- Stat: CASE-F4-02 = 2 times
2016-08-07 20:38:28,948 - INFO --- Stat: CASE-F4-03 = 1 times
2016-08-07 20:38:28,948 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:28,949 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-Swap-C1-C2-At-v2 = 0 times
2016-08-07 20:38:28,949 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:28,949 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-Swap-C2-C1-At-v2 = 1 times
2016-08-07 20:38:28,949 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4==C1-Shortest-KempeLoop = 0 times
2016-08-07 20:38:28,949 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C3 = 1 times
2016-08-07 20:38:28,949 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C4 = 0 times
2016-08-07 20:38:28,950 - INFO --- Stat: CASE-F5-C1==C2-Swap-C3-C4-OnTop = 7 times
2016-08-07 20:38:28,950 - INFO --- ----------------
2016-08-07 20:38:28,950 - INFO --- END: Print stats
2016-08-07 20:38:28,950 - INFO --- ----------------
2016-08-07 20:38:28,950 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (59, 92), (56, 50), green, blue
2016-08-07 20:38:28,951 - DEBUG --- out_of_scope_color: red
2016-08-07 20:38:28,951 - DEBUG --- current_color: green
2016-08-07 20:38:28,951 - DEBUG --- Loop: current_edge: (59, 92), current_color: green, next_color: blue
2016-08-07 20:38:28,951 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,951 - DEBUG --- vertex: 92, edges_to_check: [(92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,952 - DEBUG --- current_color: blue, next_color: green, current_edge: (92, 97, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,952 - DEBUG --- Loop: current_edge: (92, 97, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,952 - DEBUG --- tmp_next_edges_to_check: [(50, 97, 'red'), (92, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,952 - DEBUG --- vertex: 97, edges_to_check: [(50, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:28,953 - DEBUG --- current_color: green, next_color: blue, current_edge: (97, 163, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,953 - DEBUG --- Loop: current_edge: (97, 163, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,953 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'blue'), (163, 165, 'red')]
2016-08-07 20:38:28,953 - DEBUG --- vertex: 163, edges_to_check: [(156, 163, 'blue'), (163, 165, 'red')]
2016-08-07 20:38:28,953 - DEBUG --- current_color: blue, next_color: green, current_edge: (156, 163, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,954 - DEBUG --- Loop: current_edge: (156, 163, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,954 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'red'), (156, 163, 'blue')]
2016-08-07 20:38:28,955 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 159, 'red')]
2016-08-07 20:38:28,955 - DEBUG --- current_color: green, next_color: blue, current_edge: (150, 156, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,955 - DEBUG --- Loop: current_edge: (150, 156, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,955 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'red'), (119, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,956 - DEBUG --- vertex: 150, edges_to_check: [(92, 150, 'red'), (119, 150, 'blue')]
2016-08-07 20:38:28,956 - DEBUG --- current_color: blue, next_color: green, current_edge: (119, 150, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,956 - DEBUG --- Loop: current_edge: (119, 150, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,956 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'red'), (119, 123, 'green'), (119, 150, 'blue')]
2016-08-07 20:38:28,956 - DEBUG --- vertex: 119, edges_to_check: [(70, 119, 'red'), (119, 123, 'green')]
2016-08-07 20:38:28,957 - DEBUG --- current_color: green, next_color: blue, current_edge: (119, 123, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,957 - DEBUG --- Loop: current_edge: (119, 123, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,957 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'red'), (123, 159, 'blue')]
2016-08-07 20:38:28,957 - DEBUG --- vertex: 123, edges_to_check: [(123, 126, 'red'), (123, 159, 'blue')]
2016-08-07 20:38:28,957 - DEBUG --- current_color: blue, next_color: green, current_edge: (123, 159, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,958 - DEBUG --- Loop: current_edge: (123, 159, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,958 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'blue'), (156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,958 - DEBUG --- vertex: 159, edges_to_check: [(156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,958 - DEBUG --- current_color: green, next_color: blue, current_edge: (159, 161, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,959 - DEBUG --- Loop: current_edge: (159, 161, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,959 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'blue'), (159, 161, 'green'), (161, 162, 'red')]
2016-08-07 20:38:28,959 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'blue'), (161, 162, 'red')]
2016-08-07 20:38:28,959 - DEBUG --- current_color: blue, next_color: green, current_edge: (137, 161, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,959 - DEBUG --- Loop: current_edge: (137, 161, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,960 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'blue'), (137, 213, 'red')]
2016-08-07 20:38:28,960 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 213, 'red')]
2016-08-07 20:38:28,960 - DEBUG --- current_color: green, next_color: blue, current_edge: (126, 137, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,960 - DEBUG --- Loop: current_edge: (126, 137, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,960 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'blue'), (123, 126, 'red'), (126, 137, 'green')]
2016-08-07 20:38:28,961 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'blue'), (123, 126, 'red')]
2016-08-07 20:38:28,961 - DEBUG --- current_color: blue, next_color: green, current_edge: (64, 126, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,961 - DEBUG --- Loop: current_edge: (64, 126, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,961 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'red'), (64, 126, 'blue')]
2016-08-07 20:38:28,961 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'green'), (64, 71, 'red')]
2016-08-07 20:38:28,961 - DEBUG --- current_color: green, next_color: blue, current_edge: (64, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,962 - DEBUG --- Loop: current_edge: (64, 70, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:28,962 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'blue'), (64, 70, 'green'), (70, 119, 'red')]
2016-08-07 20:38:28,962 - DEBUG --- vertex: 70, edges_to_check: [(59, 70, 'blue'), (70, 119, 'red')]
2016-08-07 20:38:28,962 - DEBUG --- current_color: blue, next_color: green, current_edge: (59, 70, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,962 - DEBUG --- Loop: current_edge: (59, 70, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:28,963 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'red'), (59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,963 - DEBUG --- vertex: 59, edges_to_check: [(59, 63, 'red'), (59, 92, 'green')]
2016-08-07 20:38:28,963 - DEBUG --- current_color: green, next_color: blue, current_edge: (59, 92, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:28,963 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:28,963 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (59, 92), (56, 50), green, red
2016-08-07 20:38:28,964 - DEBUG --- out_of_scope_color: blue
2016-08-07 20:38:28,964 - DEBUG --- current_color: green
2016-08-07 20:38:28,964 - DEBUG --- Loop: current_edge: (59, 92), current_color: green, next_color: red
2016-08-07 20:38:28,964 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,964 - DEBUG --- vertex: 92, edges_to_check: [(92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:28,965 - DEBUG --- current_color: red, next_color: green, current_edge: (92, 150, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,965 - DEBUG --- Loop: current_edge: (92, 150, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,965 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'red'), (119, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,965 - DEBUG --- vertex: 150, edges_to_check: [(119, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:28,965 - DEBUG --- current_color: green, next_color: red, current_edge: (150, 156, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,966 - DEBUG --- Loop: current_edge: (150, 156, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,966 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'red'), (156, 163, 'blue')]
2016-08-07 20:38:28,966 - DEBUG --- vertex: 156, edges_to_check: [(156, 159, 'red'), (156, 163, 'blue')]
2016-08-07 20:38:28,966 - DEBUG --- current_color: red, next_color: green, current_edge: (156, 159, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,966 - DEBUG --- Loop: current_edge: (156, 159, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,967 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'blue'), (156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:28,967 - DEBUG --- vertex: 159, edges_to_check: [(123, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:28,967 - DEBUG --- current_color: green, next_color: red, current_edge: (159, 161, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,967 - DEBUG --- Loop: current_edge: (159, 161, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,967 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'blue'), (159, 161, 'green'), (161, 162, 'red')]
2016-08-07 20:38:28,968 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'blue'), (161, 162, 'red')]
2016-08-07 20:38:28,968 - DEBUG --- current_color: red, next_color: green, current_edge: (161, 162, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,968 - DEBUG --- Loop: current_edge: (161, 162, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,968 - DEBUG --- tmp_next_edges_to_check: [(161, 162, 'red'), (162, 165, 'blue'), (162, 242, 'green')]
2016-08-07 20:38:28,968 - DEBUG --- vertex: 162, edges_to_check: [(162, 165, 'blue'), (162, 242, 'green')]
2016-08-07 20:38:28,968 - DEBUG --- current_color: green, next_color: red, current_edge: (162, 242, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,969 - DEBUG --- Loop: current_edge: (162, 242, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,969 - DEBUG --- tmp_next_edges_to_check: [(162, 242, 'green'), (213, 242, 'blue'), (228, 242, 'red')]
2016-08-07 20:38:28,969 - DEBUG --- vertex: 242, edges_to_check: [(213, 242, 'blue'), (228, 242, 'red')]
2016-08-07 20:38:28,969 - DEBUG --- current_color: red, next_color: green, current_edge: (228, 242, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,970 - DEBUG --- Loop: current_edge: (228, 242, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,970 - DEBUG --- tmp_next_edges_to_check: [(225, 228, 'blue'), (228, 231, 'green'), (228, 242, 'red')]
2016-08-07 20:38:28,970 - DEBUG --- vertex: 228, edges_to_check: [(225, 228, 'blue'), (228, 231, 'green')]
2016-08-07 20:38:28,970 - DEBUG --- current_color: green, next_color: red, current_edge: (228, 231, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,970 - DEBUG --- Loop: current_edge: (228, 231, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,971 - DEBUG --- tmp_next_edges_to_check: [(52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,971 - DEBUG --- vertex: 231, edges_to_check: [(52, 231, 'blue'), (231, 259, 'red')]
2016-08-07 20:38:28,971 - DEBUG --- current_color: red, next_color: green, current_edge: (231, 259, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,971 - DEBUG --- Loop: current_edge: (231, 259, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,971 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'blue'), (213, 259, 'green'), (231, 259, 'red')]
2016-08-07 20:38:28,972 - DEBUG --- vertex: 259, edges_to_check: [(71, 259, 'blue'), (213, 259, 'green')]
2016-08-07 20:38:28,972 - DEBUG --- current_color: green, next_color: red, current_edge: (213, 259, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,972 - DEBUG --- Loop: current_edge: (213, 259, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,972 - DEBUG --- tmp_next_edges_to_check: [(137, 213, 'red'), (213, 242, 'blue'), (213, 259, 'green')]
2016-08-07 20:38:28,972 - DEBUG --- vertex: 213, edges_to_check: [(137, 213, 'red'), (213, 242, 'blue')]
2016-08-07 20:38:28,973 - DEBUG --- current_color: red, next_color: green, current_edge: (137, 213, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,973 - DEBUG --- Loop: current_edge: (137, 213, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,973 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'blue'), (137, 213, 'red')]
2016-08-07 20:38:28,973 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 161, 'blue')]
2016-08-07 20:38:28,973 - DEBUG --- current_color: green, next_color: red, current_edge: (126, 137, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,973 - DEBUG --- Loop: current_edge: (126, 137, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,974 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'blue'), (123, 126, 'red'), (126, 137, 'green')]
2016-08-07 20:38:28,974 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'blue'), (123, 126, 'red')]
2016-08-07 20:38:28,974 - DEBUG --- current_color: red, next_color: green, current_edge: (123, 126, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,974 - DEBUG --- Loop: current_edge: (123, 126, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,974 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'red'), (123, 159, 'blue')]
2016-08-07 20:38:28,975 - DEBUG --- vertex: 123, edges_to_check: [(119, 123, 'green'), (123, 159, 'blue')]
2016-08-07 20:38:28,975 - DEBUG --- current_color: green, next_color: red, current_edge: (119, 123, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,975 - DEBUG --- Loop: current_edge: (119, 123, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,975 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'red'), (119, 123, 'green'), (119, 150, 'blue')]
2016-08-07 20:38:28,976 - DEBUG --- vertex: 119, edges_to_check: [(70, 119, 'red'), (119, 150, 'blue')]
2016-08-07 20:38:28,976 - DEBUG --- current_color: red, next_color: green, current_edge: (70, 119, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,976 - DEBUG --- Loop: current_edge: (70, 119, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,976 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'blue'), (64, 70, 'green'), (70, 119, 'red')]
2016-08-07 20:38:28,976 - DEBUG --- vertex: 70, edges_to_check: [(59, 70, 'blue'), (64, 70, 'green')]
2016-08-07 20:38:28,977 - DEBUG --- current_color: green, next_color: red, current_edge: (64, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,977 - DEBUG --- Loop: current_edge: (64, 70, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,977 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'red'), (64, 126, 'blue')]
2016-08-07 20:38:28,977 - DEBUG --- vertex: 64, edges_to_check: [(64, 71, 'red'), (64, 126, 'blue')]
2016-08-07 20:38:28,977 - DEBUG --- current_color: red, next_color: green, current_edge: (64, 71, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,977 - DEBUG --- Loop: current_edge: (64, 71, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,978 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'green'), (64, 71, 'red'), (71, 259, 'blue')]
2016-08-07 20:38:28,978 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'green'), (71, 259, 'blue')]
2016-08-07 20:38:28,978 - DEBUG --- current_color: green, next_color: red, current_edge: (63, 71, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,978 - DEBUG --- Loop: current_edge: (63, 71, 'green'), current_color: green, next_color: red
2016-08-07 20:38:28,978 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'blue'), (59, 63, 'red'), (63, 71, 'green')]
2016-08-07 20:38:28,979 - DEBUG --- vertex: 63, edges_to_check: [(56, 63, 'blue'), (59, 63, 'red')]
2016-08-07 20:38:28,979 - DEBUG --- current_color: red, next_color: green, current_edge: (59, 63, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:28,979 - DEBUG --- Loop: current_edge: (59, 63, 'red'), current_color: red, next_color: green
2016-08-07 20:38:28,979 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'red'), (59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,980 - DEBUG --- vertex: 59, edges_to_check: [(59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:28,980 - DEBUG --- current_color: green, next_color: red, current_edge: (59, 92, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:28,980 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:28,980 - DEBUG --- CASE-F5-C1==C2-Swap-C3-C4-OnTop. vertex_to_join_near_v1_on_the_face: 92, vertex_in_the_top_middle: 97, c3: blue, c4: red
2016-08-07 20:38:28,980 - DEBUG --- BEGIN: kempe_chain_color_swap: (92, 97), blue, red
2016-08-07 20:38:28,981 - DEBUG --- degree: 3
2016-08-07 20:38:28,981 - DEBUG --- Loop: current_edge: (92, 97), current_color: blue, next_color: red
2016-08-07 20:38:28,981 - DEBUG --- Vertex at direction: 97
2016-08-07 20:38:28,981 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,981 - DEBUG --- tmp_next_edges_to_check: [(50, 97, 'red'), (92, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:28,982 - DEBUG --- vertex: 97, edges_to_check: [(50, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:28,982 - DEBUG --- degree: 3
2016-08-07 20:38:28,982 - DEBUG --- Loop: current_edge: (50, 97, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,982 - DEBUG --- Vertex at direction: 50
2016-08-07 20:38:28,983 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,983 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'blue'), (50, 56, 'green'), (50, 97, 'blue')]
2016-08-07 20:38:28,983 - DEBUG --- vertex: 50, edges_to_check: [(29, 50, 'blue'), (50, 56, 'green')]
2016-08-07 20:38:28,983 - DEBUG --- degree: 3
2016-08-07 20:38:28,984 - DEBUG --- Loop: current_edge: (29, 50, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,984 - DEBUG --- Vertex at direction: 29
2016-08-07 20:38:28,984 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,984 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'red'), (29, 52, 'green'), (29, 225, 'red')]
2016-08-07 20:38:28,984 - DEBUG --- vertex: 29, edges_to_check: [(29, 52, 'green'), (29, 225, 'red')]
2016-08-07 20:38:28,985 - DEBUG --- degree: 3
2016-08-07 20:38:28,985 - DEBUG --- Loop: current_edge: (29, 225, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,986 - DEBUG --- Vertex at direction: 225
2016-08-07 20:38:28,986 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,986 - DEBUG --- tmp_next_edges_to_check: [(29, 225, 'blue'), (165, 225, 'green'), (225, 228, 'blue')]
2016-08-07 20:38:28,986 - DEBUG --- vertex: 225, edges_to_check: [(165, 225, 'green'), (225, 228, 'blue')]
2016-08-07 20:38:28,987 - DEBUG --- degree: 3
2016-08-07 20:38:28,987 - DEBUG --- Loop: current_edge: (225, 228, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,987 - DEBUG --- Vertex at direction: 228
2016-08-07 20:38:28,987 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'red'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,988 - DEBUG --- tmp_next_edges_to_check: [(225, 228, 'red'), (228, 231, 'green'), (228, 242, 'red')]
2016-08-07 20:38:28,988 - DEBUG --- vertex: 228, edges_to_check: [(228, 231, 'green'), (228, 242, 'red')]
2016-08-07 20:38:28,988 - DEBUG --- degree: 3
2016-08-07 20:38:28,988 - DEBUG --- Loop: current_edge: (228, 242, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,989 - DEBUG --- Vertex at direction: 242
2016-08-07 20:38:28,989 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,989 - DEBUG --- tmp_next_edges_to_check: [(162, 242, 'green'), (213, 242, 'blue'), (228, 242, 'blue')]
2016-08-07 20:38:28,989 - DEBUG --- vertex: 242, edges_to_check: [(162, 242, 'green'), (213, 242, 'blue')]
2016-08-07 20:38:28,989 - DEBUG --- degree: 3
2016-08-07 20:38:28,990 - DEBUG --- Loop: current_edge: (213, 242, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,990 - DEBUG --- Vertex at direction: 213
2016-08-07 20:38:28,990 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,990 - DEBUG --- tmp_next_edges_to_check: [(137, 213, 'red'), (213, 242, 'red'), (213, 259, 'green')]
2016-08-07 20:38:28,991 - DEBUG --- vertex: 213, edges_to_check: [(137, 213, 'red'), (213, 259, 'green')]
2016-08-07 20:38:28,991 - DEBUG --- degree: 3
2016-08-07 20:38:28,991 - DEBUG --- Loop: current_edge: (137, 213, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,991 - DEBUG --- Vertex at direction: 137
2016-08-07 20:38:28,992 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,992 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'blue'), (137, 213, 'blue')]
2016-08-07 20:38:28,992 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 161, 'blue')]
2016-08-07 20:38:28,992 - DEBUG --- degree: 3
2016-08-07 20:38:28,993 - DEBUG --- Loop: current_edge: (137, 161, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,993 - DEBUG --- Vertex at direction: 161
2016-08-07 20:38:28,993 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,993 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'red'), (159, 161, 'green'), (161, 162, 'red')]
2016-08-07 20:38:28,994 - DEBUG --- vertex: 161, edges_to_check: [(159, 161, 'green'), (161, 162, 'red')]
2016-08-07 20:38:28,994 - DEBUG --- degree: 3
2016-08-07 20:38:28,994 - DEBUG --- Loop: current_edge: (161, 162, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,994 - DEBUG --- Vertex at direction: 162
2016-08-07 20:38:28,994 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,995 - DEBUG --- tmp_next_edges_to_check: [(161, 162, 'blue'), (162, 165, 'blue'), (162, 242, 'green')]
2016-08-07 20:38:28,995 - DEBUG --- vertex: 162, edges_to_check: [(162, 165, 'blue'), (162, 242, 'green')]
2016-08-07 20:38:28,995 - DEBUG --- degree: 3
2016-08-07 20:38:28,995 - DEBUG --- Loop: current_edge: (162, 165, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,995 - DEBUG --- Vertex at direction: 165
2016-08-07 20:38:28,996 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,996 - DEBUG --- tmp_next_edges_to_check: [(162, 165, 'red'), (163, 165, 'red'), (165, 225, 'green')]
2016-08-07 20:38:28,996 - DEBUG --- vertex: 165, edges_to_check: [(163, 165, 'red'), (165, 225, 'green')]
2016-08-07 20:38:28,996 - DEBUG --- degree: 3
2016-08-07 20:38:28,997 - DEBUG --- Loop: current_edge: (163, 165, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:28,997 - DEBUG --- Vertex at direction: 163
2016-08-07 20:38:28,997 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'blue'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,997 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'blue'), (163, 165, 'blue')]
2016-08-07 20:38:28,998 - DEBUG --- vertex: 163, edges_to_check: [(97, 163, 'green'), (156, 163, 'blue')]
2016-08-07 20:38:28,998 - DEBUG --- degree: 3
2016-08-07 20:38:28,998 - DEBUG --- Loop: current_edge: (156, 163, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:28,998 - DEBUG --- Vertex at direction: 156
2016-08-07 20:38:28,998 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:28,999 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'red'), (156, 163, 'red')]
2016-08-07 20:38:28,999 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 159, 'red')]
2016-08-07 20:38:28,999 - DEBUG --- degree: 3
2016-08-07 20:38:28,999 - DEBUG --- Loop: current_edge: (156, 159, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,000 - DEBUG --- Vertex at direction: 159
2016-08-07 20:38:29,000 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:29,000 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'blue'), (156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:29,000 - DEBUG --- vertex: 159, edges_to_check: [(123, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:29,000 - DEBUG --- degree: 3
2016-08-07 20:38:29,001 - DEBUG --- Loop: current_edge: (123, 159, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,001 - DEBUG --- Vertex at direction: 123
2016-08-07 20:38:29,001 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:29,001 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'red'), (123, 159, 'red')]
2016-08-07 20:38:29,002 - DEBUG --- vertex: 123, edges_to_check: [(119, 123, 'green'), (123, 126, 'red')]
2016-08-07 20:38:29,002 - DEBUG --- degree: 3
2016-08-07 20:38:29,002 - DEBUG --- Loop: current_edge: (123, 126, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,002 - DEBUG --- Vertex at direction: 126
2016-08-07 20:38:29,003 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,003 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'blue'), (123, 126, 'blue'), (126, 137, 'green')]
2016-08-07 20:38:29,003 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'blue'), (126, 137, 'green')]
2016-08-07 20:38:29,003 - DEBUG --- degree: 3
2016-08-07 20:38:29,003 - DEBUG --- Loop: current_edge: (64, 126, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,004 - DEBUG --- Vertex at direction: 64
2016-08-07 20:38:29,004 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,004 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'red'), (64, 126, 'red')]
2016-08-07 20:38:29,004 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'green'), (64, 71, 'red')]
2016-08-07 20:38:29,005 - DEBUG --- degree: 3
2016-08-07 20:38:29,005 - DEBUG --- Loop: current_edge: (64, 71, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,005 - DEBUG --- Vertex at direction: 71
2016-08-07 20:38:29,005 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,005 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'green'), (64, 71, 'blue'), (71, 259, 'blue')]
2016-08-07 20:38:29,006 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'green'), (71, 259, 'blue')]
2016-08-07 20:38:29,006 - DEBUG --- degree: 3
2016-08-07 20:38:29,006 - DEBUG --- Loop: current_edge: (71, 259, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,006 - DEBUG --- Vertex at direction: 259
2016-08-07 20:38:29,007 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,007 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'red'), (213, 259, 'green'), (231, 259, 'red')]
2016-08-07 20:38:29,007 - DEBUG --- vertex: 259, edges_to_check: [(213, 259, 'green'), (231, 259, 'red')]
2016-08-07 20:38:29,007 - DEBUG --- degree: 3
2016-08-07 20:38:29,007 - DEBUG --- Loop: current_edge: (231, 259, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,008 - DEBUG --- Vertex at direction: 231
2016-08-07 20:38:29,008 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,008 - DEBUG --- tmp_next_edges_to_check: [(52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:29,008 - DEBUG --- vertex: 231, edges_to_check: [(52, 231, 'blue'), (228, 231, 'green')]
2016-08-07 20:38:29,008 - DEBUG --- degree: 3
2016-08-07 20:38:29,009 - DEBUG --- Loop: current_edge: (52, 231, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,009 - DEBUG --- Vertex at direction: 52
2016-08-07 20:38:29,010 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,010 - DEBUG --- tmp_next_edges_to_check: [(29, 52, 'green'), (52, 56, 'red'), (52, 231, 'red')]
2016-08-07 20:38:29,010 - DEBUG --- vertex: 52, edges_to_check: [(29, 52, 'green'), (52, 56, 'red')]
2016-08-07 20:38:29,010 - DEBUG --- degree: 3
2016-08-07 20:38:29,011 - DEBUG --- Loop: current_edge: (52, 56, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,011 - DEBUG --- Vertex at direction: 56
2016-08-07 20:38:29,011 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,011 - DEBUG --- tmp_next_edges_to_check: [(50, 56, 'green'), (52, 56, 'blue'), (56, 63, 'blue')]
2016-08-07 20:38:29,012 - DEBUG --- vertex: 56, edges_to_check: [(50, 56, 'green'), (56, 63, 'blue')]
2016-08-07 20:38:29,012 - DEBUG --- degree: 3
2016-08-07 20:38:29,012 - DEBUG --- Loop: current_edge: (56, 63, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,012 - DEBUG --- Vertex at direction: 63
2016-08-07 20:38:29,016 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,016 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'red'), (59, 63, 'red'), (63, 71, 'green')]
2016-08-07 20:38:29,016 - DEBUG --- vertex: 63, edges_to_check: [(59, 63, 'red'), (63, 71, 'green')]
2016-08-07 20:38:29,017 - DEBUG --- degree: 3
2016-08-07 20:38:29,017 - DEBUG --- Loop: current_edge: (59, 63, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,017 - DEBUG --- Vertex at direction: 59
2016-08-07 20:38:29,017 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,018 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'blue'), (59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:29,018 - DEBUG --- vertex: 59, edges_to_check: [(59, 70, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:29,018 - DEBUG --- degree: 3
2016-08-07 20:38:29,018 - DEBUG --- Loop: current_edge: (59, 70, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,018 - DEBUG --- Vertex at direction: 70
2016-08-07 20:38:29,019 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,019 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'red'), (64, 70, 'green'), (70, 119, 'red')]
2016-08-07 20:38:29,019 - DEBUG --- vertex: 70, edges_to_check: [(64, 70, 'green'), (70, 119, 'red')]
2016-08-07 20:38:29,019 - DEBUG --- degree: 3
2016-08-07 20:38:29,020 - DEBUG --- Loop: current_edge: (70, 119, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,020 - DEBUG --- Vertex at direction: 119
2016-08-07 20:38:29,020 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,020 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'blue'), (119, 123, 'green'), (119, 150, 'blue')]
2016-08-07 20:38:29,021 - DEBUG --- vertex: 119, edges_to_check: [(119, 123, 'green'), (119, 150, 'blue')]
2016-08-07 20:38:29,021 - DEBUG --- degree: 3
2016-08-07 20:38:29,021 - DEBUG --- Loop: current_edge: (119, 150, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,021 - DEBUG --- Vertex at direction: 150
2016-08-07 20:38:29,021 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,022 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'red'), (119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:29,022 - DEBUG --- vertex: 150, edges_to_check: [(92, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:29,022 - DEBUG --- degree: 3
2016-08-07 20:38:29,023 - DEBUG --- Loop: current_edge: (92, 150, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,023 - DEBUG --- Vertex at direction: 92
2016-08-07 20:38:29,023 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,024 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:29,024 - DEBUG --- vertex: 92, edges_to_check: [(59, 92, 'green'), (92, 97, 'red')]
2016-08-07 20:38:29,024 - DEBUG --- END: kempe_chain_color_swap
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
2016-08-07 20:38:29,024 - INFO --- ------------------
2016-08-07 20:38:29,025 - INFO --- BEGIN: Print stats
2016-08-07 20:38:29,025 - INFO --- ------------------
2016-08-07 20:38:29,025 - INFO --- Stat: CASE-F2-01 = 0 times
2016-08-07 20:38:29,025 - INFO --- Stat: CASE-F3-01 = 2 times
2016-08-07 20:38:29,025 - INFO --- Stat: CASE-F4-01 = 6 times
2016-08-07 20:38:29,026 - INFO --- Stat: CASE-F4-02 = 2 times
2016-08-07 20:38:29,026 - INFO --- Stat: CASE-F4-03 = 1 times
2016-08-07 20:38:29,026 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:29,026 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-Swap-C1-C2-At-v2 = 0 times
2016-08-07 20:38:29,026 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:29,027 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-Swap-C2-C1-At-v2 = 1 times
2016-08-07 20:38:29,027 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4==C1-Shortest-KempeLoop = 0 times
2016-08-07 20:38:29,027 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C3 = 1 times
2016-08-07 20:38:29,027 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C4 = 0 times
2016-08-07 20:38:29,027 - INFO --- Stat: CASE-F5-C1==C2-Swap-C3-C4-OnTop = 8 times
2016-08-07 20:38:29,028 - INFO --- ----------------
2016-08-07 20:38:29,028 - INFO --- END: Print stats
2016-08-07 20:38:29,028 - INFO --- ----------------
2016-08-07 20:38:29,028 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (59, 92), (56, 50), green, red
2016-08-07 20:38:29,028 - DEBUG --- out_of_scope_color: blue
2016-08-07 20:38:29,029 - DEBUG --- current_color: green
2016-08-07 20:38:29,029 - DEBUG --- Loop: current_edge: (59, 92), current_color: green, next_color: red
2016-08-07 20:38:29,029 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:29,029 - DEBUG --- vertex: 92, edges_to_check: [(92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:29,029 - DEBUG --- current_color: red, next_color: green, current_edge: (92, 97, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,030 - DEBUG --- Loop: current_edge: (92, 97, 'red'), current_color: red, next_color: green
2016-08-07 20:38:29,030 - DEBUG --- tmp_next_edges_to_check: [(50, 97, 'blue'), (92, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:29,030 - DEBUG --- vertex: 97, edges_to_check: [(50, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:29,030 - DEBUG --- current_color: green, next_color: red, current_edge: (97, 163, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,030 - DEBUG --- Loop: current_edge: (97, 163, 'green'), current_color: green, next_color: red
2016-08-07 20:38:29,031 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'red'), (163, 165, 'blue')]
2016-08-07 20:38:29,031 - DEBUG --- vertex: 163, edges_to_check: [(156, 163, 'red'), (163, 165, 'blue')]
2016-08-07 20:38:29,031 - DEBUG --- current_color: red, next_color: green, current_edge: (156, 163, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,031 - DEBUG --- Loop: current_edge: (156, 163, 'red'), current_color: red, next_color: green
2016-08-07 20:38:29,032 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'blue'), (156, 163, 'red')]
2016-08-07 20:38:29,032 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 159, 'blue')]
2016-08-07 20:38:29,032 - DEBUG --- current_color: green, next_color: red, current_edge: (150, 156, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,032 - DEBUG --- Loop: current_edge: (150, 156, 'green'), current_color: green, next_color: red
2016-08-07 20:38:29,032 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'blue'), (119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:29,033 - DEBUG --- vertex: 150, edges_to_check: [(92, 150, 'blue'), (119, 150, 'red')]
2016-08-07 20:38:29,033 - DEBUG --- current_color: red, next_color: green, current_edge: (119, 150, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,033 - DEBUG --- Loop: current_edge: (119, 150, 'red'), current_color: red, next_color: green
2016-08-07 20:38:29,033 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'blue'), (119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:29,034 - DEBUG --- vertex: 119, edges_to_check: [(70, 119, 'blue'), (119, 123, 'green')]
2016-08-07 20:38:29,034 - DEBUG --- current_color: green, next_color: red, current_edge: (119, 123, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,034 - DEBUG --- Loop: current_edge: (119, 123, 'green'), current_color: green, next_color: red
2016-08-07 20:38:29,034 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'blue'), (123, 159, 'red')]
2016-08-07 20:38:29,034 - DEBUG --- vertex: 123, edges_to_check: [(123, 126, 'blue'), (123, 159, 'red')]
2016-08-07 20:38:29,035 - DEBUG --- current_color: red, next_color: green, current_edge: (123, 159, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,035 - DEBUG --- Loop: current_edge: (123, 159, 'red'), current_color: red, next_color: green
2016-08-07 20:38:29,035 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'red'), (156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:29,035 - DEBUG --- vertex: 159, edges_to_check: [(156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:29,035 - DEBUG --- current_color: green, next_color: red, current_edge: (159, 161, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,036 - DEBUG --- Loop: current_edge: (159, 161, 'green'), current_color: green, next_color: red
2016-08-07 20:38:29,036 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'red'), (159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:29,036 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'red'), (161, 162, 'blue')]
2016-08-07 20:38:29,036 - DEBUG --- current_color: red, next_color: green, current_edge: (137, 161, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,036 - DEBUG --- Loop: current_edge: (137, 161, 'red'), current_color: red, next_color: green
2016-08-07 20:38:29,037 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'red'), (137, 213, 'blue')]
2016-08-07 20:38:29,037 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 213, 'blue')]
2016-08-07 20:38:29,037 - DEBUG --- current_color: green, next_color: red, current_edge: (126, 137, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,037 - DEBUG --- Loop: current_edge: (126, 137, 'green'), current_color: green, next_color: red
2016-08-07 20:38:29,037 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'red'), (123, 126, 'blue'), (126, 137, 'green')]
2016-08-07 20:38:29,038 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'red'), (123, 126, 'blue')]
2016-08-07 20:38:29,038 - DEBUG --- current_color: red, next_color: green, current_edge: (64, 126, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,038 - DEBUG --- Loop: current_edge: (64, 126, 'red'), current_color: red, next_color: green
2016-08-07 20:38:29,038 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'blue'), (64, 126, 'red')]
2016-08-07 20:38:29,038 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'green'), (64, 71, 'blue')]
2016-08-07 20:38:29,039 - DEBUG --- current_color: green, next_color: red, current_edge: (64, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,039 - DEBUG --- Loop: current_edge: (64, 70, 'green'), current_color: green, next_color: red
2016-08-07 20:38:29,039 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'red'), (64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:29,039 - DEBUG --- vertex: 70, edges_to_check: [(59, 70, 'red'), (70, 119, 'blue')]
2016-08-07 20:38:29,039 - DEBUG --- current_color: red, next_color: green, current_edge: (59, 70, 'red'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,040 - DEBUG --- Loop: current_edge: (59, 70, 'red'), current_color: red, next_color: green
2016-08-07 20:38:29,040 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'blue'), (59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:29,040 - DEBUG --- vertex: 59, edges_to_check: [(59, 63, 'blue'), (59, 92, 'green')]
2016-08-07 20:38:29,040 - DEBUG --- current_color: green, next_color: red, current_edge: (59, 92, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:29,040 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:29,041 - DEBUG --- BEGIN: are_edges_on_the_same_kempe_cycle: (59, 92), (56, 50), green, blue
2016-08-07 20:38:29,041 - DEBUG --- out_of_scope_color: red
2016-08-07 20:38:29,042 - DEBUG --- current_color: green
2016-08-07 20:38:29,042 - DEBUG --- Loop: current_edge: (59, 92), current_color: green, next_color: blue
2016-08-07 20:38:29,042 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:29,042 - DEBUG --- vertex: 92, edges_to_check: [(92, 97, 'red'), (92, 150, 'blue')]
2016-08-07 20:38:29,043 - DEBUG --- current_color: blue, next_color: green, current_edge: (92, 150, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,043 - DEBUG --- Loop: current_edge: (92, 150, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:29,043 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'blue'), (119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:29,043 - DEBUG --- vertex: 150, edges_to_check: [(119, 150, 'red'), (150, 156, 'green')]
2016-08-07 20:38:29,043 - DEBUG --- current_color: green, next_color: blue, current_edge: (150, 156, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,044 - DEBUG --- Loop: current_edge: (150, 156, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:29,044 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'blue'), (156, 163, 'red')]
2016-08-07 20:38:29,044 - DEBUG --- vertex: 156, edges_to_check: [(156, 159, 'blue'), (156, 163, 'red')]
2016-08-07 20:38:29,044 - DEBUG --- current_color: blue, next_color: green, current_edge: (156, 159, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,044 - DEBUG --- Loop: current_edge: (156, 159, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:29,045 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'red'), (156, 159, 'blue'), (159, 161, 'green')]
2016-08-07 20:38:29,045 - DEBUG --- vertex: 159, edges_to_check: [(123, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:29,045 - DEBUG --- current_color: green, next_color: blue, current_edge: (159, 161, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,045 - DEBUG --- Loop: current_edge: (159, 161, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:29,045 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'red'), (159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:29,046 - DEBUG --- vertex: 161, edges_to_check: [(137, 161, 'red'), (161, 162, 'blue')]
2016-08-07 20:38:29,046 - DEBUG --- current_color: blue, next_color: green, current_edge: (161, 162, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,046 - DEBUG --- Loop: current_edge: (161, 162, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:29,046 - DEBUG --- tmp_next_edges_to_check: [(161, 162, 'blue'), (162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:29,046 - DEBUG --- vertex: 162, edges_to_check: [(162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:29,047 - DEBUG --- current_color: green, next_color: blue, current_edge: (162, 242, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,047 - DEBUG --- Loop: current_edge: (162, 242, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:29,047 - DEBUG --- tmp_next_edges_to_check: [(162, 242, 'green'), (213, 242, 'red'), (228, 242, 'blue')]
2016-08-07 20:38:29,047 - DEBUG --- vertex: 242, edges_to_check: [(213, 242, 'red'), (228, 242, 'blue')]
2016-08-07 20:38:29,047 - DEBUG --- current_color: blue, next_color: green, current_edge: (228, 242, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,047 - DEBUG --- Loop: current_edge: (228, 242, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:29,048 - DEBUG --- tmp_next_edges_to_check: [(225, 228, 'red'), (228, 231, 'green'), (228, 242, 'blue')]
2016-08-07 20:38:29,048 - DEBUG --- vertex: 228, edges_to_check: [(225, 228, 'red'), (228, 231, 'green')]
2016-08-07 20:38:29,048 - DEBUG --- current_color: green, next_color: blue, current_edge: (228, 231, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,048 - DEBUG --- Loop: current_edge: (228, 231, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:29,048 - DEBUG --- tmp_next_edges_to_check: [(52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:29,049 - DEBUG --- vertex: 231, edges_to_check: [(52, 231, 'red'), (231, 259, 'blue')]
2016-08-07 20:38:29,049 - DEBUG --- current_color: blue, next_color: green, current_edge: (231, 259, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,049 - DEBUG --- Loop: current_edge: (231, 259, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:29,049 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'red'), (213, 259, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:29,049 - DEBUG --- vertex: 259, edges_to_check: [(71, 259, 'red'), (213, 259, 'green')]
2016-08-07 20:38:29,050 - DEBUG --- current_color: green, next_color: blue, current_edge: (213, 259, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,050 - DEBUG --- Loop: current_edge: (213, 259, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:29,050 - DEBUG --- tmp_next_edges_to_check: [(137, 213, 'blue'), (213, 242, 'red'), (213, 259, 'green')]
2016-08-07 20:38:29,050 - DEBUG --- vertex: 213, edges_to_check: [(137, 213, 'blue'), (213, 242, 'red')]
2016-08-07 20:38:29,050 - DEBUG --- current_color: blue, next_color: green, current_edge: (137, 213, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,051 - DEBUG --- Loop: current_edge: (137, 213, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:29,051 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'red'), (137, 213, 'blue')]
2016-08-07 20:38:29,051 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 161, 'red')]
2016-08-07 20:38:29,051 - DEBUG --- current_color: green, next_color: blue, current_edge: (126, 137, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,051 - DEBUG --- Loop: current_edge: (126, 137, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:29,052 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'red'), (123, 126, 'blue'), (126, 137, 'green')]
2016-08-07 20:38:29,052 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'red'), (123, 126, 'blue')]
2016-08-07 20:38:29,052 - DEBUG --- current_color: blue, next_color: green, current_edge: (123, 126, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,052 - DEBUG --- Loop: current_edge: (123, 126, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:29,052 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'blue'), (123, 159, 'red')]
2016-08-07 20:38:29,053 - DEBUG --- vertex: 123, edges_to_check: [(119, 123, 'green'), (123, 159, 'red')]
2016-08-07 20:38:29,053 - DEBUG --- current_color: green, next_color: blue, current_edge: (119, 123, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,053 - DEBUG --- Loop: current_edge: (119, 123, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:29,053 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'blue'), (119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:29,053 - DEBUG --- vertex: 119, edges_to_check: [(70, 119, 'blue'), (119, 150, 'red')]
2016-08-07 20:38:29,054 - DEBUG --- current_color: blue, next_color: green, current_edge: (70, 119, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,054 - DEBUG --- Loop: current_edge: (70, 119, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:29,054 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'red'), (64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:29,054 - DEBUG --- vertex: 70, edges_to_check: [(59, 70, 'red'), (64, 70, 'green')]
2016-08-07 20:38:29,054 - DEBUG --- current_color: green, next_color: blue, current_edge: (64, 70, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,054 - DEBUG --- Loop: current_edge: (64, 70, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:29,055 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'blue'), (64, 126, 'red')]
2016-08-07 20:38:29,055 - DEBUG --- vertex: 64, edges_to_check: [(64, 71, 'blue'), (64, 126, 'red')]
2016-08-07 20:38:29,055 - DEBUG --- current_color: blue, next_color: green, current_edge: (64, 71, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,055 - DEBUG --- Loop: current_edge: (64, 71, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:29,055 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'green'), (64, 71, 'blue'), (71, 259, 'red')]
2016-08-07 20:38:29,056 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'green'), (71, 259, 'red')]
2016-08-07 20:38:29,056 - DEBUG --- current_color: green, next_color: blue, current_edge: (63, 71, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,056 - DEBUG --- Loop: current_edge: (63, 71, 'green'), current_color: green, next_color: blue
2016-08-07 20:38:29,056 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'red'), (59, 63, 'blue'), (63, 71, 'green')]
2016-08-07 20:38:29,056 - DEBUG --- vertex: 63, edges_to_check: [(56, 63, 'red'), (59, 63, 'blue')]
2016-08-07 20:38:29,057 - DEBUG --- current_color: blue, next_color: green, current_edge: (59, 63, 'blue'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: False
2016-08-07 20:38:29,057 - DEBUG --- Loop: current_edge: (59, 63, 'blue'), current_color: blue, next_color: green
2016-08-07 20:38:29,057 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'blue'), (59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:29,057 - DEBUG --- vertex: 59, edges_to_check: [(59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:29,058 - DEBUG --- current_color: green, next_color: blue, current_edge: (59, 92, 'green'), are_edges_on_the_same_kempe_cycle: False, is_the_end_of_search_process: True
2016-08-07 20:38:29,058 - DEBUG --- END: are_edges_on_the_same_kempe_cycle: False
2016-08-07 20:38:29,058 - DEBUG --- CASE-F5-C1==C2-Swap-C3-C4-OnTop. vertex_to_join_near_v1_on_the_face: 92, vertex_in_the_top_middle: 97, c3: red, c4: blue
2016-08-07 20:38:29,058 - DEBUG --- BEGIN: kempe_chain_color_swap: (92, 97), red, blue
2016-08-07 20:38:29,058 - DEBUG --- degree: 3
2016-08-07 20:38:29,058 - DEBUG --- Loop: current_edge: (92, 97), current_color: red, next_color: blue
2016-08-07 20:38:29,059 - DEBUG --- Vertex at direction: 97
2016-08-07 20:38:29,059 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'blue'), (92, 97, 'red'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,059 - DEBUG --- tmp_next_edges_to_check: [(50, 97, 'blue'), (92, 97, 'red'), (97, 163, 'green')]
2016-08-07 20:38:29,059 - DEBUG --- vertex: 97, edges_to_check: [(50, 97, 'blue'), (97, 163, 'green')]
2016-08-07 20:38:29,060 - DEBUG --- degree: 3
2016-08-07 20:38:29,060 - DEBUG --- Loop: current_edge: (50, 97, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,060 - DEBUG --- Vertex at direction: 50
2016-08-07 20:38:29,060 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'red'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,060 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'red'), (50, 56, 'green'), (50, 97, 'red')]
2016-08-07 20:38:29,061 - DEBUG --- vertex: 50, edges_to_check: [(29, 50, 'red'), (50, 56, 'green')]
2016-08-07 20:38:29,061 - DEBUG --- degree: 3
2016-08-07 20:38:29,061 - DEBUG --- Loop: current_edge: (29, 50, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,061 - DEBUG --- Vertex at direction: 29
2016-08-07 20:38:29,062 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'blue'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,062 - DEBUG --- tmp_next_edges_to_check: [(29, 50, 'blue'), (29, 52, 'green'), (29, 225, 'blue')]
2016-08-07 20:38:29,062 - DEBUG --- vertex: 29, edges_to_check: [(29, 52, 'green'), (29, 225, 'blue')]
2016-08-07 20:38:29,062 - DEBUG --- degree: 3
2016-08-07 20:38:29,063 - DEBUG --- Loop: current_edge: (29, 225, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,063 - DEBUG --- Vertex at direction: 225
2016-08-07 20:38:29,064 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'red'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,064 - DEBUG --- tmp_next_edges_to_check: [(29, 225, 'red'), (165, 225, 'green'), (225, 228, 'red')]
2016-08-07 20:38:29,064 - DEBUG --- vertex: 225, edges_to_check: [(165, 225, 'green'), (225, 228, 'red')]
2016-08-07 20:38:29,065 - DEBUG --- degree: 3
2016-08-07 20:38:29,065 - DEBUG --- Loop: current_edge: (225, 228, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,065 - DEBUG --- Vertex at direction: 228
2016-08-07 20:38:29,065 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'blue'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,065 - DEBUG --- tmp_next_edges_to_check: [(225, 228, 'blue'), (228, 231, 'green'), (228, 242, 'blue')]
2016-08-07 20:38:29,066 - DEBUG --- vertex: 228, edges_to_check: [(228, 231, 'green'), (228, 242, 'blue')]
2016-08-07 20:38:29,066 - DEBUG --- degree: 3
2016-08-07 20:38:29,066 - DEBUG --- Loop: current_edge: (228, 242, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,066 - DEBUG --- Vertex at direction: 242
2016-08-07 20:38:29,067 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'red'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,067 - DEBUG --- tmp_next_edges_to_check: [(162, 242, 'green'), (213, 242, 'red'), (228, 242, 'red')]
2016-08-07 20:38:29,067 - DEBUG --- vertex: 242, edges_to_check: [(162, 242, 'green'), (213, 242, 'red')]
2016-08-07 20:38:29,068 - DEBUG --- degree: 3
2016-08-07 20:38:29,068 - DEBUG --- Loop: current_edge: (213, 242, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,068 - DEBUG --- Vertex at direction: 213
2016-08-07 20:38:29,068 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'blue'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,068 - DEBUG --- tmp_next_edges_to_check: [(137, 213, 'blue'), (213, 242, 'blue'), (213, 259, 'green')]
2016-08-07 20:38:29,069 - DEBUG --- vertex: 213, edges_to_check: [(137, 213, 'blue'), (213, 259, 'green')]
2016-08-07 20:38:29,069 - DEBUG --- degree: 3
2016-08-07 20:38:29,069 - DEBUG --- Loop: current_edge: (137, 213, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,069 - DEBUG --- Vertex at direction: 137
2016-08-07 20:38:29,070 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'red'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,070 - DEBUG --- tmp_next_edges_to_check: [(126, 137, 'green'), (137, 161, 'red'), (137, 213, 'red')]
2016-08-07 20:38:29,070 - DEBUG --- vertex: 137, edges_to_check: [(126, 137, 'green'), (137, 161, 'red')]
2016-08-07 20:38:29,070 - DEBUG --- degree: 3
2016-08-07 20:38:29,071 - DEBUG --- Loop: current_edge: (137, 161, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,071 - DEBUG --- Vertex at direction: 161
2016-08-07 20:38:29,071 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'blue'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,071 - DEBUG --- tmp_next_edges_to_check: [(137, 161, 'blue'), (159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:29,072 - DEBUG --- vertex: 161, edges_to_check: [(159, 161, 'green'), (161, 162, 'blue')]
2016-08-07 20:38:29,072 - DEBUG --- degree: 3
2016-08-07 20:38:29,072 - DEBUG --- Loop: current_edge: (161, 162, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,072 - DEBUG --- Vertex at direction: 162
2016-08-07 20:38:29,072 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'red'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,073 - DEBUG --- tmp_next_edges_to_check: [(161, 162, 'red'), (162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:29,073 - DEBUG --- vertex: 162, edges_to_check: [(162, 165, 'red'), (162, 242, 'green')]
2016-08-07 20:38:29,073 - DEBUG --- degree: 3
2016-08-07 20:38:29,073 - DEBUG --- Loop: current_edge: (162, 165, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,074 - DEBUG --- Vertex at direction: 165
2016-08-07 20:38:29,074 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'red'), (163, 165, 'blue'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,074 - DEBUG --- tmp_next_edges_to_check: [(162, 165, 'blue'), (163, 165, 'blue'), (165, 225, 'green')]
2016-08-07 20:38:29,075 - DEBUG --- vertex: 165, edges_to_check: [(163, 165, 'blue'), (165, 225, 'green')]
2016-08-07 20:38:29,075 - DEBUG --- degree: 3
2016-08-07 20:38:29,075 - DEBUG --- Loop: current_edge: (163, 165, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,075 - DEBUG --- Vertex at direction: 163
2016-08-07 20:38:29,076 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'red'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,076 - DEBUG --- tmp_next_edges_to_check: [(97, 163, 'green'), (156, 163, 'red'), (163, 165, 'red')]
2016-08-07 20:38:29,076 - DEBUG --- vertex: 163, edges_to_check: [(97, 163, 'green'), (156, 163, 'red')]
2016-08-07 20:38:29,076 - DEBUG --- degree: 3
2016-08-07 20:38:29,076 - DEBUG --- Loop: current_edge: (156, 163, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,077 - DEBUG --- Vertex at direction: 156
2016-08-07 20:38:29,077 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'blue'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,077 - DEBUG --- tmp_next_edges_to_check: [(150, 156, 'green'), (156, 159, 'blue'), (156, 163, 'blue')]
2016-08-07 20:38:29,078 - DEBUG --- vertex: 156, edges_to_check: [(150, 156, 'green'), (156, 159, 'blue')]
2016-08-07 20:38:29,078 - DEBUG --- degree: 3
2016-08-07 20:38:29,078 - DEBUG --- Loop: current_edge: (156, 159, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,078 - DEBUG --- Vertex at direction: 159
2016-08-07 20:38:29,078 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'red'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,079 - DEBUG --- tmp_next_edges_to_check: [(123, 159, 'red'), (156, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:29,079 - DEBUG --- vertex: 159, edges_to_check: [(123, 159, 'red'), (159, 161, 'green')]
2016-08-07 20:38:29,079 - DEBUG --- degree: 3
2016-08-07 20:38:29,079 - DEBUG --- Loop: current_edge: (123, 159, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,080 - DEBUG --- Vertex at direction: 123
2016-08-07 20:38:29,080 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'blue')], is_regular: True
2016-08-07 20:38:29,080 - DEBUG --- tmp_next_edges_to_check: [(119, 123, 'green'), (123, 126, 'blue'), (123, 159, 'blue')]
2016-08-07 20:38:29,080 - DEBUG --- vertex: 123, edges_to_check: [(119, 123, 'green'), (123, 126, 'blue')]
2016-08-07 20:38:29,080 - DEBUG --- degree: 3
2016-08-07 20:38:29,081 - DEBUG --- Loop: current_edge: (123, 126, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,081 - DEBUG --- Vertex at direction: 126
2016-08-07 20:38:29,081 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'red'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:29,081 - DEBUG --- tmp_next_edges_to_check: [(64, 126, 'red'), (123, 126, 'red'), (126, 137, 'green')]
2016-08-07 20:38:29,082 - DEBUG --- vertex: 126, edges_to_check: [(64, 126, 'red'), (126, 137, 'green')]
2016-08-07 20:38:29,082 - DEBUG --- degree: 3
2016-08-07 20:38:29,082 - DEBUG --- Loop: current_edge: (64, 126, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,082 - DEBUG --- Vertex at direction: 64
2016-08-07 20:38:29,083 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'blue'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:29,083 - DEBUG --- tmp_next_edges_to_check: [(64, 70, 'green'), (64, 71, 'blue'), (64, 126, 'blue')]
2016-08-07 20:38:29,083 - DEBUG --- vertex: 64, edges_to_check: [(64, 70, 'green'), (64, 71, 'blue')]
2016-08-07 20:38:29,083 - DEBUG --- degree: 3
2016-08-07 20:38:29,083 - DEBUG --- Loop: current_edge: (64, 71, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,084 - DEBUG --- Vertex at direction: 71
2016-08-07 20:38:29,084 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'red'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:29,084 - DEBUG --- tmp_next_edges_to_check: [(63, 71, 'green'), (64, 71, 'red'), (71, 259, 'red')]
2016-08-07 20:38:29,084 - DEBUG --- vertex: 71, edges_to_check: [(63, 71, 'green'), (71, 259, 'red')]
2016-08-07 20:38:29,085 - DEBUG --- degree: 3
2016-08-07 20:38:29,085 - DEBUG --- Loop: current_edge: (71, 259, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,085 - DEBUG --- Vertex at direction: 259
2016-08-07 20:38:29,085 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'blue'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:29,086 - DEBUG --- tmp_next_edges_to_check: [(71, 259, 'blue'), (213, 259, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:29,086 - DEBUG --- vertex: 259, edges_to_check: [(213, 259, 'green'), (231, 259, 'blue')]
2016-08-07 20:38:29,086 - DEBUG --- degree: 3
2016-08-07 20:38:29,086 - DEBUG --- Loop: current_edge: (231, 259, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,086 - DEBUG --- Vertex at direction: 231
2016-08-07 20:38:29,087 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'red'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:29,087 - DEBUG --- tmp_next_edges_to_check: [(52, 231, 'red'), (228, 231, 'green'), (231, 259, 'red')]
2016-08-07 20:38:29,088 - DEBUG --- vertex: 231, edges_to_check: [(52, 231, 'red'), (228, 231, 'green')]
2016-08-07 20:38:29,088 - DEBUG --- degree: 3
2016-08-07 20:38:29,088 - DEBUG --- Loop: current_edge: (52, 231, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,089 - DEBUG --- Vertex at direction: 52
2016-08-07 20:38:29,089 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'blue'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:29,089 - DEBUG --- tmp_next_edges_to_check: [(29, 52, 'green'), (52, 56, 'blue'), (52, 231, 'blue')]
2016-08-07 20:38:29,089 - DEBUG --- vertex: 52, edges_to_check: [(29, 52, 'green'), (52, 56, 'blue')]
2016-08-07 20:38:29,090 - DEBUG --- degree: 3
2016-08-07 20:38:29,090 - DEBUG --- Loop: current_edge: (52, 56, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,090 - DEBUG --- Vertex at direction: 56
2016-08-07 20:38:29,090 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'red'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:29,090 - DEBUG --- tmp_next_edges_to_check: [(50, 56, 'green'), (52, 56, 'red'), (56, 63, 'red')]
2016-08-07 20:38:29,091 - DEBUG --- vertex: 56, edges_to_check: [(50, 56, 'green'), (56, 63, 'red')]
2016-08-07 20:38:29,091 - DEBUG --- degree: 3
2016-08-07 20:38:29,091 - DEBUG --- Loop: current_edge: (56, 63, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,092 - DEBUG --- Vertex at direction: 63
2016-08-07 20:38:29,092 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'blue'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:29,092 - DEBUG --- tmp_next_edges_to_check: [(56, 63, 'blue'), (59, 63, 'blue'), (63, 71, 'green')]
2016-08-07 20:38:29,092 - DEBUG --- vertex: 63, edges_to_check: [(59, 63, 'blue'), (63, 71, 'green')]
2016-08-07 20:38:29,093 - DEBUG --- degree: 3
2016-08-07 20:38:29,093 - DEBUG --- Loop: current_edge: (59, 63, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,093 - DEBUG --- Vertex at direction: 59
2016-08-07 20:38:29,093 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'red'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:29,094 - DEBUG --- tmp_next_edges_to_check: [(59, 63, 'red'), (59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:29,094 - DEBUG --- vertex: 59, edges_to_check: [(59, 70, 'red'), (59, 92, 'green')]
2016-08-07 20:38:29,094 - DEBUG --- degree: 3
2016-08-07 20:38:29,094 - DEBUG --- Loop: current_edge: (59, 70, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,094 - DEBUG --- Vertex at direction: 70
2016-08-07 20:38:29,095 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'blue'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:29,095 - DEBUG --- tmp_next_edges_to_check: [(59, 70, 'blue'), (64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:29,095 - DEBUG --- vertex: 70, edges_to_check: [(64, 70, 'green'), (70, 119, 'blue')]
2016-08-07 20:38:29,095 - DEBUG --- degree: 3
2016-08-07 20:38:29,095 - DEBUG --- Loop: current_edge: (70, 119, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,096 - DEBUG --- Vertex at direction: 119
2016-08-07 20:38:29,096 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'red'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:29,096 - DEBUG --- tmp_next_edges_to_check: [(70, 119, 'red'), (119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:29,096 - DEBUG --- vertex: 119, edges_to_check: [(119, 123, 'green'), (119, 150, 'red')]
2016-08-07 20:38:29,097 - DEBUG --- degree: 3
2016-08-07 20:38:29,097 - DEBUG --- Loop: current_edge: (119, 150, 'red'), current_color: red, next_color: blue
2016-08-07 20:38:29,097 - DEBUG --- Vertex at direction: 150
2016-08-07 20:38:29,097 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'blue'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:29,098 - DEBUG --- tmp_next_edges_to_check: [(92, 150, 'blue'), (119, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:29,098 - DEBUG --- vertex: 150, edges_to_check: [(92, 150, 'blue'), (150, 156, 'green')]
2016-08-07 20:38:29,098 - DEBUG --- degree: 3
2016-08-07 20:38:29,098 - DEBUG --- Loop: current_edge: (92, 150, 'blue'), current_color: blue, next_color: red
2016-08-07 20:38:29,098 - DEBUG --- Vertex at direction: 92
2016-08-07 20:38:29,099 - DEBUG --- Edges: [(213, 259, 'green'), (137, 213, 'red'), (119, 150, 'blue'), (150, 156, 'green'), (92, 150, 'red'), (156, 159, 'red'), (159, 161, 'green'), (123, 159, 'blue'), (137, 161, 'blue'), (161, 162, 'red'), (162, 165, 'blue'), (156, 163, 'blue'), (163, 165, 'red'), (165, 225, 'green'), (29, 50, 'blue'), (29, 52, 'green'), (56, 63, 'blue'), (52, 56, 'red'), (50, 56, 'green'), (59, 92, 'green'), (63, 71, 'green'), (59, 63, 'red'), (64, 71, 'red'), (64, 126, 'blue'), (70, 119, 'red'), (64, 70, 'green'), (59, 70, 'blue'), (71, 259, 'blue'), (97, 163, 'green'), (50, 97, 'red'), (92, 97, 'blue'), (228, 242, 'red'), (225, 228, 'blue'), (52, 231, 'blue'), (228, 231, 'green'), (231, 259, 'red'), (29, 225, 'red'), (213, 242, 'blue'), (162, 242, 'green'), (119, 123, 'green'), (126, 137, 'green'), (123, 126, 'red')], is_regular: True
2016-08-07 20:38:29,099 - DEBUG --- tmp_next_edges_to_check: [(59, 92, 'green'), (92, 97, 'blue'), (92, 150, 'red')]
2016-08-07 20:38:29,099 - DEBUG --- vertex: 92, edges_to_check: [(59, 92, 'green'), (92, 97, 'blue')]
2016-08-07 20:38:29,099 - DEBUG --- END: kempe_chain_color_swap
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
2016-08-07 20:38:29,099 - INFO --- ------------------
2016-08-07 20:38:29,100 - INFO --- BEGIN: Print stats
2016-08-07 20:38:29,100 - INFO --- ------------------
2016-08-07 20:38:29,100 - INFO --- Stat: CASE-F2-01 = 0 times
2016-08-07 20:38:29,100 - INFO --- Stat: CASE-F3-01 = 2 times
2016-08-07 20:38:29,100 - INFO --- Stat: CASE-F4-01 = 6 times
2016-08-07 20:38:29,101 - INFO --- Stat: CASE-F4-02 = 2 times
2016-08-07 20:38:29,101 - INFO --- Stat: CASE-F4-03 = 1 times
2016-08-07 20:38:29,101 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:29,101 - INFO --- Stat: CASE-F5-C1!=C2-C3!=C2-Swap-C1-C2-At-v2 = 0 times
2016-08-07 20:38:29,101 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-SameKempeLoop-C1-C2 = 0 times
2016-08-07 20:38:29,102 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4!=C1-Swap-C2-C1-At-v2 = 1 times
2016-08-07 20:38:29,102 - INFO --- Stat: CASE-F5-C1!=C2-C3==C2-C4==C1-Shortest-KempeLoop = 0 times
2016-08-07 20:38:29,102 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C3 = 1 times
2016-08-07 20:38:29,102 - INFO --- Stat: CASE-F5-C1==C2-SameKempeLoop-C1-C4 = 0 times
2016-08-07 20:38:29,102 - INFO --- Stat: CASE-F5-C1==C2-Swap-C3-C4-OnTop = 9 times
2016-08-07 20:38:29,103 - INFO --- ----------------
2016-08-07 20:38:29,103 - INFO --- END: Print stats
2016-08-07 20:38:29,103 - INFO --- ----------------
2016-08-07 20:38:29,103 - ERROR --- Unexpected condition (endless loop). Mario you'd better go back on paper
